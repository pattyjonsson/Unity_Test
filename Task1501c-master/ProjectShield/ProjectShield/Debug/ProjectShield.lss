
ProjectShield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005910  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085910  00085910  0000d910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000099c  20070000  00085918  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001f0  2007099c  000862b4  0001099c  2**2
                  ALLOC
  4 .stack        00002004  20070b8c  000864a4  0001099c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  0001099c  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109c5  2**0
                  CONTENTS, READONLY
  7 .debug_info   000167a3  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003847  00000000  00000000  000271c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00006a2a  00000000  00000000  0002aa0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d38  00000000  00000000  00031434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b70  00000000  00000000  0003216c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001cb46  00000000  00000000  00032cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00017672  00000000  00000000  0004f822  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006d4bb  00000000  00000000  00066e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000026f8  00000000  00000000  000d4350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b90 	.word	0x20072b90
   80004:	00082351 	.word	0x00082351
   80008:	0008234d 	.word	0x0008234d
   8000c:	0008234d 	.word	0x0008234d
   80010:	0008234d 	.word	0x0008234d
   80014:	0008234d 	.word	0x0008234d
   80018:	0008234d 	.word	0x0008234d
	...
   8002c:	0008234d 	.word	0x0008234d
   80030:	0008234d 	.word	0x0008234d
   80034:	00000000 	.word	0x00000000
   80038:	0008234d 	.word	0x0008234d
   8003c:	0008234d 	.word	0x0008234d
   80040:	0008234d 	.word	0x0008234d
   80044:	0008234d 	.word	0x0008234d
   80048:	0008234d 	.word	0x0008234d
   8004c:	0008234d 	.word	0x0008234d
   80050:	0008234d 	.word	0x0008234d
   80054:	0008234d 	.word	0x0008234d
   80058:	0008234d 	.word	0x0008234d
   8005c:	0008234d 	.word	0x0008234d
   80060:	0008234d 	.word	0x0008234d
   80064:	0008234d 	.word	0x0008234d
   80068:	00000000 	.word	0x00000000
   8006c:	000821bd 	.word	0x000821bd
   80070:	000821d1 	.word	0x000821d1
   80074:	000821e5 	.word	0x000821e5
   80078:	000821f9 	.word	0x000821f9
	...
   80084:	00080379 	.word	0x00080379
   80088:	0008234d 	.word	0x0008234d
   8008c:	0008234d 	.word	0x0008234d
   80090:	0008234d 	.word	0x0008234d
   80094:	0008234d 	.word	0x0008234d
   80098:	0008234d 	.word	0x0008234d
   8009c:	0008234d 	.word	0x0008234d
   800a0:	0008234d 	.word	0x0008234d
   800a4:	00000000 	.word	0x00000000
   800a8:	0008234d 	.word	0x0008234d
   800ac:	0008234d 	.word	0x0008234d
   800b0:	0008234d 	.word	0x0008234d
   800b4:	0008234d 	.word	0x0008234d
   800b8:	0008234d 	.word	0x0008234d
   800bc:	0008234d 	.word	0x0008234d
   800c0:	0008234d 	.word	0x0008234d
   800c4:	0008234d 	.word	0x0008234d
   800c8:	0008234d 	.word	0x0008234d
   800cc:	0008234d 	.word	0x0008234d
   800d0:	0008234d 	.word	0x0008234d
   800d4:	0008234d 	.word	0x0008234d
   800d8:	0008234d 	.word	0x0008234d
   800dc:	0008234d 	.word	0x0008234d
   800e0:	0008234d 	.word	0x0008234d
   800e4:	0008234d 	.word	0x0008234d
   800e8:	0008234d 	.word	0x0008234d
   800ec:	0008234d 	.word	0x0008234d
   800f0:	0008234d 	.word	0x0008234d

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007099c 	.word	0x2007099c
   80110:	00000000 	.word	0x00000000
   80114:	00085918 	.word	0x00085918

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00085918 	.word	0x00085918
   8013c:	200709a0 	.word	0x200709a0
   80140:	00085918 	.word	0x00085918
   80144:	00000000 	.word	0x00000000

00080148 <analogInit>:
#include <inttypes.h>
#include <asf.h>
#include "adcFunctions.h"

int analogInit(int pinNumber)
{
   80148:	b508      	push	{r3, lr}
	 *
	 * See code example http://asf.atmel.com/docs/latest/sam.drivers.adc.adc_example.arduino_due_x/html/sam_adc_quickstart.html
	 * It is assumed that the AD-converter is using 12 bits
	 */
	
	pmc_enable_periph_clk(ID_ADC);	/* power the clock for the ADC with pmc_enable_periph_clk(ID_ADC) */
   8014a:	2025      	movs	r0, #37	; 0x25
   8014c:	4b01      	ldr	r3, [pc, #4]	; (80154 <analogInit+0xc>)
   8014e:	4798      	blx	r3
	
	/* Write code here */
	
	return 0;	/* if everything is ok */
}
   80150:	2000      	movs	r0, #0
   80152:	bd08      	pop	{r3, pc}
   80154:	000822f5 	.word	0x000822f5

00080158 <analogRead>:
uint32_t analogRead(int pinNumber)
{
	/* Write code here */

	return 0;	/* Replace with actual value read from A/D input*/
   80158:	2000      	movs	r0, #0
   8015a:	4770      	bx	lr

0008015c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   8015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80160:	b083      	sub	sp, #12
   80162:	4605      	mov	r5, r0
	while (len) {
   80164:	4690      	mov	r8, r2
   80166:	2a00      	cmp	r2, #0
   80168:	d047      	beq.n	801fa <usart_serial_read_packet+0x9e>
   8016a:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8016c:	4f25      	ldr	r7, [pc, #148]	; (80204 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8016e:	4c26      	ldr	r4, [pc, #152]	; (80208 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80170:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8021c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80174:	f8df b094 	ldr.w	fp, [pc, #148]	; 8020c <usart_serial_read_packet+0xb0>
   80178:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   8017c:	2300      	movs	r3, #0
   8017e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80180:	4b22      	ldr	r3, [pc, #136]	; (8020c <usart_serial_read_packet+0xb0>)
   80182:	429d      	cmp	r5, r3
   80184:	d106      	bne.n	80194 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80186:	4658      	mov	r0, fp
   80188:	4649      	mov	r1, r9
   8018a:	4b21      	ldr	r3, [pc, #132]	; (80210 <usart_serial_read_packet+0xb4>)
   8018c:	4798      	blx	r3
   8018e:	2800      	cmp	r0, #0
   80190:	d1f9      	bne.n	80186 <usart_serial_read_packet+0x2a>
   80192:	e019      	b.n	801c8 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80194:	4b1f      	ldr	r3, [pc, #124]	; (80214 <usart_serial_read_packet+0xb8>)
   80196:	429d      	cmp	r5, r3
   80198:	d109      	bne.n	801ae <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8019a:	4699      	mov	r9, r3
   8019c:	4648      	mov	r0, r9
   8019e:	a901      	add	r1, sp, #4
   801a0:	47a0      	blx	r4
   801a2:	2800      	cmp	r0, #0
   801a4:	d1fa      	bne.n	8019c <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801a6:	9b01      	ldr	r3, [sp, #4]
   801a8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801ac:	e017      	b.n	801de <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801ae:	4b1a      	ldr	r3, [pc, #104]	; (80218 <usart_serial_read_packet+0xbc>)
   801b0:	429d      	cmp	r5, r3
   801b2:	d109      	bne.n	801c8 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   801b4:	4699      	mov	r9, r3
   801b6:	4648      	mov	r0, r9
   801b8:	a901      	add	r1, sp, #4
   801ba:	47a0      	blx	r4
   801bc:	2800      	cmp	r0, #0
   801be:	d1fa      	bne.n	801b6 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   801c0:	9b01      	ldr	r3, [sp, #4]
   801c2:	f806 3c01 	strb.w	r3, [r6, #-1]
   801c6:	e014      	b.n	801f2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c8:	4555      	cmp	r5, sl
   801ca:	d108      	bne.n	801de <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   801cc:	4650      	mov	r0, sl
   801ce:	a901      	add	r1, sp, #4
   801d0:	47a0      	blx	r4
   801d2:	2800      	cmp	r0, #0
   801d4:	d1fa      	bne.n	801cc <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   801d6:	9b01      	ldr	r3, [sp, #4]
   801d8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801dc:	e009      	b.n	801f2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801de:	42bd      	cmp	r5, r7
   801e0:	d107      	bne.n	801f2 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   801e2:	4638      	mov	r0, r7
   801e4:	a901      	add	r1, sp, #4
   801e6:	47a0      	blx	r4
   801e8:	2800      	cmp	r0, #0
   801ea:	d1fa      	bne.n	801e2 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   801ec:	9b01      	ldr	r3, [sp, #4]
   801ee:	f806 3c01 	strb.w	r3, [r6, #-1]
   801f2:	3601      	adds	r6, #1
   801f4:	f1b8 0801 	subs.w	r8, r8, #1
   801f8:	d1be      	bne.n	80178 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   801fa:	2000      	movs	r0, #0
   801fc:	b003      	add	sp, #12
   801fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80202:	bf00      	nop
   80204:	400a4000 	.word	0x400a4000
   80208:	00080361 	.word	0x00080361
   8020c:	400e0800 	.word	0x400e0800
   80210:	00080339 	.word	0x00080339
   80214:	40098000 	.word	0x40098000
   80218:	4009c000 	.word	0x4009c000
   8021c:	400a0000 	.word	0x400a0000

00080220 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80224:	460c      	mov	r4, r1
   80226:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80228:	b960      	cbnz	r0, 80244 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   8022a:	2a00      	cmp	r2, #0
   8022c:	dd0e      	ble.n	8024c <_read+0x2c>
   8022e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80230:	4e09      	ldr	r6, [pc, #36]	; (80258 <_read+0x38>)
   80232:	4d0a      	ldr	r5, [pc, #40]	; (8025c <_read+0x3c>)
   80234:	6830      	ldr	r0, [r6, #0]
   80236:	4621      	mov	r1, r4
   80238:	682b      	ldr	r3, [r5, #0]
   8023a:	4798      	blx	r3
		ptr++;
   8023c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8023e:	42bc      	cmp	r4, r7
   80240:	d1f8      	bne.n	80234 <_read+0x14>
   80242:	e006      	b.n	80252 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80244:	f04f 30ff 	mov.w	r0, #4294967295
   80248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   8024c:	2000      	movs	r0, #0
   8024e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   80252:	4640      	mov	r0, r8
	}
	return nChars;
}
   80254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80258:	20070b08 	.word	0x20070b08
   8025c:	20070b00 	.word	0x20070b00

00080260 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   80260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80264:	460e      	mov	r6, r1
   80266:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80268:	3801      	subs	r0, #1
   8026a:	2802      	cmp	r0, #2
   8026c:	d80f      	bhi.n	8028e <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8026e:	b192      	cbz	r2, 80296 <_write+0x36>
   80270:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80272:	f8df 803c 	ldr.w	r8, [pc, #60]	; 802b0 <_write+0x50>
   80276:	4f0d      	ldr	r7, [pc, #52]	; (802ac <_write+0x4c>)
   80278:	f8d8 0000 	ldr.w	r0, [r8]
   8027c:	5d31      	ldrb	r1, [r6, r4]
   8027e:	683b      	ldr	r3, [r7, #0]
   80280:	4798      	blx	r3
   80282:	2800      	cmp	r0, #0
   80284:	db0a      	blt.n	8029c <_write+0x3c>
			return -1;
		}
		++nChars;
   80286:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80288:	42a5      	cmp	r5, r4
   8028a:	d1f5      	bne.n	80278 <_write+0x18>
   8028c:	e00a      	b.n	802a4 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8028e:	f04f 30ff 	mov.w	r0, #4294967295
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80296:	2000      	movs	r0, #0
   80298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   8029c:	f04f 30ff 	mov.w	r0, #4294967295
   802a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   802a4:	4620      	mov	r0, r4
	}
	return nChars;
}
   802a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802aa:	bf00      	nop
   802ac:	20070b04 	.word	0x20070b04
   802b0:	20070b08 	.word	0x20070b08

000802b4 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   802b4:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   802b6:	0189      	lsls	r1, r1, #6
   802b8:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   802ba:	2402      	movs	r4, #2
   802bc:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   802be:	f04f 31ff 	mov.w	r1, #4294967295
   802c2:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   802c4:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   802c6:	605a      	str	r2, [r3, #4]
}
   802c8:	f85d 4b04 	ldr.w	r4, [sp], #4
   802cc:	4770      	bx	lr
   802ce:	bf00      	nop

000802d0 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   802d0:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   802d4:	4770      	bx	lr
   802d6:	bf00      	nop

000802d8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   802d8:	0189      	lsls	r1, r1, #6
   802da:	2305      	movs	r3, #5
   802dc:	5043      	str	r3, [r0, r1]
   802de:	4770      	bx	lr

000802e0 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   802e0:	0189      	lsls	r1, r1, #6
   802e2:	2302      	movs	r3, #2
   802e4:	5043      	str	r3, [r0, r1]
   802e6:	4770      	bx	lr

000802e8 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   802e8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   802ec:	6908      	ldr	r0, [r1, #16]
}
   802ee:	4770      	bx	lr

000802f0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802f0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802f2:	23ac      	movs	r3, #172	; 0xac
   802f4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802f6:	680a      	ldr	r2, [r1, #0]
   802f8:	684b      	ldr	r3, [r1, #4]
   802fa:	fbb2 f3f3 	udiv	r3, r2, r3
   802fe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80300:	1e5c      	subs	r4, r3, #1
   80302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80306:	4294      	cmp	r4, r2
   80308:	d80a      	bhi.n	80320 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8030a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8030c:	688b      	ldr	r3, [r1, #8]
   8030e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80310:	f240 2302 	movw	r3, #514	; 0x202
   80314:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80318:	2350      	movs	r3, #80	; 0x50
   8031a:	6003      	str	r3, [r0, #0]

	return 0;
   8031c:	2000      	movs	r0, #0
   8031e:	e000      	b.n	80322 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80320:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80322:	f85d 4b04 	ldr.w	r4, [sp], #4
   80326:	4770      	bx	lr

00080328 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80328:	6943      	ldr	r3, [r0, #20]
   8032a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8032e:	bf1a      	itte	ne
   80330:	61c1      	strne	r1, [r0, #28]
	return 0;
   80332:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80334:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80336:	4770      	bx	lr

00080338 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80338:	6943      	ldr	r3, [r0, #20]
   8033a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8033e:	bf1d      	ittte	ne
   80340:	6983      	ldrne	r3, [r0, #24]
   80342:	700b      	strbne	r3, [r1, #0]
	return 0;
   80344:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80346:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80348:	4770      	bx	lr
   8034a:	bf00      	nop

0008034c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8034c:	6943      	ldr	r3, [r0, #20]
   8034e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80352:	bf1d      	ittte	ne
   80354:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80358:	61c1      	strne	r1, [r0, #28]
	return 0;
   8035a:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   8035c:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8035e:	4770      	bx	lr

00080360 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80360:	6943      	ldr	r3, [r0, #20]
   80362:	f013 0f01 	tst.w	r3, #1
   80366:	d005      	beq.n	80374 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80368:	6983      	ldr	r3, [r0, #24]
   8036a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8036e:	600b      	str	r3, [r1, #0]

	return 0;
   80370:	2000      	movs	r0, #0
   80372:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80374:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80376:	4770      	bx	lr

00080378 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80378:	b500      	push	{lr}
   8037a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8037c:	4811      	ldr	r0, [pc, #68]	; (803c4 <USART0_Handler+0x4c>)
   8037e:	f10d 0107 	add.w	r1, sp, #7
   80382:	2201      	movs	r2, #1
   80384:	4b10      	ldr	r3, [pc, #64]	; (803c8 <USART0_Handler+0x50>)
   80386:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80388:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8038a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8038e:	2200      	movs	r2, #0
   80390:	4b0e      	ldr	r3, [pc, #56]	; (803cc <USART0_Handler+0x54>)
   80392:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80394:	4b0e      	ldr	r3, [pc, #56]	; (803d0 <USART0_Handler+0x58>)
   80396:	781b      	ldrb	r3, [r3, #0]
   80398:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8039c:	4a0d      	ldr	r2, [pc, #52]	; (803d4 <USART0_Handler+0x5c>)
   8039e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   803a0:	2b9b      	cmp	r3, #155	; 0x9b
   803a2:	d103      	bne.n	803ac <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   803a4:	2200      	movs	r2, #0
   803a6:	4b0a      	ldr	r3, [pc, #40]	; (803d0 <USART0_Handler+0x58>)
   803a8:	701a      	strb	r2, [r3, #0]
   803aa:	e002      	b.n	803b2 <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   803ac:	3301      	adds	r3, #1
   803ae:	4a08      	ldr	r2, [pc, #32]	; (803d0 <USART0_Handler+0x58>)
   803b0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   803b2:	2201      	movs	r2, #1
   803b4:	4b05      	ldr	r3, [pc, #20]	; (803cc <USART0_Handler+0x54>)
   803b6:	701a      	strb	r2, [r3, #0]
   803b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   803bc:	b662      	cpsie	i
}
   803be:	b003      	add	sp, #12
   803c0:	f85d fb04 	ldr.w	pc, [sp], #4
   803c4:	40098000 	.word	0x40098000
   803c8:	0008015d 	.word	0x0008015d
   803cc:	2007012c 	.word	0x2007012c
   803d0:	20070a54 	.word	0x20070a54
   803d4:	200709b8 	.word	0x200709b8

000803d8 <readLCDbutton>:
buttonType readLCDbutton(void)
{
	/* Write code here */

	return btnDOWN;	/* Change to actual value */
   803d8:	2002      	movs	r0, #2
   803da:	4770      	bx	lr

000803dc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   803dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   803de:	b083      	sub	sp, #12
   803e0:	4604      	mov	r4, r0
   803e2:	460d      	mov	r5, r1
	uint32_t val = 0;
   803e4:	2300      	movs	r3, #0
   803e6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   803e8:	4b1f      	ldr	r3, [pc, #124]	; (80468 <usart_serial_getchar+0x8c>)
   803ea:	4298      	cmp	r0, r3
   803ec:	d107      	bne.n	803fe <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   803ee:	461f      	mov	r7, r3
   803f0:	4e1e      	ldr	r6, [pc, #120]	; (8046c <usart_serial_getchar+0x90>)
   803f2:	4638      	mov	r0, r7
   803f4:	4629      	mov	r1, r5
   803f6:	47b0      	blx	r6
   803f8:	2800      	cmp	r0, #0
   803fa:	d1fa      	bne.n	803f2 <usart_serial_getchar+0x16>
   803fc:	e019      	b.n	80432 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   803fe:	4b1c      	ldr	r3, [pc, #112]	; (80470 <usart_serial_getchar+0x94>)
   80400:	4298      	cmp	r0, r3
   80402:	d109      	bne.n	80418 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   80404:	461f      	mov	r7, r3
   80406:	4e1b      	ldr	r6, [pc, #108]	; (80474 <usart_serial_getchar+0x98>)
   80408:	4638      	mov	r0, r7
   8040a:	a901      	add	r1, sp, #4
   8040c:	47b0      	blx	r6
   8040e:	2800      	cmp	r0, #0
   80410:	d1fa      	bne.n	80408 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   80412:	9b01      	ldr	r3, [sp, #4]
   80414:	702b      	strb	r3, [r5, #0]
   80416:	e019      	b.n	8044c <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80418:	4b17      	ldr	r3, [pc, #92]	; (80478 <usart_serial_getchar+0x9c>)
   8041a:	4298      	cmp	r0, r3
   8041c:	d109      	bne.n	80432 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   8041e:	461e      	mov	r6, r3
   80420:	4c14      	ldr	r4, [pc, #80]	; (80474 <usart_serial_getchar+0x98>)
   80422:	4630      	mov	r0, r6
   80424:	a901      	add	r1, sp, #4
   80426:	47a0      	blx	r4
   80428:	2800      	cmp	r0, #0
   8042a:	d1fa      	bne.n	80422 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   8042c:	9b01      	ldr	r3, [sp, #4]
   8042e:	702b      	strb	r3, [r5, #0]
   80430:	e018      	b.n	80464 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80432:	4b12      	ldr	r3, [pc, #72]	; (8047c <usart_serial_getchar+0xa0>)
   80434:	429c      	cmp	r4, r3
   80436:	d109      	bne.n	8044c <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80438:	461e      	mov	r6, r3
   8043a:	4c0e      	ldr	r4, [pc, #56]	; (80474 <usart_serial_getchar+0x98>)
   8043c:	4630      	mov	r0, r6
   8043e:	a901      	add	r1, sp, #4
   80440:	47a0      	blx	r4
   80442:	2800      	cmp	r0, #0
   80444:	d1fa      	bne.n	8043c <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   80446:	9b01      	ldr	r3, [sp, #4]
   80448:	702b      	strb	r3, [r5, #0]
   8044a:	e00b      	b.n	80464 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8044c:	4b0c      	ldr	r3, [pc, #48]	; (80480 <usart_serial_getchar+0xa4>)
   8044e:	429c      	cmp	r4, r3
   80450:	d108      	bne.n	80464 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   80452:	461e      	mov	r6, r3
   80454:	4c07      	ldr	r4, [pc, #28]	; (80474 <usart_serial_getchar+0x98>)
   80456:	4630      	mov	r0, r6
   80458:	a901      	add	r1, sp, #4
   8045a:	47a0      	blx	r4
   8045c:	2800      	cmp	r0, #0
   8045e:	d1fa      	bne.n	80456 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80460:	9b01      	ldr	r3, [sp, #4]
   80462:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80464:	b003      	add	sp, #12
   80466:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80468:	400e0800 	.word	0x400e0800
   8046c:	00080339 	.word	0x00080339
   80470:	40098000 	.word	0x40098000
   80474:	00080361 	.word	0x00080361
   80478:	4009c000 	.word	0x4009c000
   8047c:	400a0000 	.word	0x400a0000
   80480:	400a4000 	.word	0x400a4000

00080484 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   80484:	b570      	push	{r4, r5, r6, lr}
   80486:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   80488:	4b21      	ldr	r3, [pc, #132]	; (80510 <usart_serial_putchar+0x8c>)
   8048a:	4298      	cmp	r0, r3
   8048c:	d107      	bne.n	8049e <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   8048e:	461e      	mov	r6, r3
   80490:	4d20      	ldr	r5, [pc, #128]	; (80514 <usart_serial_putchar+0x90>)
   80492:	4630      	mov	r0, r6
   80494:	4621      	mov	r1, r4
   80496:	47a8      	blx	r5
   80498:	2800      	cmp	r0, #0
   8049a:	d1fa      	bne.n	80492 <usart_serial_putchar+0xe>
   8049c:	e02b      	b.n	804f6 <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8049e:	4b1e      	ldr	r3, [pc, #120]	; (80518 <usart_serial_putchar+0x94>)
   804a0:	4298      	cmp	r0, r3
   804a2:	d107      	bne.n	804b4 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   804a4:	461e      	mov	r6, r3
   804a6:	4d1d      	ldr	r5, [pc, #116]	; (8051c <usart_serial_putchar+0x98>)
   804a8:	4630      	mov	r0, r6
   804aa:	4621      	mov	r1, r4
   804ac:	47a8      	blx	r5
   804ae:	2800      	cmp	r0, #0
   804b0:	d1fa      	bne.n	804a8 <usart_serial_putchar+0x24>
   804b2:	e022      	b.n	804fa <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   804b4:	4b1a      	ldr	r3, [pc, #104]	; (80520 <usart_serial_putchar+0x9c>)
   804b6:	4298      	cmp	r0, r3
   804b8:	d107      	bne.n	804ca <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   804ba:	461e      	mov	r6, r3
   804bc:	4d17      	ldr	r5, [pc, #92]	; (8051c <usart_serial_putchar+0x98>)
   804be:	4630      	mov	r0, r6
   804c0:	4621      	mov	r1, r4
   804c2:	47a8      	blx	r5
   804c4:	2800      	cmp	r0, #0
   804c6:	d1fa      	bne.n	804be <usart_serial_putchar+0x3a>
   804c8:	e019      	b.n	804fe <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   804ca:	4b16      	ldr	r3, [pc, #88]	; (80524 <usart_serial_putchar+0xa0>)
   804cc:	4298      	cmp	r0, r3
   804ce:	d107      	bne.n	804e0 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   804d0:	461e      	mov	r6, r3
   804d2:	4d12      	ldr	r5, [pc, #72]	; (8051c <usart_serial_putchar+0x98>)
   804d4:	4630      	mov	r0, r6
   804d6:	4621      	mov	r1, r4
   804d8:	47a8      	blx	r5
   804da:	2800      	cmp	r0, #0
   804dc:	d1fa      	bne.n	804d4 <usart_serial_putchar+0x50>
   804de:	e010      	b.n	80502 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   804e0:	4b11      	ldr	r3, [pc, #68]	; (80528 <usart_serial_putchar+0xa4>)
   804e2:	4298      	cmp	r0, r3
   804e4:	d10f      	bne.n	80506 <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   804e6:	461e      	mov	r6, r3
   804e8:	4d0c      	ldr	r5, [pc, #48]	; (8051c <usart_serial_putchar+0x98>)
   804ea:	4630      	mov	r0, r6
   804ec:	4621      	mov	r1, r4
   804ee:	47a8      	blx	r5
   804f0:	2800      	cmp	r0, #0
   804f2:	d1fa      	bne.n	804ea <usart_serial_putchar+0x66>
   804f4:	e009      	b.n	8050a <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   804f6:	2001      	movs	r0, #1
   804f8:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   804fa:	2001      	movs	r0, #1
   804fc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   804fe:	2001      	movs	r0, #1
   80500:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80502:	2001      	movs	r0, #1
   80504:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   80506:	2000      	movs	r0, #0
   80508:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8050a:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   8050c:	bd70      	pop	{r4, r5, r6, pc}
   8050e:	bf00      	nop
   80510:	400e0800 	.word	0x400e0800
   80514:	00080329 	.word	0x00080329
   80518:	40098000 	.word	0x40098000
   8051c:	0008034d 	.word	0x0008034d
   80520:	4009c000 	.word	0x4009c000
   80524:	400a0000 	.word	0x400a0000
   80528:	400a4000 	.word	0x400a4000

0008052c <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   8052c:	b530      	push	{r4, r5, lr}
   8052e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80530:	2008      	movs	r0, #8
   80532:	4d15      	ldr	r5, [pc, #84]	; (80588 <configureConsole+0x5c>)
   80534:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80536:	4c15      	ldr	r4, [pc, #84]	; (8058c <configureConsole+0x60>)
   80538:	4b15      	ldr	r3, [pc, #84]	; (80590 <configureConsole+0x64>)
   8053a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8053c:	4a15      	ldr	r2, [pc, #84]	; (80594 <configureConsole+0x68>)
   8053e:	4b16      	ldr	r3, [pc, #88]	; (80598 <configureConsole+0x6c>)
   80540:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80542:	4a16      	ldr	r2, [pc, #88]	; (8059c <configureConsole+0x70>)
   80544:	4b16      	ldr	r3, [pc, #88]	; (805a0 <configureConsole+0x74>)
   80546:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80548:	4b16      	ldr	r3, [pc, #88]	; (805a4 <configureConsole+0x78>)
   8054a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8054c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80550:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80552:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80556:	9303      	str	r3, [sp, #12]
   80558:	2008      	movs	r0, #8
   8055a:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8055c:	4620      	mov	r0, r4
   8055e:	a901      	add	r1, sp, #4
   80560:	4b11      	ldr	r3, [pc, #68]	; (805a8 <configureConsole+0x7c>)
   80562:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80564:	4d11      	ldr	r5, [pc, #68]	; (805ac <configureConsole+0x80>)
   80566:	682b      	ldr	r3, [r5, #0]
   80568:	6898      	ldr	r0, [r3, #8]
   8056a:	2100      	movs	r1, #0
   8056c:	4c10      	ldr	r4, [pc, #64]	; (805b0 <configureConsole+0x84>)
   8056e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80570:	682b      	ldr	r3, [r5, #0]
   80572:	6858      	ldr	r0, [r3, #4]
   80574:	2100      	movs	r1, #0
   80576:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80578:	480e      	ldr	r0, [pc, #56]	; (805b4 <configureConsole+0x88>)
   8057a:	4c0f      	ldr	r4, [pc, #60]	; (805b8 <configureConsole+0x8c>)
   8057c:	47a0      	blx	r4
	printf("=============\n");
   8057e:	480f      	ldr	r0, [pc, #60]	; (805bc <configureConsole+0x90>)
   80580:	47a0      	blx	r4
   80582:	b005      	add	sp, #20
   80584:	bd30      	pop	{r4, r5, pc}
   80586:	bf00      	nop
   80588:	000822f5 	.word	0x000822f5
   8058c:	400e0800 	.word	0x400e0800
   80590:	20070b08 	.word	0x20070b08
   80594:	00080485 	.word	0x00080485
   80598:	20070b04 	.word	0x20070b04
   8059c:	000803dd 	.word	0x000803dd
   805a0:	20070b00 	.word	0x20070b00
   805a4:	0501bd00 	.word	0x0501bd00
   805a8:	000802f1 	.word	0x000802f1
   805ac:	20070560 	.word	0x20070560
   805b0:	00082679 	.word	0x00082679
   805b4:	0008551c 	.word	0x0008551c
   805b8:	000825bd 	.word	0x000825bd
   805bc:	0008552c 	.word	0x0008552c

000805c0 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   805c0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   805c2:	201b      	movs	r0, #27
   805c4:	4b08      	ldr	r3, [pc, #32]	; (805e8 <delayInit+0x28>)
   805c6:	4798      	blx	r3
	tc_init(TC0,0,0);				/* TC0, channel 0, TCLK1 och capturemode */
   805c8:	4c08      	ldr	r4, [pc, #32]	; (805ec <delayInit+0x2c>)
   805ca:	4620      	mov	r0, r4
   805cc:	2100      	movs	r1, #0
   805ce:	460a      	mov	r2, r1
   805d0:	4b07      	ldr	r3, [pc, #28]	; (805f0 <delayInit+0x30>)
   805d2:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   805d4:	4620      	mov	r0, r4
   805d6:	2100      	movs	r1, #0
   805d8:	4b06      	ldr	r3, [pc, #24]	; (805f4 <delayInit+0x34>)
   805da:	4798      	blx	r3
	tc_stop(TC0,0);					/* making sure the timer does not run  */
   805dc:	4620      	mov	r0, r4
   805de:	2100      	movs	r1, #0
   805e0:	4b05      	ldr	r3, [pc, #20]	; (805f8 <delayInit+0x38>)
   805e2:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   805e4:	2000      	movs	r0, #0
   805e6:	bd10      	pop	{r4, pc}
   805e8:	000822f5 	.word	0x000822f5
   805ec:	40080000 	.word	0x40080000
   805f0:	000802b5 	.word	0x000802b5
   805f4:	000802d1 	.word	0x000802d1
   805f8:	000802e1 	.word	0x000802e1

000805fc <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   805fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805fe:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80600:	4809      	ldr	r0, [pc, #36]	; (80628 <delayMicroseconds+0x2c>)
   80602:	2100      	movs	r1, #0
   80604:	4b09      	ldr	r3, [pc, #36]	; (8062c <delayMicroseconds+0x30>)
   80606:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   80608:	272a      	movs	r7, #42	; 0x2a
   8060a:	fb07 f704 	mul.w	r7, r7, r4
   8060e:	4e06      	ldr	r6, [pc, #24]	; (80628 <delayMicroseconds+0x2c>)
   80610:	2500      	movs	r5, #0
   80612:	4c07      	ldr	r4, [pc, #28]	; (80630 <delayMicroseconds+0x34>)
   80614:	4630      	mov	r0, r6
   80616:	4629      	mov	r1, r5
   80618:	47a0      	blx	r4
   8061a:	42b8      	cmp	r0, r7
   8061c:	d3fa      	bcc.n	80614 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   8061e:	4802      	ldr	r0, [pc, #8]	; (80628 <delayMicroseconds+0x2c>)
   80620:	2100      	movs	r1, #0
   80622:	4b04      	ldr	r3, [pc, #16]	; (80634 <delayMicroseconds+0x38>)
   80624:	4798      	blx	r3
   80626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80628:	40080000 	.word	0x40080000
   8062c:	000802d9 	.word	0x000802d9
   80630:	000802e9 	.word	0x000802e9
   80634:	000802e1 	.word	0x000802e1

00080638 <lcdWrite4DigitNumber>:
int lcdWrite4DigitNumber(int number)
{
	/* Write code here */
	
	return 0;	/* Assuming everything went ok */
}
   80638:	2000      	movs	r0, #0
   8063a:	4770      	bx	lr

0008063c <lcdWriteAsciiString>:
/* writes an ascii string up to 40 characters on the LCD display */
{
	/* Write code here */
	
	return 0;	/* Assuming everything went ok */
}
   8063c:	2000      	movs	r0, #0
   8063e:	4770      	bx	lr

00080640 <lcdWriteButtonValue>:
 * if no buttons is pushed you can chose on displaying nothing or NONE  */
{
	/* Write code here */
	
	return 0;	/* Assuming everything went ok */
   80640:	2000      	movs	r0, #0
   80642:	4770      	bx	lr

00080644 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   80644:	b5f0      	push	{r4, r5, r6, r7, lr}
   80646:	b085      	sub	sp, #20
   80648:	4607      	mov	r7, r0
   8064a:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   8064c:	4b1e      	ldr	r3, [pc, #120]	; (806c8 <lcdWrite+0x84>)
   8064e:	466c      	mov	r4, sp
   80650:	6818      	ldr	r0, [r3, #0]
   80652:	6859      	ldr	r1, [r3, #4]
   80654:	689a      	ldr	r2, [r3, #8]
   80656:	68db      	ldr	r3, [r3, #12]
   80658:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   8065a:	eb04 1317 	add.w	r3, r4, r7, lsr #4
	byte32 = (uint32_t)byte << 23;
   8065e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   80662:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80664:	b125      	cbz	r5, 80670 <lcdWrite+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80666:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8066a:	4a18      	ldr	r2, [pc, #96]	; (806cc <lcdWrite+0x88>)
   8066c:	6311      	str	r1, [r2, #48]	; 0x30
   8066e:	e003      	b.n	80678 <lcdWrite+0x34>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80670:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80674:	4a15      	ldr	r2, [pc, #84]	; (806cc <lcdWrite+0x88>)
   80676:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80678:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   8067c:	4c13      	ldr	r4, [pc, #76]	; (806cc <lcdWrite+0x88>)
   8067e:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80680:	43db      	mvns	r3, r3
   80682:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   80686:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80688:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   8068c:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   8068e:	2001      	movs	r0, #1
   80690:	4d0f      	ldr	r5, [pc, #60]	; (806d0 <lcdWrite+0x8c>)
   80692:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80694:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(100);
   80696:	2064      	movs	r0, #100	; 0x64
   80698:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   8069a:	f007 070f 	and.w	r7, r7, #15
   8069e:	ab04      	add	r3, sp, #16
   806a0:	441f      	add	r7, r3
	byte32 = (uint32_t)byte<<23;
   806a2:	f817 3c10 	ldrb.w	r3, [r7, #-16]
   806a6:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   806a8:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   806ac:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   806ae:	43db      	mvns	r3, r3
   806b0:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   806b4:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806b6:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   806b8:	2001      	movs	r0, #1
   806ba:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806bc:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   806be:	2064      	movs	r0, #100	; 0x64
   806c0:	47a8      	blx	r5
	
	return 0;
}
   806c2:	2000      	movs	r0, #0
   806c4:	b005      	add	sp, #20
   806c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806c8:	0008553c 	.word	0x0008553c
   806cc:	400e1200 	.word	0x400e1200
   806d0:	000805fd 	.word	0x000805fd

000806d4 <lcdInit>:
#include "lcdFunctions.h"
#include "delayFunctions.h"	/* The sam3x8e microcontroller can write faster than the LCD controller can handle its inputs */
#include "buttons.h"

int lcdInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   806d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806d8:	4c34      	ldr	r4, [pc, #208]	; (807ac <lcdInit+0xd8>)
   806da:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   806de:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806e0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806e4:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   806e8:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806ea:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   806ee:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   806f2:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   806f4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806f8:	6365      	str	r5, [r4, #52]	; 0x34
	/* At power on */
	ioport_set_pin_dir(LCD_RS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(30000);		/* wait > 15 ms */
   806fa:	f247 5030 	movw	r0, #30000	; 0x7530
   806fe:	4e2c      	ldr	r6, [pc, #176]	; (807b0 <lcdInit+0xdc>)
   80700:	47b0      	blx	r6
   80702:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80704:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80708:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   8070c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80710:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80714:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80718:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8071c:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80720:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80722:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);		/* wait 1 us */
   80724:	2001      	movs	r0, #1
   80726:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80728:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(4100);	/* wait for more than 4,1 ms */
   8072a:	f241 0004 	movw	r0, #4100	; 0x1004
   8072e:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80730:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80734:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80738:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   8073c:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8073e:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* delay 1 us */
   80740:	2001      	movs	r0, #1
   80742:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80744:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);	/* wait 100 us */
   80746:	2064      	movs	r0, #100	; 0x64
   80748:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8074a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   8074e:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80752:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80756:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80758:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* wait 1 us */
   8075a:	2001      	movs	r0, #1
   8075c:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8075e:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);		
	delayMicroseconds(100);	/* wait 100 us */
   80760:	2064      	movs	r0, #100	; 0x64
   80762:	47b0      	blx	r6
   80764:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80768:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8076c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80770:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80772:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80774:	2001      	movs	r0, #1
   80776:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80778:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   8077a:	2064      	movs	r0, #100	; 0x64
   8077c:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   8077e:	2028      	movs	r0, #40	; 0x28
   80780:	2100      	movs	r1, #0
   80782:	4c0c      	ldr	r4, [pc, #48]	; (807b4 <lcdInit+0xe0>)
   80784:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   80786:	2008      	movs	r0, #8
   80788:	2100      	movs	r1, #0
   8078a:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   8078c:	2001      	movs	r0, #1
   8078e:	2100      	movs	r1, #0
   80790:	47a0      	blx	r4
	delayMicroseconds(3000);
   80792:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80796:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   80798:	2006      	movs	r0, #6
   8079a:	2100      	movs	r1, #0
   8079c:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   8079e:	200f      	movs	r0, #15
   807a0:	2100      	movs	r1, #0
   807a2:	47a0      	blx	r4

	all_ok = 0;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   807a4:	2000      	movs	r0, #0
   807a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   807aa:	bf00      	nop
   807ac:	400e1200 	.word	0x400e1200
   807b0:	000805fd 	.word	0x000805fd
   807b4:	00080645 	.word	0x00080645

000807b8 <lcdClearDisplay>:
int lcdClearDisplay(void)
{
	/* Write code here */
	
	return 0;
}
   807b8:	2000      	movs	r0, #0
   807ba:	4770      	bx	lr

000807bc <main>:
void setUp(void);
void tearDown(void);
void resetTest(void);

int main(void)
{
   807bc:	b570      	push	{r4, r5, r6, lr}
	sysclk_init();	/* Insert system clock initialization code here (sysclk_init()). */
   807be:	4b23      	ldr	r3, [pc, #140]	; (8084c <main+0x90>)
   807c0:	4798      	blx	r3
	board_init();
   807c2:	4b23      	ldr	r3, [pc, #140]	; (80850 <main+0x94>)
   807c4:	4798      	blx	r3

	configureConsole();	/* Initialize the console UART used from within Atmel Studio*/
   807c6:	4b23      	ldr	r3, [pc, #140]	; (80854 <main+0x98>)
   807c8:	4798      	blx	r3
	
	/* From here on the program uses the Unity testing framework */
	UnityBegin("../test/test_delayFunctions.c");	/* Run the tests for the delay from the test-file */
   807ca:	4823      	ldr	r0, [pc, #140]	; (80858 <main+0x9c>)
   807cc:	4e23      	ldr	r6, [pc, #140]	; (8085c <main+0xa0>)
   807ce:	47b0      	blx	r6
	RUN_TEST(test_delayTimerIsInitialisedProperly, 12);
   807d0:	4823      	ldr	r0, [pc, #140]	; (80860 <main+0xa4>)
   807d2:	4924      	ldr	r1, [pc, #144]	; (80864 <main+0xa8>)
   807d4:	220c      	movs	r2, #12
   807d6:	4c24      	ldr	r4, [pc, #144]	; (80868 <main+0xac>)
   807d8:	47a0      	blx	r4
	RUN_TEST(test_delayCountsProperly, 14);
   807da:	4824      	ldr	r0, [pc, #144]	; (8086c <main+0xb0>)
   807dc:	4924      	ldr	r1, [pc, #144]	; (80870 <main+0xb4>)
   807de:	220e      	movs	r2, #14
   807e0:	47a0      	blx	r4
	UnityEnd();
   807e2:	4d24      	ldr	r5, [pc, #144]	; (80874 <main+0xb8>)
   807e4:	47a8      	blx	r5
	
	UnityBegin("../test/test_lcdFunctions.c");	/* Run the tests for the LCD from the test-file */
   807e6:	4824      	ldr	r0, [pc, #144]	; (80878 <main+0xbc>)
   807e8:	47b0      	blx	r6
	RUN_TEST(test_initialisatinOfTheLCD, 20);
   807ea:	4824      	ldr	r0, [pc, #144]	; (8087c <main+0xc0>)
   807ec:	4924      	ldr	r1, [pc, #144]	; (80880 <main+0xc4>)
   807ee:	2214      	movs	r2, #20
   807f0:	47a0      	blx	r4
	RUN_TEST(test_writingCharactersToTheLCD, 22);
   807f2:	4824      	ldr	r0, [pc, #144]	; (80884 <main+0xc8>)
   807f4:	4924      	ldr	r1, [pc, #144]	; (80888 <main+0xcc>)
   807f6:	2216      	movs	r2, #22
   807f8:	47a0      	blx	r4
	//delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
	RUN_TEST(test_clearingTheLCDDisplay, 23);
   807fa:	4824      	ldr	r0, [pc, #144]	; (8088c <main+0xd0>)
   807fc:	4924      	ldr	r1, [pc, #144]	; (80890 <main+0xd4>)
   807fe:	2217      	movs	r2, #23
   80800:	47a0      	blx	r4
	UnityEnd();
   80802:	47a8      	blx	r5
	
	UnityBegin("../test/test_adcFunctions.c");	/* Run the tests for the ADC from the test-file */
   80804:	4823      	ldr	r0, [pc, #140]	; (80894 <main+0xd8>)
   80806:	47b0      	blx	r6
	RUN_TEST(test_ADConverterInitialisesProperly, 30);
   80808:	4823      	ldr	r0, [pc, #140]	; (80898 <main+0xdc>)
   8080a:	4924      	ldr	r1, [pc, #144]	; (8089c <main+0xe0>)
   8080c:	221e      	movs	r2, #30
   8080e:	47a0      	blx	r4
	RUN_TEST(test_ADConverterReadsValueWithNoButtonPressed, 35);
   80810:	4823      	ldr	r0, [pc, #140]	; (808a0 <main+0xe4>)
   80812:	4924      	ldr	r1, [pc, #144]	; (808a4 <main+0xe8>)
   80814:	2223      	movs	r2, #35	; 0x23
   80816:	47a0      	blx	r4
	UnityEnd();
   80818:	47a8      	blx	r5

	UnityBegin("../test/test_buttons.c");	/* Run the tests for the buttons from the test-file */
   8081a:	4823      	ldr	r0, [pc, #140]	; (808a8 <main+0xec>)
   8081c:	47b0      	blx	r6
	RUN_TEST(test_noButtonIsPressed, 40);
   8081e:	4823      	ldr	r0, [pc, #140]	; (808ac <main+0xf0>)
   80820:	4923      	ldr	r1, [pc, #140]	; (808b0 <main+0xf4>)
   80822:	2228      	movs	r2, #40	; 0x28
   80824:	47a0      	blx	r4
	UnityEnd();
   80826:	47a8      	blx	r5
		
	UnityBegin("../test/test_lcdApplication.c");	/* Run the tests for displaying a button on the LCD from the test-file */
   80828:	4822      	ldr	r0, [pc, #136]	; (808b4 <main+0xf8>)
   8082a:	47b0      	blx	r6
	RUN_TEST(test_writing4DigitNumberOnTheLCDDisplay, 50);
   8082c:	4822      	ldr	r0, [pc, #136]	; (808b8 <main+0xfc>)
   8082e:	4923      	ldr	r1, [pc, #140]	; (808bc <main+0x100>)
   80830:	2232      	movs	r2, #50	; 0x32
   80832:	47a0      	blx	r4
	//delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
	RUN_TEST(test_writingAsciiStringOnTheLCDDisplay, 52);
   80834:	4822      	ldr	r0, [pc, #136]	; (808c0 <main+0x104>)
   80836:	4923      	ldr	r1, [pc, #140]	; (808c4 <main+0x108>)
   80838:	2234      	movs	r2, #52	; 0x34
   8083a:	47a0      	blx	r4
	//delayMicroseconds(1000000);	/* These delays are necessary if you want to see the text on the display before it disappears */
	RUN_TEST(test_writingButtonOnTheLCDDisplay, 54);
   8083c:	4822      	ldr	r0, [pc, #136]	; (808c8 <main+0x10c>)
   8083e:	4923      	ldr	r1, [pc, #140]	; (808cc <main+0x110>)
   80840:	2236      	movs	r2, #54	; 0x36
   80842:	47a0      	blx	r4
	UnityEnd();
   80844:	47a8      	blx	r5
		//lcdWriteButtonValue(readLCDbutton());
		//delayMicroseconds(500000);
	//}
	
	return 0;
}
   80846:	2000      	movs	r0, #0
   80848:	bd70      	pop	{r4, r5, r6, pc}
   8084a:	bf00      	nop
   8084c:	00081e79 	.word	0x00081e79
   80850:	00081edd 	.word	0x00081edd
   80854:	0008052d 	.word	0x0008052d
   80858:	0008554c 	.word	0x0008554c
   8085c:	00081c95 	.word	0x00081c95
   80860:	00080971 	.word	0x00080971
   80864:	0008556c 	.word	0x0008556c
   80868:	00081c3d 	.word	0x00081c3d
   8086c:	0008099d 	.word	0x0008099d
   80870:	00085594 	.word	0x00085594
   80874:	00081cb1 	.word	0x00081cb1
   80878:	000855b0 	.word	0x000855b0
   8087c:	00080b6d 	.word	0x00080b6d
   80880:	000855cc 	.word	0x000855cc
   80884:	00080bcd 	.word	0x00080bcd
   80888:	000855e8 	.word	0x000855e8
   8088c:	00080f61 	.word	0x00080f61
   80890:	00085608 	.word	0x00085608
   80894:	00085624 	.word	0x00085624
   80898:	000808d9 	.word	0x000808d9
   8089c:	00085640 	.word	0x00085640
   808a0:	00080925 	.word	0x00080925
   808a4:	00085664 	.word	0x00085664
   808a8:	00085694 	.word	0x00085694
   808ac:	00080951 	.word	0x00080951
   808b0:	000856ac 	.word	0x000856ac
   808b4:	000856c4 	.word	0x000856c4
   808b8:	00080a19 	.word	0x00080a19
   808bc:	000856e4 	.word	0x000856e4
   808c0:	00080a89 	.word	0x00080a89
   808c4:	0008570c 	.word	0x0008570c
   808c8:	00080afd 	.word	0x00080afd
   808cc:	00085734 	.word	0x00085734

000808d0 <setUp>:

void setUp(void)
{
   808d0:	4770      	bx	lr
   808d2:	bf00      	nop

000808d4 <tearDown>:
	/* Do nothing */
}

void tearDown(void)
{
   808d4:	4770      	bx	lr
   808d6:	bf00      	nop

000808d8 <test_ADConverterInitialisesProperly>:
uint32_t *const p_ADC_CHSR = (uint32_t *) (ADC_BASE_ADDRESS + 0x18U);
uint32_t *const p_PMC_PCSR1 = (uint32_t *) 0x400E0708U;


void test_ADConverterInitialisesProperly(void)
{
   808d8:	b510      	push	{r4, lr}
   808da:	b082      	sub	sp, #8
	analogInit(0);	/* Analog In 0 */
   808dc:	2000      	movs	r0, #0
   808de:	4b0b      	ldr	r3, [pc, #44]	; (8090c <test_ADConverterInitialisesProperly+0x34>)
   808e0:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH_MESSAGE(5, *p_PMC_PCSR1, "PMC has not enabled the peripheral ADC clock");	/* Asserting the PMC manager has activated the ADC clock */
   808e2:	4b0b      	ldr	r3, [pc, #44]	; (80910 <test_ADConverterInitialisesProperly+0x38>)
   808e4:	681a      	ldr	r2, [r3, #0]
   808e6:	2315      	movs	r3, #21
   808e8:	9300      	str	r3, [sp, #0]
   808ea:	2020      	movs	r0, #32
   808ec:	f04f 31ff 	mov.w	r1, #4294967295
   808f0:	4b08      	ldr	r3, [pc, #32]	; (80914 <test_ADConverterInitialisesProperly+0x3c>)
   808f2:	4c09      	ldr	r4, [pc, #36]	; (80918 <test_ADConverterInitialisesProperly+0x40>)
   808f4:	47a0      	blx	r4
	TEST_ASSERT_BIT_HIGH_MESSAGE(7, *p_ADC_CHSR, "ADC channel 7 is not enabled");	/* Asserting that ADC channel 7 is enabled */
   808f6:	4b09      	ldr	r3, [pc, #36]	; (8091c <test_ADConverterInitialisesProperly+0x44>)
   808f8:	681a      	ldr	r2, [r3, #0]
   808fa:	2316      	movs	r3, #22
   808fc:	9300      	str	r3, [sp, #0]
   808fe:	2080      	movs	r0, #128	; 0x80
   80900:	f04f 31ff 	mov.w	r1, #4294967295
   80904:	4b06      	ldr	r3, [pc, #24]	; (80920 <test_ADConverterInitialisesProperly+0x48>)
   80906:	47a0      	blx	r4
}
   80908:	b002      	add	sp, #8
   8090a:	bd10      	pop	{r4, pc}
   8090c:	00080149 	.word	0x00080149
   80910:	400e0708 	.word	0x400e0708
   80914:	00085758 	.word	0x00085758
   80918:	000819ed 	.word	0x000819ed
   8091c:	400c0018 	.word	0x400c0018
   80920:	00085788 	.word	0x00085788

00080924 <test_ADConverterReadsValueWithNoButtonPressed>:

void test_ADConverterReadsValueWithNoButtonPressed(void)
{
   80924:	b510      	push	{r4, lr}
   80926:	b082      	sub	sp, #8
	TEST_ASSERT_UINT32_WITHIN(100, 3200, analogRead(0));
   80928:	2000      	movs	r0, #0
   8092a:	4b07      	ldr	r3, [pc, #28]	; (80948 <test_ADConverterReadsValueWithNoButtonPressed+0x24>)
   8092c:	4798      	blx	r3
   8092e:	4602      	mov	r2, r0
   80930:	231b      	movs	r3, #27
   80932:	9300      	str	r3, [sp, #0]
   80934:	2324      	movs	r3, #36	; 0x24
   80936:	9301      	str	r3, [sp, #4]
   80938:	2064      	movs	r0, #100	; 0x64
   8093a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
   8093e:	2300      	movs	r3, #0
   80940:	4c02      	ldr	r4, [pc, #8]	; (8094c <test_ADConverterReadsValueWithNoButtonPressed+0x28>)
   80942:	47a0      	blx	r4
   80944:	b002      	add	sp, #8
   80946:	bd10      	pop	{r4, pc}
   80948:	00080159 	.word	0x00080159
   8094c:	00081a65 	.word	0x00081a65

00080950 <test_noButtonIsPressed>:
#include "../unity/unity.h"
#include "../src/buttons.h"
#include "test_buttons.h"

void test_noButtonIsPressed(void)
{
   80950:	b508      	push	{r3, lr}
	TEST_ASSERT_TRUE(readLCDbutton() == btnNONE);
   80952:	4b04      	ldr	r3, [pc, #16]	; (80964 <test_noButtonIsPressed+0x14>)
   80954:	4798      	blx	r3
   80956:	2805      	cmp	r0, #5
   80958:	d003      	beq.n	80962 <test_noButtonIsPressed+0x12>
   8095a:	4803      	ldr	r0, [pc, #12]	; (80968 <test_noButtonIsPressed+0x18>)
   8095c:	2110      	movs	r1, #16
   8095e:	4b03      	ldr	r3, [pc, #12]	; (8096c <test_noButtonIsPressed+0x1c>)
   80960:	4798      	blx	r3
   80962:	bd08      	pop	{r3, pc}
   80964:	000803d9 	.word	0x000803d9
   80968:	000857a8 	.word	0x000857a8
   8096c:	00081b31 	.word	0x00081b31

00080970 <test_delayTimerIsInitialisedProperly>:
uint32_t *const p_TC0_CMR0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x04U);	/* defines the address for channel mode of the TC0 status register for timer channel 0  */
uint32_t *const p_TC0_CV0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x10U);	/* defines the address for runnning counter value of the TC0 status register for timer channel 0  */
uint32_t *const p_TC0_SR0 = (uint32_t *) (TC0_BASE_ADDRESS + 0x00U+0*0x40U+0x20U);	/* defines the address for status the TC0 status register for timer channel 0  */

void test_delayTimerIsInitialisedProperly(void)
{
   80970:	b510      	push	{r4, lr}
   80972:	b082      	sub	sp, #8
	delayInit();
   80974:	4b06      	ldr	r3, [pc, #24]	; (80990 <test_delayTimerIsInitialisedProperly+0x20>)
   80976:	4798      	blx	r3
	TEST_ASSERT_BITS(0x0111, 0x00U, *p_TC0_CMR0);	/* Check that the proper timer and channel is enabled */
   80978:	4b06      	ldr	r3, [pc, #24]	; (80994 <test_delayTimerIsInitialisedProperly+0x24>)
   8097a:	681a      	ldr	r2, [r3, #0]
   8097c:	2318      	movs	r3, #24
   8097e:	9300      	str	r3, [sp, #0]
   80980:	f240 1011 	movw	r0, #273	; 0x111
   80984:	2100      	movs	r1, #0
   80986:	460b      	mov	r3, r1
   80988:	4c03      	ldr	r4, [pc, #12]	; (80998 <test_delayTimerIsInitialisedProperly+0x28>)
   8098a:	47a0      	blx	r4
}
   8098c:	b002      	add	sp, #8
   8098e:	bd10      	pop	{r4, pc}
   80990:	000805c1 	.word	0x000805c1
   80994:	40080004 	.word	0x40080004
   80998:	000819ed 	.word	0x000819ed

0008099c <test_delayCountsProperly>:

void test_delayCountsProperly(void)
{
   8099c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   809a0:	b083      	sub	sp, #12
	/* Note that it is difficult to write good automated tests for the timer counter */
	//delayInit();	/* Checked in the previous test */
	
	delayMicroseconds(1);
   809a2:	2001      	movs	r0, #1
   809a4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 80a10 <test_delayCountsProperly+0x74>
   809a8:	47c8      	blx	r9
	/* when the timer has stopped check that the counter has the right value 
	 * the timer resets when it starts, not when it stops */
	TEST_ASSERT_BIT_LOW(16, *p_TC0_SR0);				/* Check that the timer clock is stopped, unfortuantely we can't test that it is running */
   809aa:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80a14 <test_delayCountsProperly+0x78>
   809ae:	f8d8 2000 	ldr.w	r2, [r8]
   809b2:	2323      	movs	r3, #35	; 0x23
   809b4:	9300      	str	r3, [sp, #0]
   809b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   809ba:	2100      	movs	r1, #0
   809bc:	460b      	mov	r3, r1
   809be:	4f11      	ldr	r7, [pc, #68]	; (80a04 <test_delayCountsProperly+0x68>)
   809c0:	47b8      	blx	r7
	TEST_ASSERT_UINT32_WITHIN(40U, 42U, *p_TC0_CV0);	/* It takes appr. 20 clock cycles to read and compare the value */
   809c2:	4e11      	ldr	r6, [pc, #68]	; (80a08 <test_delayCountsProperly+0x6c>)
   809c4:	6832      	ldr	r2, [r6, #0]
   809c6:	2424      	movs	r4, #36	; 0x24
   809c8:	9400      	str	r4, [sp, #0]
   809ca:	9401      	str	r4, [sp, #4]
   809cc:	2028      	movs	r0, #40	; 0x28
   809ce:	212a      	movs	r1, #42	; 0x2a
   809d0:	2300      	movs	r3, #0
   809d2:	4d0e      	ldr	r5, [pc, #56]	; (80a0c <test_delayCountsProperly+0x70>)
   809d4:	47a8      	blx	r5
		
	delayMicroseconds(200);
   809d6:	20c8      	movs	r0, #200	; 0xc8
   809d8:	47c8      	blx	r9
	TEST_ASSERT_BIT_LOW(16, *p_TC0_SR0);				/* Check that the timer clock is stopped */
   809da:	f8d8 2000 	ldr.w	r2, [r8]
   809de:	2327      	movs	r3, #39	; 0x27
   809e0:	9300      	str	r3, [sp, #0]
   809e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   809e6:	2100      	movs	r1, #0
   809e8:	460b      	mov	r3, r1
   809ea:	47b8      	blx	r7
	TEST_ASSERT_UINT32_WITHIN(40U, 8420U, *p_TC0_CV0);	/* It takes appr. 20 clock cycles to read and compare the value */
   809ec:	6832      	ldr	r2, [r6, #0]
   809ee:	2028      	movs	r0, #40	; 0x28
   809f0:	9000      	str	r0, [sp, #0]
   809f2:	9401      	str	r4, [sp, #4]
   809f4:	f242 01e4 	movw	r1, #8420	; 0x20e4
   809f8:	2300      	movs	r3, #0
   809fa:	47a8      	blx	r5
   809fc:	b003      	add	sp, #12
   809fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80a02:	bf00      	nop
   80a04:	000819ed 	.word	0x000819ed
   80a08:	40080010 	.word	0x40080010
   80a0c:	00081a65 	.word	0x00081a65
   80a10:	000805fd 	.word	0x000805fd
   80a14:	40080020 	.word	0x40080020

00080a18 <test_writing4DigitNumberOnTheLCDDisplay>:
#include "test_lcdApplication.h"

extern uint32_t *const p_PIOC_ODSR;	/* The pointer to the status (values) of the output pins of the B register, address is defined in test_lcdfunctions.c  */

void test_writing4DigitNumberOnTheLCDDisplay(void)
{
   80a18:	b530      	push	{r4, r5, lr}
   80a1a:	b083      	sub	sp, #12
	lcdClearDisplay();	/* Can be used since lcdClearDisplay() is already developed and tested */
   80a1c:	4b14      	ldr	r3, [pc, #80]	; (80a70 <test_writing4DigitNumberOnTheLCDDisplay+0x58>)
   80a1e:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWrite4DigitNumber(1357));
   80a20:	f240 504d 	movw	r0, #1357	; 0x54d
   80a24:	4b13      	ldr	r3, [pc, #76]	; (80a74 <test_writing4DigitNumberOnTheLCDDisplay+0x5c>)
   80a26:	4798      	blx	r3
   80a28:	b118      	cbz	r0, 80a32 <test_writing4DigitNumberOnTheLCDDisplay+0x1a>
   80a2a:	4813      	ldr	r0, [pc, #76]	; (80a78 <test_writing4DigitNumberOnTheLCDDisplay+0x60>)
   80a2c:	2115      	movs	r1, #21
   80a2e:	4b13      	ldr	r3, [pc, #76]	; (80a7c <test_writing4DigitNumberOnTheLCDDisplay+0x64>)
   80a30:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80a32:	4b13      	ldr	r3, [pc, #76]	; (80a80 <test_writing4DigitNumberOnTheLCDDisplay+0x68>)
   80a34:	681d      	ldr	r5, [r3, #0]
   80a36:	682a      	ldr	r2, [r5, #0]
   80a38:	2316      	movs	r3, #22
   80a3a:	9300      	str	r3, [sp, #0]
   80a3c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80a40:	f04f 31ff 	mov.w	r1, #4294967295
   80a44:	2300      	movs	r3, #0
   80a46:	4c0f      	ldr	r4, [pc, #60]	; (80a84 <test_writing4DigitNumberOnTheLCDDisplay+0x6c>)
   80a48:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80a4a:	682a      	ldr	r2, [r5, #0]
   80a4c:	2317      	movs	r3, #23
   80a4e:	9300      	str	r3, [sp, #0]
   80a50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80a54:	2100      	movs	r1, #0
   80a56:	460b      	mov	r3, r1
   80a58:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1110<<23), *p_PIOC_ODSR);
   80a5a:	682a      	ldr	r2, [r5, #0]
   80a5c:	231a      	movs	r3, #26
   80a5e:	9300      	str	r3, [sp, #0]
   80a60:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80a64:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
   80a68:	2300      	movs	r3, #0
   80a6a:	47a0      	blx	r4
}
   80a6c:	b003      	add	sp, #12
   80a6e:	bd30      	pop	{r4, r5, pc}
   80a70:	000807b9 	.word	0x000807b9
   80a74:	00080639 	.word	0x00080639
   80a78:	000857c4 	.word	0x000857c4
   80a7c:	00081b31 	.word	0x00081b31
   80a80:	000857f4 	.word	0x000857f4
   80a84:	000819ed 	.word	0x000819ed

00080a88 <test_writingAsciiStringOnTheLCDDisplay>:

void test_writingAsciiStringOnTheLCDDisplay(void)
{
   80a88:	b530      	push	{r4, r5, lr}
   80a8a:	b083      	sub	sp, #12
	lcdClearDisplay();
   80a8c:	4b14      	ldr	r3, [pc, #80]	; (80ae0 <test_writingAsciiStringOnTheLCDDisplay+0x58>)
   80a8e:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWriteAsciiString("Test everything!"));
   80a90:	4814      	ldr	r0, [pc, #80]	; (80ae4 <test_writingAsciiStringOnTheLCDDisplay+0x5c>)
   80a92:	4b15      	ldr	r3, [pc, #84]	; (80ae8 <test_writingAsciiStringOnTheLCDDisplay+0x60>)
   80a94:	4798      	blx	r3
   80a96:	b118      	cbz	r0, 80aa0 <test_writingAsciiStringOnTheLCDDisplay+0x18>
   80a98:	4814      	ldr	r0, [pc, #80]	; (80aec <test_writingAsciiStringOnTheLCDDisplay+0x64>)
   80a9a:	2120      	movs	r1, #32
   80a9c:	4b14      	ldr	r3, [pc, #80]	; (80af0 <test_writingAsciiStringOnTheLCDDisplay+0x68>)
   80a9e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80aa0:	4b14      	ldr	r3, [pc, #80]	; (80af4 <test_writingAsciiStringOnTheLCDDisplay+0x6c>)
   80aa2:	681d      	ldr	r5, [r3, #0]
   80aa4:	682a      	ldr	r2, [r5, #0]
   80aa6:	2321      	movs	r3, #33	; 0x21
   80aa8:	9300      	str	r3, [sp, #0]
   80aaa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80aae:	f04f 31ff 	mov.w	r1, #4294967295
   80ab2:	2300      	movs	r3, #0
   80ab4:	4c10      	ldr	r4, [pc, #64]	; (80af8 <test_writingAsciiStringOnTheLCDDisplay+0x70>)
   80ab6:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80ab8:	682a      	ldr	r2, [r5, #0]
   80aba:	2322      	movs	r3, #34	; 0x22
   80abc:	9300      	str	r3, [sp, #0]
   80abe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ac2:	2100      	movs	r1, #0
   80ac4:	460b      	mov	r3, r1
   80ac6:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1000<<23), *p_PIOC_ODSR); /* last character shown should be a "!" */
   80ac8:	682a      	ldr	r2, [r5, #0]
   80aca:	2325      	movs	r3, #37	; 0x25
   80acc:	9300      	str	r3, [sp, #0]
   80ace:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80ad2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80ad6:	2300      	movs	r3, #0
   80ad8:	47a0      	blx	r4
}
   80ada:	b003      	add	sp, #12
   80adc:	bd30      	pop	{r4, r5, pc}
   80ade:	bf00      	nop
   80ae0:	000807b9 	.word	0x000807b9
   80ae4:	000857e0 	.word	0x000857e0
   80ae8:	0008063d 	.word	0x0008063d
   80aec:	000857c4 	.word	0x000857c4
   80af0:	00081b31 	.word	0x00081b31
   80af4:	000857f4 	.word	0x000857f4
   80af8:	000819ed 	.word	0x000819ed

00080afc <test_writingButtonOnTheLCDDisplay>:

void test_writingButtonOnTheLCDDisplay(void)
{
   80afc:	b530      	push	{r4, r5, lr}
   80afe:	b083      	sub	sp, #12
	lcdClearDisplay();
   80b00:	4b14      	ldr	r3, [pc, #80]	; (80b54 <test_writingButtonOnTheLCDDisplay+0x58>)
   80b02:	4798      	blx	r3
	TEST_ASSERT_FALSE(lcdWriteButtonValue(btnSELECT));
   80b04:	2004      	movs	r0, #4
   80b06:	4b14      	ldr	r3, [pc, #80]	; (80b58 <test_writingButtonOnTheLCDDisplay+0x5c>)
   80b08:	4798      	blx	r3
   80b0a:	b118      	cbz	r0, 80b14 <test_writingButtonOnTheLCDDisplay+0x18>
   80b0c:	4813      	ldr	r0, [pc, #76]	; (80b5c <test_writingButtonOnTheLCDDisplay+0x60>)
   80b0e:	212b      	movs	r1, #43	; 0x2b
   80b10:	4b13      	ldr	r3, [pc, #76]	; (80b60 <test_writingButtonOnTheLCDDisplay+0x64>)
   80b12:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80b14:	4b13      	ldr	r3, [pc, #76]	; (80b64 <test_writingButtonOnTheLCDDisplay+0x68>)
   80b16:	681d      	ldr	r5, [r3, #0]
   80b18:	682a      	ldr	r2, [r5, #0]
   80b1a:	232c      	movs	r3, #44	; 0x2c
   80b1c:	9300      	str	r3, [sp, #0]
   80b1e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80b22:	f04f 31ff 	mov.w	r1, #4294967295
   80b26:	2300      	movs	r3, #0
   80b28:	4c0f      	ldr	r4, [pc, #60]	; (80b68 <test_writingButtonOnTheLCDDisplay+0x6c>)
   80b2a:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80b2c:	682a      	ldr	r2, [r5, #0]
   80b2e:	232d      	movs	r3, #45	; 0x2d
   80b30:	9300      	str	r3, [sp, #0]
   80b32:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80b36:	2100      	movs	r1, #0
   80b38:	460b      	mov	r3, r1
   80b3a:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0010<<23), *p_PIOC_ODSR);	/* last character shown should be a "T" as in SELECT */
   80b3c:	682a      	ldr	r2, [r5, #0]
   80b3e:	2330      	movs	r3, #48	; 0x30
   80b40:	9300      	str	r3, [sp, #0]
   80b42:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80b46:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80b4a:	2300      	movs	r3, #0
   80b4c:	47a0      	blx	r4
   80b4e:	b003      	add	sp, #12
   80b50:	bd30      	pop	{r4, r5, pc}
   80b52:	bf00      	nop
   80b54:	000807b9 	.word	0x000807b9
   80b58:	00080641 	.word	0x00080641
   80b5c:	000857c4 	.word	0x000857c4
   80b60:	00081b31 	.word	0x00081b31
   80b64:	000857f4 	.word	0x000857f4
   80b68:	000819ed 	.word	0x000819ed

00080b6c <test_initialisatinOfTheLCD>:
#include "test_lcdFunctions.h"

uint32_t *const p_PIOC_ODSR = (uint32_t *) (PIOC_BASE_ADDRESS+0x0038U);	/* defines the address for status (values) of the output pins of the B register  */

void test_initialisatinOfTheLCD(void)
{
   80b6c:	b530      	push	{r4, r5, lr}
   80b6e:	b083      	sub	sp, #12
	TEST_ASSERT_FALSE(lcdInit());
   80b70:	4b11      	ldr	r3, [pc, #68]	; (80bb8 <test_initialisatinOfTheLCD+0x4c>)
   80b72:	4798      	blx	r3
   80b74:	b118      	cbz	r0, 80b7e <test_initialisatinOfTheLCD+0x12>
   80b76:	4811      	ldr	r0, [pc, #68]	; (80bbc <test_initialisatinOfTheLCD+0x50>)
   80b78:	2113      	movs	r1, #19
   80b7a:	4b11      	ldr	r3, [pc, #68]	; (80bc0 <test_initialisatinOfTheLCD+0x54>)
   80b7c:	4798      	blx	r3
	TEST_ASSERT_BIT_LOW(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to low since it is an initiation */
   80b7e:	4d11      	ldr	r5, [pc, #68]	; (80bc4 <test_initialisatinOfTheLCD+0x58>)
   80b80:	682a      	ldr	r2, [r5, #0]
   80b82:	2314      	movs	r3, #20
   80b84:	9300      	str	r3, [sp, #0]
   80b86:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80b8a:	2100      	movs	r1, #0
   80b8c:	460b      	mov	r3, r1
   80b8e:	4c0e      	ldr	r4, [pc, #56]	; (80bc8 <test_initialisatinOfTheLCD+0x5c>)
   80b90:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80b92:	682a      	ldr	r2, [r5, #0]
   80b94:	2315      	movs	r3, #21
   80b96:	9300      	str	r3, [sp, #0]
   80b98:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80b9c:	2100      	movs	r1, #0
   80b9e:	460b      	mov	r3, r1
   80ba0:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, 0b00000111100000000000000000000000, *p_PIOC_ODSR);	/* Display on, cursor on, blinking on */
   80ba2:	682a      	ldr	r2, [r5, #0]
   80ba4:	2318      	movs	r3, #24
   80ba6:	9300      	str	r3, [sp, #0]
   80ba8:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80bac:	4601      	mov	r1, r0
   80bae:	2300      	movs	r3, #0
   80bb0:	47a0      	blx	r4
}
   80bb2:	b003      	add	sp, #12
   80bb4:	bd30      	pop	{r4, r5, pc}
   80bb6:	bf00      	nop
   80bb8:	000806d5 	.word	0x000806d5
   80bbc:	000857c4 	.word	0x000857c4
   80bc0:	00081b31 	.word	0x00081b31
   80bc4:	400e1238 	.word	0x400e1238
   80bc8:	000819ed 	.word	0x000819ed

00080bcc <test_writingCharactersToTheLCD>:

void test_writingCharactersToTheLCD(void)
{
   80bcc:	b570      	push	{r4, r5, r6, lr}
   80bce:	b082      	sub	sp, #8
	/* Write a number of consecutive characters on the LCD display to show that the program works */
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect for each character */

	TEST_ASSERT_FALSE(lcdWrite(0x68, HIGH));	/* 0x68 is hex for ASCII symbol 'h' */
   80bd0:	2068      	movs	r0, #104	; 0x68
   80bd2:	2101      	movs	r1, #1
   80bd4:	4ba3      	ldr	r3, [pc, #652]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80bd6:	4798      	blx	r3
   80bd8:	b118      	cbz	r0, 80be2 <test_writingCharactersToTheLCD+0x16>
   80bda:	48a3      	ldr	r0, [pc, #652]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80bdc:	2121      	movs	r1, #33	; 0x21
   80bde:	4ba3      	ldr	r3, [pc, #652]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80be0:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);		/* The RS bit on the LCD should be set to high since it is writing a character to the display */
   80be2:	4da3      	ldr	r5, [pc, #652]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80be4:	682a      	ldr	r2, [r5, #0]
   80be6:	2322      	movs	r3, #34	; 0x22
   80be8:	9300      	str	r3, [sp, #0]
   80bea:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80bee:	f04f 31ff 	mov.w	r1, #4294967295
   80bf2:	2300      	movs	r3, #0
   80bf4:	4c9f      	ldr	r4, [pc, #636]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80bf6:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);		/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80bf8:	682a      	ldr	r2, [r5, #0]
   80bfa:	2323      	movs	r3, #35	; 0x23
   80bfc:	9300      	str	r3, [sp, #0]
   80bfe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80c02:	2100      	movs	r1, #0
   80c04:	460b      	mov	r3, r1
   80c06:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0001<<23), *p_PIOC_ODSR);	/* Last 4 bits in reverse order */
   80c08:	682a      	ldr	r2, [r5, #0]
   80c0a:	2324      	movs	r3, #36	; 0x24
   80c0c:	9300      	str	r3, [sp, #0]
   80c0e:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80c12:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80c16:	2300      	movs	r3, #0
   80c18:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite((uint8_t) 101, HIGH));	/* 101 is decimal and needs to have an explicit cast to a single byte */
   80c1a:	2065      	movs	r0, #101	; 0x65
   80c1c:	2101      	movs	r1, #1
   80c1e:	4b91      	ldr	r3, [pc, #580]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80c20:	4798      	blx	r3
   80c22:	b118      	cbz	r0, 80c2c <test_writingCharactersToTheLCD+0x60>
   80c24:	4890      	ldr	r0, [pc, #576]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80c26:	2126      	movs	r1, #38	; 0x26
   80c28:	4b90      	ldr	r3, [pc, #576]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80c2a:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80c2c:	4d90      	ldr	r5, [pc, #576]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80c2e:	682a      	ldr	r2, [r5, #0]
   80c30:	2327      	movs	r3, #39	; 0x27
   80c32:	9300      	str	r3, [sp, #0]
   80c34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80c38:	f04f 31ff 	mov.w	r1, #4294967295
   80c3c:	2300      	movs	r3, #0
   80c3e:	4c8d      	ldr	r4, [pc, #564]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80c40:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80c42:	682a      	ldr	r2, [r5, #0]
   80c44:	2328      	movs	r3, #40	; 0x28
   80c46:	9300      	str	r3, [sp, #0]
   80c48:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80c4c:	2100      	movs	r1, #0
   80c4e:	460b      	mov	r3, r1
   80c50:	47a0      	blx	r4
	//TEST_ASSERT_BITS(LCD_mask_D4_D7, 0b00000101000000000000000000000000, *p_PIOC_ODSR);
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1010<<23), *p_PIOC_ODSR);
   80c52:	682a      	ldr	r2, [r5, #0]
   80c54:	232a      	movs	r3, #42	; 0x2a
   80c56:	9300      	str	r3, [sp, #0]
   80c58:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80c5c:	f04f 61a0 	mov.w	r1, #83886080	; 0x5000000
   80c60:	2300      	movs	r3, #0
   80c62:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   80c64:	206c      	movs	r0, #108	; 0x6c
   80c66:	2101      	movs	r1, #1
   80c68:	4b7e      	ldr	r3, [pc, #504]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80c6a:	4798      	blx	r3
   80c6c:	b118      	cbz	r0, 80c76 <test_writingCharactersToTheLCD+0xaa>
   80c6e:	487e      	ldr	r0, [pc, #504]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80c70:	212c      	movs	r1, #44	; 0x2c
   80c72:	4b7e      	ldr	r3, [pc, #504]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80c74:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80c76:	4d7e      	ldr	r5, [pc, #504]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80c78:	682a      	ldr	r2, [r5, #0]
   80c7a:	232d      	movs	r3, #45	; 0x2d
   80c7c:	9300      	str	r3, [sp, #0]
   80c7e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80c82:	f04f 31ff 	mov.w	r1, #4294967295
   80c86:	2300      	movs	r3, #0
   80c88:	4c7a      	ldr	r4, [pc, #488]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80c8a:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80c8c:	682a      	ldr	r2, [r5, #0]
   80c8e:	232e      	movs	r3, #46	; 0x2e
   80c90:	9300      	str	r3, [sp, #0]
   80c92:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80c96:	2100      	movs	r1, #0
   80c98:	460b      	mov	r3, r1
   80c9a:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80c9c:	682a      	ldr	r2, [r5, #0]
   80c9e:	232f      	movs	r3, #47	; 0x2f
   80ca0:	9300      	str	r3, [sp, #0]
   80ca2:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80ca6:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80caa:	2300      	movs	r3, #0
   80cac:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6C, HIGH));
   80cae:	206c      	movs	r0, #108	; 0x6c
   80cb0:	2101      	movs	r1, #1
   80cb2:	4b6c      	ldr	r3, [pc, #432]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80cb4:	4798      	blx	r3
   80cb6:	b118      	cbz	r0, 80cc0 <test_writingCharactersToTheLCD+0xf4>
   80cb8:	486b      	ldr	r0, [pc, #428]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80cba:	2131      	movs	r1, #49	; 0x31
   80cbc:	4b6b      	ldr	r3, [pc, #428]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80cbe:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80cc0:	4d6b      	ldr	r5, [pc, #428]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80cc2:	682a      	ldr	r2, [r5, #0]
   80cc4:	2332      	movs	r3, #50	; 0x32
   80cc6:	9300      	str	r3, [sp, #0]
   80cc8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80ccc:	f04f 31ff 	mov.w	r1, #4294967295
   80cd0:	2300      	movs	r3, #0
   80cd2:	4c68      	ldr	r4, [pc, #416]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80cd4:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80cd6:	682a      	ldr	r2, [r5, #0]
   80cd8:	2333      	movs	r3, #51	; 0x33
   80cda:	9300      	str	r3, [sp, #0]
   80cdc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ce0:	2100      	movs	r1, #0
   80ce2:	460b      	mov	r3, r1
   80ce4:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80ce6:	682a      	ldr	r2, [r5, #0]
   80ce8:	2334      	movs	r3, #52	; 0x34
   80cea:	9300      	str	r3, [sp, #0]
   80cec:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80cf0:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80cf4:	2300      	movs	r3, #0
   80cf6:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x6F, HIGH));
   80cf8:	206f      	movs	r0, #111	; 0x6f
   80cfa:	2101      	movs	r1, #1
   80cfc:	4b59      	ldr	r3, [pc, #356]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80cfe:	4798      	blx	r3
   80d00:	b118      	cbz	r0, 80d0a <test_writingCharactersToTheLCD+0x13e>
   80d02:	4859      	ldr	r0, [pc, #356]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80d04:	2136      	movs	r1, #54	; 0x36
   80d06:	4b59      	ldr	r3, [pc, #356]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80d08:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80d0a:	4d59      	ldr	r5, [pc, #356]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80d0c:	682a      	ldr	r2, [r5, #0]
   80d0e:	2337      	movs	r3, #55	; 0x37
   80d10:	9300      	str	r3, [sp, #0]
   80d12:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80d16:	f04f 31ff 	mov.w	r1, #4294967295
   80d1a:	2300      	movs	r3, #0
   80d1c:	4c55      	ldr	r4, [pc, #340]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80d1e:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	
   80d20:	682a      	ldr	r2, [r5, #0]
   80d22:	2338      	movs	r3, #56	; 0x38
   80d24:	9300      	str	r3, [sp, #0]
   80d26:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80d2a:	2100      	movs	r1, #0
   80d2c:	460b      	mov	r3, r1
   80d2e:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1111<<23), *p_PIOC_ODSR);
   80d30:	682a      	ldr	r2, [r5, #0]
   80d32:	2339      	movs	r3, #57	; 0x39
   80d34:	9300      	str	r3, [sp, #0]
   80d36:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80d3a:	4601      	mov	r1, r0
   80d3c:	2300      	movs	r3, #0
   80d3e:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x2C, HIGH));
   80d40:	202c      	movs	r0, #44	; 0x2c
   80d42:	2101      	movs	r1, #1
   80d44:	4b47      	ldr	r3, [pc, #284]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80d46:	4798      	blx	r3
   80d48:	b118      	cbz	r0, 80d52 <test_writingCharactersToTheLCD+0x186>
   80d4a:	4847      	ldr	r0, [pc, #284]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80d4c:	213b      	movs	r1, #59	; 0x3b
   80d4e:	4b47      	ldr	r3, [pc, #284]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80d50:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80d52:	4d47      	ldr	r5, [pc, #284]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80d54:	682a      	ldr	r2, [r5, #0]
   80d56:	233c      	movs	r3, #60	; 0x3c
   80d58:	9300      	str	r3, [sp, #0]
   80d5a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80d5e:	f04f 31ff 	mov.w	r1, #4294967295
   80d62:	2300      	movs	r3, #0
   80d64:	4c43      	ldr	r4, [pc, #268]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80d66:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80d68:	682a      	ldr	r2, [r5, #0]
   80d6a:	233d      	movs	r3, #61	; 0x3d
   80d6c:	9300      	str	r3, [sp, #0]
   80d6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80d72:	2100      	movs	r1, #0
   80d74:	460b      	mov	r3, r1
   80d76:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80d78:	682a      	ldr	r2, [r5, #0]
   80d7a:	233e      	movs	r3, #62	; 0x3e
   80d7c:	9300      	str	r3, [sp, #0]
   80d7e:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80d82:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80d86:	2300      	movs	r3, #0
   80d88:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite(0x20, HIGH));
   80d8a:	2020      	movs	r0, #32
   80d8c:	2101      	movs	r1, #1
   80d8e:	4b35      	ldr	r3, [pc, #212]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80d90:	4798      	blx	r3
   80d92:	b118      	cbz	r0, 80d9c <test_writingCharactersToTheLCD+0x1d0>
   80d94:	4834      	ldr	r0, [pc, #208]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80d96:	2140      	movs	r1, #64	; 0x40
   80d98:	4b34      	ldr	r3, [pc, #208]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80d9a:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80d9c:	4d34      	ldr	r5, [pc, #208]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80d9e:	682a      	ldr	r2, [r5, #0]
   80da0:	2341      	movs	r3, #65	; 0x41
   80da2:	9300      	str	r3, [sp, #0]
   80da4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80da8:	f04f 31ff 	mov.w	r1, #4294967295
   80dac:	2300      	movs	r3, #0
   80dae:	4c31      	ldr	r4, [pc, #196]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80db0:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80db2:	682a      	ldr	r2, [r5, #0]
   80db4:	2342      	movs	r3, #66	; 0x42
   80db6:	9300      	str	r3, [sp, #0]
   80db8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80dbc:	2100      	movs	r1, #0
   80dbe:	460b      	mov	r3, r1
   80dc0:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0000<<23), *p_PIOC_ODSR);
   80dc2:	682a      	ldr	r2, [r5, #0]
   80dc4:	2343      	movs	r3, #67	; 0x43
   80dc6:	9300      	str	r3, [sp, #0]
   80dc8:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80dcc:	2100      	movs	r1, #0
   80dce:	460b      	mov	r3, r1
   80dd0:	47a0      	blx	r4

	lcdWrite('w', HIGH);
   80dd2:	2077      	movs	r0, #119	; 0x77
   80dd4:	2101      	movs	r1, #1
   80dd6:	4e23      	ldr	r6, [pc, #140]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80dd8:	47b0      	blx	r6
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80dda:	682a      	ldr	r2, [r5, #0]
   80ddc:	2346      	movs	r3, #70	; 0x46
   80dde:	9300      	str	r3, [sp, #0]
   80de0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80de4:	f04f 31ff 	mov.w	r1, #4294967295
   80de8:	2300      	movs	r3, #0
   80dea:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80dec:	682a      	ldr	r2, [r5, #0]
   80dee:	2347      	movs	r3, #71	; 0x47
   80df0:	9300      	str	r3, [sp, #0]
   80df2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80df6:	2100      	movs	r1, #0
   80df8:	460b      	mov	r3, r1
   80dfa:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1110<<23), *p_PIOC_ODSR);
   80dfc:	682a      	ldr	r2, [r5, #0]
   80dfe:	2348      	movs	r3, #72	; 0x48
   80e00:	9300      	str	r3, [sp, #0]
   80e02:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80e06:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
   80e0a:	2300      	movs	r3, #0
   80e0c:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('o', HIGH));
   80e0e:	206f      	movs	r0, #111	; 0x6f
   80e10:	2101      	movs	r1, #1
   80e12:	47b0      	blx	r6
   80e14:	b118      	cbz	r0, 80e1e <test_writingCharactersToTheLCD+0x252>
   80e16:	4814      	ldr	r0, [pc, #80]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80e18:	214a      	movs	r1, #74	; 0x4a
   80e1a:	4b14      	ldr	r3, [pc, #80]	; (80e6c <test_writingCharactersToTheLCD+0x2a0>)
   80e1c:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80e1e:	4d14      	ldr	r5, [pc, #80]	; (80e70 <test_writingCharactersToTheLCD+0x2a4>)
   80e20:	682a      	ldr	r2, [r5, #0]
   80e22:	234b      	movs	r3, #75	; 0x4b
   80e24:	9300      	str	r3, [sp, #0]
   80e26:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80e2a:	f04f 31ff 	mov.w	r1, #4294967295
   80e2e:	2300      	movs	r3, #0
   80e30:	4c10      	ldr	r4, [pc, #64]	; (80e74 <test_writingCharactersToTheLCD+0x2a8>)
   80e32:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80e34:	682a      	ldr	r2, [r5, #0]
   80e36:	234c      	movs	r3, #76	; 0x4c
   80e38:	9300      	str	r3, [sp, #0]
   80e3a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80e3e:	2100      	movs	r1, #0
   80e40:	460b      	mov	r3, r1
   80e42:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1111<<23), *p_PIOC_ODSR);
   80e44:	682a      	ldr	r2, [r5, #0]
   80e46:	234d      	movs	r3, #77	; 0x4d
   80e48:	9300      	str	r3, [sp, #0]
   80e4a:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80e4e:	4601      	mov	r1, r0
   80e50:	2300      	movs	r3, #0
   80e52:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('r', HIGH));
   80e54:	2072      	movs	r0, #114	; 0x72
   80e56:	2101      	movs	r1, #1
   80e58:	4b02      	ldr	r3, [pc, #8]	; (80e64 <test_writingCharactersToTheLCD+0x298>)
   80e5a:	4798      	blx	r3
   80e5c:	b170      	cbz	r0, 80e7c <test_writingCharactersToTheLCD+0x2b0>
   80e5e:	4802      	ldr	r0, [pc, #8]	; (80e68 <test_writingCharactersToTheLCD+0x29c>)
   80e60:	214f      	movs	r1, #79	; 0x4f
   80e62:	e009      	b.n	80e78 <test_writingCharactersToTheLCD+0x2ac>
   80e64:	00080645 	.word	0x00080645
   80e68:	000857c4 	.word	0x000857c4
   80e6c:	00081b31 	.word	0x00081b31
   80e70:	400e1238 	.word	0x400e1238
   80e74:	000819ed 	.word	0x000819ed
   80e78:	4b34      	ldr	r3, [pc, #208]	; (80f4c <test_writingCharactersToTheLCD+0x380>)
   80e7a:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80e7c:	4d34      	ldr	r5, [pc, #208]	; (80f50 <test_writingCharactersToTheLCD+0x384>)
   80e7e:	682a      	ldr	r2, [r5, #0]
   80e80:	2350      	movs	r3, #80	; 0x50
   80e82:	9300      	str	r3, [sp, #0]
   80e84:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80e88:	f04f 31ff 	mov.w	r1, #4294967295
   80e8c:	2300      	movs	r3, #0
   80e8e:	4c31      	ldr	r4, [pc, #196]	; (80f54 <test_writingCharactersToTheLCD+0x388>)
   80e90:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80e92:	682a      	ldr	r2, [r5, #0]
   80e94:	2351      	movs	r3, #81	; 0x51
   80e96:	9300      	str	r3, [sp, #0]
   80e98:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80e9c:	2100      	movs	r1, #0
   80e9e:	460b      	mov	r3, r1
   80ea0:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0100<<23), *p_PIOC_ODSR);
   80ea2:	682a      	ldr	r2, [r5, #0]
   80ea4:	2352      	movs	r3, #82	; 0x52
   80ea6:	9300      	str	r3, [sp, #0]
   80ea8:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80eac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   80eb0:	2300      	movs	r3, #0
   80eb2:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('l', HIGH));
   80eb4:	206c      	movs	r0, #108	; 0x6c
   80eb6:	2101      	movs	r1, #1
   80eb8:	4b27      	ldr	r3, [pc, #156]	; (80f58 <test_writingCharactersToTheLCD+0x38c>)
   80eba:	4798      	blx	r3
   80ebc:	b118      	cbz	r0, 80ec6 <test_writingCharactersToTheLCD+0x2fa>
   80ebe:	4827      	ldr	r0, [pc, #156]	; (80f5c <test_writingCharactersToTheLCD+0x390>)
   80ec0:	2154      	movs	r1, #84	; 0x54
   80ec2:	4b22      	ldr	r3, [pc, #136]	; (80f4c <test_writingCharactersToTheLCD+0x380>)
   80ec4:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80ec6:	4d22      	ldr	r5, [pc, #136]	; (80f50 <test_writingCharactersToTheLCD+0x384>)
   80ec8:	682a      	ldr	r2, [r5, #0]
   80eca:	2355      	movs	r3, #85	; 0x55
   80ecc:	9300      	str	r3, [sp, #0]
   80ece:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80ed2:	f04f 31ff 	mov.w	r1, #4294967295
   80ed6:	2300      	movs	r3, #0
   80ed8:	4c1e      	ldr	r4, [pc, #120]	; (80f54 <test_writingCharactersToTheLCD+0x388>)
   80eda:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80edc:	682a      	ldr	r2, [r5, #0]
   80ede:	2356      	movs	r3, #86	; 0x56
   80ee0:	9300      	str	r3, [sp, #0]
   80ee2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80ee6:	2100      	movs	r1, #0
   80ee8:	460b      	mov	r3, r1
   80eea:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0011<<23), *p_PIOC_ODSR);
   80eec:	682a      	ldr	r2, [r5, #0]
   80eee:	2357      	movs	r3, #87	; 0x57
   80ef0:	9300      	str	r3, [sp, #0]
   80ef2:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80ef6:	f04f 71c0 	mov.w	r1, #25165824	; 0x1800000
   80efa:	2300      	movs	r3, #0
   80efc:	47a0      	blx	r4

	TEST_ASSERT_FALSE(lcdWrite('d', HIGH));
   80efe:	2064      	movs	r0, #100	; 0x64
   80f00:	2101      	movs	r1, #1
   80f02:	4b15      	ldr	r3, [pc, #84]	; (80f58 <test_writingCharactersToTheLCD+0x38c>)
   80f04:	4798      	blx	r3
   80f06:	b118      	cbz	r0, 80f10 <test_writingCharactersToTheLCD+0x344>
   80f08:	4814      	ldr	r0, [pc, #80]	; (80f5c <test_writingCharactersToTheLCD+0x390>)
   80f0a:	2159      	movs	r1, #89	; 0x59
   80f0c:	4b0f      	ldr	r3, [pc, #60]	; (80f4c <test_writingCharactersToTheLCD+0x380>)
   80f0e:	4798      	blx	r3
	TEST_ASSERT_BIT_HIGH(22, *p_PIOC_ODSR);
   80f10:	4d0f      	ldr	r5, [pc, #60]	; (80f50 <test_writingCharactersToTheLCD+0x384>)
   80f12:	682a      	ldr	r2, [r5, #0]
   80f14:	235a      	movs	r3, #90	; 0x5a
   80f16:	9300      	str	r3, [sp, #0]
   80f18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f1c:	f04f 31ff 	mov.w	r1, #4294967295
   80f20:	2300      	movs	r3, #0
   80f22:	4c0c      	ldr	r4, [pc, #48]	; (80f54 <test_writingCharactersToTheLCD+0x388>)
   80f24:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);
   80f26:	682a      	ldr	r2, [r5, #0]
   80f28:	235b      	movs	r3, #91	; 0x5b
   80f2a:	9300      	str	r3, [sp, #0]
   80f2c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80f30:	2100      	movs	r1, #0
   80f32:	460b      	mov	r3, r1
   80f34:	47a0      	blx	r4
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b0010<<23), *p_PIOC_ODSR);
   80f36:	682a      	ldr	r2, [r5, #0]
   80f38:	235c      	movs	r3, #92	; 0x5c
   80f3a:	9300      	str	r3, [sp, #0]
   80f3c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80f40:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80f44:	2300      	movs	r3, #0
   80f46:	47a0      	blx	r4
	
}
   80f48:	b002      	add	sp, #8
   80f4a:	bd70      	pop	{r4, r5, r6, pc}
   80f4c:	00081b31 	.word	0x00081b31
   80f50:	400e1238 	.word	0x400e1238
   80f54:	000819ed 	.word	0x000819ed
   80f58:	00080645 	.word	0x00080645
   80f5c:	000857c4 	.word	0x000857c4

00080f60 <test_clearingTheLCDDisplay>:

void test_clearingTheLCDDisplay(void)
{
   80f60:	b530      	push	{r4, r5, lr}
   80f62:	b083      	sub	sp, #12
	//delayMicroseconds(1000000);	/* Just to make sure that the previous message on the LCD can be read */
	
	/* Assert that the last bits written are correct */
	TEST_ASSERT_FALSE(lcdClearDisplay());
   80f64:	4b11      	ldr	r3, [pc, #68]	; (80fac <test_clearingTheLCDDisplay+0x4c>)
   80f66:	4798      	blx	r3
   80f68:	b118      	cbz	r0, 80f72 <test_clearingTheLCDDisplay+0x12>
   80f6a:	4811      	ldr	r0, [pc, #68]	; (80fb0 <test_clearingTheLCDDisplay+0x50>)
   80f6c:	2165      	movs	r1, #101	; 0x65
   80f6e:	4b11      	ldr	r3, [pc, #68]	; (80fb4 <test_clearingTheLCDDisplay+0x54>)
   80f70:	4798      	blx	r3
	TEST_ASSERT_BIT_LOW(22, *p_PIOC_ODSR);	/* The RS bit on the LCD should be set to low since it is an initiation */
   80f72:	4d11      	ldr	r5, [pc, #68]	; (80fb8 <test_clearingTheLCDDisplay+0x58>)
   80f74:	682a      	ldr	r2, [r5, #0]
   80f76:	2366      	movs	r3, #102	; 0x66
   80f78:	9300      	str	r3, [sp, #0]
   80f7a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   80f7e:	2100      	movs	r1, #0
   80f80:	460b      	mov	r3, r1
   80f82:	4c0e      	ldr	r4, [pc, #56]	; (80fbc <test_clearingTheLCDDisplay+0x5c>)
   80f84:	47a0      	blx	r4
	TEST_ASSERT_BIT_LOW(21, *p_PIOC_ODSR);	/* The Enable bit on the LCD should be set to low to indicate that all data has been written  */
   80f86:	682a      	ldr	r2, [r5, #0]
   80f88:	2367      	movs	r3, #103	; 0x67
   80f8a:	9300      	str	r3, [sp, #0]
   80f8c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   80f90:	2100      	movs	r1, #0
   80f92:	460b      	mov	r3, r1
   80f94:	47a0      	blx	r4
	/* We cannot test the actual value of the last character shown on the LCD, 
	   but we can test that the output to the LCD on PC23-PC26 is what we expect */
	TEST_ASSERT_BITS(LCD_mask_D4_D7, (0b1000<<23), *p_PIOC_ODSR);
   80f96:	682a      	ldr	r2, [r5, #0]
   80f98:	236a      	movs	r3, #106	; 0x6a
   80f9a:	9300      	str	r3, [sp, #0]
   80f9c:	f04f 60f0 	mov.w	r0, #125829120	; 0x7800000
   80fa0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   80fa4:	2300      	movs	r3, #0
   80fa6:	47a0      	blx	r4
}
   80fa8:	b003      	add	sp, #12
   80faa:	bd30      	pop	{r4, r5, pc}
   80fac:	000807b9 	.word	0x000807b9
   80fb0:	000857c4 	.word	0x000857c4
   80fb4:	00081b31 	.word	0x00081b31
   80fb8:	400e1238 	.word	0x400e1238
   80fbc:	000819ed 	.word	0x000819ed

00080fc0 <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   80fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80fc4:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80fc6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80fca:	d132      	bne.n	81032 <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80fcc:	4b5f      	ldr	r3, [pc, #380]	; (8114c <UnityPrintNumber+0x18c>)
   80fce:	6818      	ldr	r0, [r3, #0]
   80fd0:	6882      	ldr	r2, [r0, #8]
   80fd2:	6893      	ldr	r3, [r2, #8]
   80fd4:	3b01      	subs	r3, #1
   80fd6:	6093      	str	r3, [r2, #8]
   80fd8:	2b00      	cmp	r3, #0
   80fda:	da1d      	bge.n	81018 <UnityPrintNumber+0x58>
   80fdc:	6882      	ldr	r2, [r0, #8]
   80fde:	6891      	ldr	r1, [r2, #8]
   80fe0:	6993      	ldr	r3, [r2, #24]
   80fe2:	4299      	cmp	r1, r3
   80fe4:	db12      	blt.n	8100c <UnityPrintNumber+0x4c>
   80fe6:	6813      	ldr	r3, [r2, #0]
   80fe8:	222d      	movs	r2, #45	; 0x2d
   80fea:	701a      	strb	r2, [r3, #0]
   80fec:	4b57      	ldr	r3, [pc, #348]	; (8114c <UnityPrintNumber+0x18c>)
   80fee:	6818      	ldr	r0, [r3, #0]
   80ff0:	6882      	ldr	r2, [r0, #8]
   80ff2:	6813      	ldr	r3, [r2, #0]
   80ff4:	7819      	ldrb	r1, [r3, #0]
   80ff6:	290a      	cmp	r1, #10
   80ff8:	d002      	beq.n	81000 <UnityPrintNumber+0x40>
   80ffa:	3301      	adds	r3, #1
   80ffc:	6013      	str	r3, [r2, #0]
   80ffe:	e04f      	b.n	810a0 <UnityPrintNumber+0xe0>
   81000:	210a      	movs	r1, #10
   81002:	4b53      	ldr	r3, [pc, #332]	; (81150 <UnityPrintNumber+0x190>)
   81004:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   81006:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8100a:	e049      	b.n	810a0 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   8100c:	212d      	movs	r1, #45	; 0x2d
   8100e:	4b50      	ldr	r3, [pc, #320]	; (81150 <UnityPrintNumber+0x190>)
   81010:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   81012:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   81016:	e043      	b.n	810a0 <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   81018:	6883      	ldr	r3, [r0, #8]
   8101a:	681b      	ldr	r3, [r3, #0]
   8101c:	222d      	movs	r2, #45	; 0x2d
   8101e:	701a      	strb	r2, [r3, #0]
   81020:	4b4a      	ldr	r3, [pc, #296]	; (8114c <UnityPrintNumber+0x18c>)
   81022:	681b      	ldr	r3, [r3, #0]
   81024:	689b      	ldr	r3, [r3, #8]
   81026:	681a      	ldr	r2, [r3, #0]
   81028:	3201      	adds	r2, #1
   8102a:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8102c:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   81030:	e036      	b.n	810a0 <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   81032:	2800      	cmp	r0, #0
   81034:	da34      	bge.n	810a0 <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   81036:	4b45      	ldr	r3, [pc, #276]	; (8114c <UnityPrintNumber+0x18c>)
   81038:	6818      	ldr	r0, [r3, #0]
   8103a:	6882      	ldr	r2, [r0, #8]
   8103c:	6893      	ldr	r3, [r2, #8]
   8103e:	3b01      	subs	r3, #1
   81040:	6093      	str	r3, [r2, #8]
   81042:	2b00      	cmp	r3, #0
   81044:	da19      	bge.n	8107a <UnityPrintNumber+0xba>
   81046:	6882      	ldr	r2, [r0, #8]
   81048:	6891      	ldr	r1, [r2, #8]
   8104a:	6993      	ldr	r3, [r2, #24]
   8104c:	4299      	cmp	r1, r3
   8104e:	db10      	blt.n	81072 <UnityPrintNumber+0xb2>
   81050:	6813      	ldr	r3, [r2, #0]
   81052:	222d      	movs	r2, #45	; 0x2d
   81054:	701a      	strb	r2, [r3, #0]
   81056:	4b3d      	ldr	r3, [pc, #244]	; (8114c <UnityPrintNumber+0x18c>)
   81058:	6818      	ldr	r0, [r3, #0]
   8105a:	6882      	ldr	r2, [r0, #8]
   8105c:	6813      	ldr	r3, [r2, #0]
   8105e:	7819      	ldrb	r1, [r3, #0]
   81060:	290a      	cmp	r1, #10
   81062:	d002      	beq.n	8106a <UnityPrintNumber+0xaa>
   81064:	3301      	adds	r3, #1
   81066:	6013      	str	r3, [r2, #0]
   81068:	e011      	b.n	8108e <UnityPrintNumber+0xce>
   8106a:	210a      	movs	r1, #10
   8106c:	4b38      	ldr	r3, [pc, #224]	; (81150 <UnityPrintNumber+0x190>)
   8106e:	4798      	blx	r3
   81070:	e00d      	b.n	8108e <UnityPrintNumber+0xce>
   81072:	212d      	movs	r1, #45	; 0x2d
   81074:	4b36      	ldr	r3, [pc, #216]	; (81150 <UnityPrintNumber+0x190>)
   81076:	4798      	blx	r3
   81078:	e009      	b.n	8108e <UnityPrintNumber+0xce>
   8107a:	6883      	ldr	r3, [r0, #8]
   8107c:	681b      	ldr	r3, [r3, #0]
   8107e:	222d      	movs	r2, #45	; 0x2d
   81080:	701a      	strb	r2, [r3, #0]
   81082:	4b32      	ldr	r3, [pc, #200]	; (8114c <UnityPrintNumber+0x18c>)
   81084:	681b      	ldr	r3, [r3, #0]
   81086:	689b      	ldr	r3, [r3, #8]
   81088:	681a      	ldr	r2, [r3, #0]
   8108a:	3201      	adds	r2, #1
   8108c:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   8108e:	426d      	negs	r5, r5
   81090:	e006      	b.n	810a0 <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   81092:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   81096:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   81098:	429c      	cmp	r4, r3
   8109a:	da06      	bge.n	810aa <UnityPrintNumber+0xea>
            divisor = next_divisor;
   8109c:	461c      	mov	r4, r3
   8109e:	e000      	b.n	810a2 <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   810a0:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   810a2:	fbb5 f3f4 	udiv	r3, r5, r4
   810a6:	2b09      	cmp	r3, #9
   810a8:	d8f3      	bhi.n	81092 <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   810aa:	4e28      	ldr	r6, [pc, #160]	; (8114c <UnityPrintNumber+0x18c>)
   810ac:	4f29      	ldr	r7, [pc, #164]	; (81154 <UnityPrintNumber+0x194>)
   810ae:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 81150 <UnityPrintNumber+0x190>
   810b2:	6830      	ldr	r0, [r6, #0]
   810b4:	6882      	ldr	r2, [r0, #8]
   810b6:	6893      	ldr	r3, [r2, #8]
   810b8:	3b01      	subs	r3, #1
   810ba:	6093      	str	r3, [r2, #8]
   810bc:	2b00      	cmp	r3, #0
   810be:	da29      	bge.n	81114 <UnityPrintNumber+0x154>
   810c0:	6882      	ldr	r2, [r0, #8]
   810c2:	6891      	ldr	r1, [r2, #8]
   810c4:	6993      	ldr	r3, [r2, #24]
   810c6:	4299      	cmp	r1, r3
   810c8:	db17      	blt.n	810fa <UnityPrintNumber+0x13a>
   810ca:	6811      	ldr	r1, [r2, #0]
   810cc:	fbb5 f3f4 	udiv	r3, r5, r4
   810d0:	fba7 0203 	umull	r0, r2, r7, r3
   810d4:	08d2      	lsrs	r2, r2, #3
   810d6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   810da:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   810de:	3330      	adds	r3, #48	; 0x30
   810e0:	700b      	strb	r3, [r1, #0]
   810e2:	6830      	ldr	r0, [r6, #0]
   810e4:	6882      	ldr	r2, [r0, #8]
   810e6:	6813      	ldr	r3, [r2, #0]
   810e8:	7819      	ldrb	r1, [r3, #0]
   810ea:	290a      	cmp	r1, #10
   810ec:	d002      	beq.n	810f4 <UnityPrintNumber+0x134>
   810ee:	3301      	adds	r3, #1
   810f0:	6013      	str	r3, [r2, #0]
   810f2:	e021      	b.n	81138 <UnityPrintNumber+0x178>
   810f4:	210a      	movs	r1, #10
   810f6:	47c0      	blx	r8
   810f8:	e01e      	b.n	81138 <UnityPrintNumber+0x178>
   810fa:	fbb5 f3f4 	udiv	r3, r5, r4
   810fe:	fba7 e103 	umull	lr, r1, r7, r3
   81102:	08c9      	lsrs	r1, r1, #3
   81104:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   81108:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   8110c:	3130      	adds	r1, #48	; 0x30
   8110e:	b2c9      	uxtb	r1, r1
   81110:	47c0      	blx	r8
   81112:	e011      	b.n	81138 <UnityPrintNumber+0x178>
   81114:	6883      	ldr	r3, [r0, #8]
   81116:	6819      	ldr	r1, [r3, #0]
   81118:	fbb5 f3f4 	udiv	r3, r5, r4
   8111c:	fba7 0203 	umull	r0, r2, r7, r3
   81120:	08d2      	lsrs	r2, r2, #3
   81122:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81126:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   8112a:	3330      	adds	r3, #48	; 0x30
   8112c:	700b      	strb	r3, [r1, #0]
   8112e:	6833      	ldr	r3, [r6, #0]
   81130:	689b      	ldr	r3, [r3, #8]
   81132:	681a      	ldr	r2, [r3, #0]
   81134:	3201      	adds	r2, #1
   81136:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   81138:	4b07      	ldr	r3, [pc, #28]	; (81158 <UnityPrintNumber+0x198>)
   8113a:	fb83 2304 	smull	r2, r3, r3, r4
   8113e:	17e4      	asrs	r4, r4, #31
   81140:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   81144:	2c00      	cmp	r4, #0
   81146:	dcb4      	bgt.n	810b2 <UnityPrintNumber+0xf2>
}
   81148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8114c:	20070560 	.word	0x20070560
   81150:	0008354d 	.word	0x0008354d
   81154:	cccccccd 	.word	0xcccccccd
   81158:	66666667 	.word	0x66666667

0008115c <UnityPrintNumberUnsigned>:

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumberUnsigned(const _U_UINT number)
{
   8115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81160:	4607      	mov	r7, r0
    _U_UINT divisor = 1;
   81162:	2401      	movs	r4, #1
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   81164:	e005      	b.n	81172 <UnityPrintNumberUnsigned+0x16>
    {
        next_divisor = divisor * 10;
   81166:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   8116a:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   8116c:	429c      	cmp	r4, r3
   8116e:	d204      	bcs.n	8117a <UnityPrintNumberUnsigned+0x1e>
            divisor = next_divisor;
   81170:	461c      	mov	r4, r3
{
    _U_UINT divisor = 1;
    _U_UINT next_divisor;

    // figure out initial divisor
    while (number / divisor > 9)
   81172:	fbb7 f3f4 	udiv	r3, r7, r4
   81176:	2b09      	cmp	r3, #9
   81178:	d8f5      	bhi.n	81166 <UnityPrintNumberUnsigned+0xa>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   8117a:	4e27      	ldr	r6, [pc, #156]	; (81218 <UnityPrintNumberUnsigned+0xbc>)
   8117c:	4d27      	ldr	r5, [pc, #156]	; (8121c <UnityPrintNumberUnsigned+0xc0>)
   8117e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 81220 <UnityPrintNumberUnsigned+0xc4>
   81182:	6833      	ldr	r3, [r6, #0]
   81184:	6899      	ldr	r1, [r3, #8]
   81186:	688a      	ldr	r2, [r1, #8]
   81188:	3a01      	subs	r2, #1
   8118a:	608a      	str	r2, [r1, #8]
   8118c:	2a00      	cmp	r2, #0
   8118e:	da2a      	bge.n	811e6 <UnityPrintNumberUnsigned+0x8a>
   81190:	689a      	ldr	r2, [r3, #8]
   81192:	6890      	ldr	r0, [r2, #8]
   81194:	6991      	ldr	r1, [r2, #24]
   81196:	4288      	cmp	r0, r1
   81198:	db17      	blt.n	811ca <UnityPrintNumberUnsigned+0x6e>
   8119a:	6811      	ldr	r1, [r2, #0]
   8119c:	fbb7 f3f4 	udiv	r3, r7, r4
   811a0:	fba5 0203 	umull	r0, r2, r5, r3
   811a4:	08d2      	lsrs	r2, r2, #3
   811a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   811aa:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   811ae:	3330      	adds	r3, #48	; 0x30
   811b0:	700b      	strb	r3, [r1, #0]
   811b2:	6830      	ldr	r0, [r6, #0]
   811b4:	6882      	ldr	r2, [r0, #8]
   811b6:	6813      	ldr	r3, [r2, #0]
   811b8:	7819      	ldrb	r1, [r3, #0]
   811ba:	290a      	cmp	r1, #10
   811bc:	d002      	beq.n	811c4 <UnityPrintNumberUnsigned+0x68>
   811be:	3301      	adds	r3, #1
   811c0:	6013      	str	r3, [r2, #0]
   811c2:	e022      	b.n	8120a <UnityPrintNumberUnsigned+0xae>
   811c4:	210a      	movs	r1, #10
   811c6:	47c0      	blx	r8
   811c8:	e01f      	b.n	8120a <UnityPrintNumberUnsigned+0xae>
   811ca:	fbb7 f1f4 	udiv	r1, r7, r4
   811ce:	fba5 e001 	umull	lr, r0, r5, r1
   811d2:	08c0      	lsrs	r0, r0, #3
   811d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811d8:	eba1 0140 	sub.w	r1, r1, r0, lsl #1
   811dc:	3130      	adds	r1, #48	; 0x30
   811de:	4618      	mov	r0, r3
   811e0:	b2c9      	uxtb	r1, r1
   811e2:	47c0      	blx	r8
   811e4:	e011      	b.n	8120a <UnityPrintNumberUnsigned+0xae>
   811e6:	689b      	ldr	r3, [r3, #8]
   811e8:	6819      	ldr	r1, [r3, #0]
   811ea:	fbb7 f3f4 	udiv	r3, r7, r4
   811ee:	fba5 0203 	umull	r0, r2, r5, r3
   811f2:	08d2      	lsrs	r2, r2, #3
   811f4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   811f8:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   811fc:	3330      	adds	r3, #48	; 0x30
   811fe:	700b      	strb	r3, [r1, #0]
   81200:	6833      	ldr	r3, [r6, #0]
   81202:	689b      	ldr	r3, [r3, #8]
   81204:	681a      	ldr	r2, [r3, #0]
   81206:	3201      	adds	r2, #1
   81208:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   8120a:	fba5 3404 	umull	r3, r4, r5, r4
    }
    while (divisor > 0);
   8120e:	08e4      	lsrs	r4, r4, #3
   81210:	d1b7      	bne.n	81182 <UnityPrintNumberUnsigned+0x26>
}
   81212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81216:	bf00      	nop
   81218:	20070560 	.word	0x20070560
   8121c:	cccccccd 	.word	0xcccccccd
   81220:	0008354d 	.word	0x0008354d

00081224 <UnityPrintNumberHex>:

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   81224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81228:	4606      	mov	r6, r0
   8122a:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   8122c:	4b5e      	ldr	r3, [pc, #376]	; (813a8 <UnityPrintNumberHex+0x184>)
   8122e:	6818      	ldr	r0, [r3, #0]
   81230:	6882      	ldr	r2, [r0, #8]
   81232:	6893      	ldr	r3, [r2, #8]
   81234:	3b01      	subs	r3, #1
   81236:	6093      	str	r3, [r2, #8]
   81238:	2b00      	cmp	r3, #0
   8123a:	da19      	bge.n	81270 <UnityPrintNumberHex+0x4c>
   8123c:	6882      	ldr	r2, [r0, #8]
   8123e:	6891      	ldr	r1, [r2, #8]
   81240:	6993      	ldr	r3, [r2, #24]
   81242:	4299      	cmp	r1, r3
   81244:	db10      	blt.n	81268 <UnityPrintNumberHex+0x44>
   81246:	6813      	ldr	r3, [r2, #0]
   81248:	2230      	movs	r2, #48	; 0x30
   8124a:	701a      	strb	r2, [r3, #0]
   8124c:	4b56      	ldr	r3, [pc, #344]	; (813a8 <UnityPrintNumberHex+0x184>)
   8124e:	6818      	ldr	r0, [r3, #0]
   81250:	6882      	ldr	r2, [r0, #8]
   81252:	6813      	ldr	r3, [r2, #0]
   81254:	7819      	ldrb	r1, [r3, #0]
   81256:	290a      	cmp	r1, #10
   81258:	d002      	beq.n	81260 <UnityPrintNumberHex+0x3c>
   8125a:	3301      	adds	r3, #1
   8125c:	6013      	str	r3, [r2, #0]
   8125e:	e011      	b.n	81284 <UnityPrintNumberHex+0x60>
   81260:	210a      	movs	r1, #10
   81262:	4b52      	ldr	r3, [pc, #328]	; (813ac <UnityPrintNumberHex+0x188>)
   81264:	4798      	blx	r3
   81266:	e00d      	b.n	81284 <UnityPrintNumberHex+0x60>
   81268:	2130      	movs	r1, #48	; 0x30
   8126a:	4b50      	ldr	r3, [pc, #320]	; (813ac <UnityPrintNumberHex+0x188>)
   8126c:	4798      	blx	r3
   8126e:	e009      	b.n	81284 <UnityPrintNumberHex+0x60>
   81270:	6883      	ldr	r3, [r0, #8]
   81272:	681b      	ldr	r3, [r3, #0]
   81274:	2230      	movs	r2, #48	; 0x30
   81276:	701a      	strb	r2, [r3, #0]
   81278:	4b4b      	ldr	r3, [pc, #300]	; (813a8 <UnityPrintNumberHex+0x184>)
   8127a:	681b      	ldr	r3, [r3, #0]
   8127c:	689b      	ldr	r3, [r3, #8]
   8127e:	681a      	ldr	r2, [r3, #0]
   81280:	3201      	adds	r2, #1
   81282:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   81284:	4b48      	ldr	r3, [pc, #288]	; (813a8 <UnityPrintNumberHex+0x184>)
   81286:	6818      	ldr	r0, [r3, #0]
   81288:	6882      	ldr	r2, [r0, #8]
   8128a:	6893      	ldr	r3, [r2, #8]
   8128c:	3b01      	subs	r3, #1
   8128e:	6093      	str	r3, [r2, #8]
   81290:	2b00      	cmp	r3, #0
   81292:	da1b      	bge.n	812cc <UnityPrintNumberHex+0xa8>
   81294:	6882      	ldr	r2, [r0, #8]
   81296:	6891      	ldr	r1, [r2, #8]
   81298:	6993      	ldr	r3, [r2, #24]
   8129a:	4299      	cmp	r1, r3
   8129c:	db10      	blt.n	812c0 <UnityPrintNumberHex+0x9c>
   8129e:	6813      	ldr	r3, [r2, #0]
   812a0:	2278      	movs	r2, #120	; 0x78
   812a2:	701a      	strb	r2, [r3, #0]
   812a4:	4b40      	ldr	r3, [pc, #256]	; (813a8 <UnityPrintNumberHex+0x184>)
   812a6:	6818      	ldr	r0, [r3, #0]
   812a8:	6882      	ldr	r2, [r0, #8]
   812aa:	6813      	ldr	r3, [r2, #0]
   812ac:	7819      	ldrb	r1, [r3, #0]
   812ae:	290a      	cmp	r1, #10
   812b0:	d002      	beq.n	812b8 <UnityPrintNumberHex+0x94>
   812b2:	3301      	adds	r3, #1
   812b4:	6013      	str	r3, [r2, #0]
   812b6:	e006      	b.n	812c6 <UnityPrintNumberHex+0xa2>
   812b8:	210a      	movs	r1, #10
   812ba:	4b3c      	ldr	r3, [pc, #240]	; (813ac <UnityPrintNumberHex+0x188>)
   812bc:	4798      	blx	r3
   812be:	e002      	b.n	812c6 <UnityPrintNumberHex+0xa2>
   812c0:	2178      	movs	r1, #120	; 0x78
   812c2:	4b3a      	ldr	r3, [pc, #232]	; (813ac <UnityPrintNumberHex+0x188>)
   812c4:	4798      	blx	r3

    while (nibbles > 0)
   812c6:	b964      	cbnz	r4, 812e2 <UnityPrintNumberHex+0xbe>
   812c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   812cc:	6883      	ldr	r3, [r0, #8]
   812ce:	681b      	ldr	r3, [r3, #0]
   812d0:	2278      	movs	r2, #120	; 0x78
   812d2:	701a      	strb	r2, [r3, #0]
   812d4:	4b34      	ldr	r3, [pc, #208]	; (813a8 <UnityPrintNumberHex+0x184>)
   812d6:	681b      	ldr	r3, [r3, #0]
   812d8:	689b      	ldr	r3, [r3, #8]
   812da:	681a      	ldr	r2, [r3, #0]
   812dc:	3201      	adds	r2, #1
   812de:	601a      	str	r2, [r3, #0]
   812e0:	e7f1      	b.n	812c6 <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   812e2:	4d31      	ldr	r5, [pc, #196]	; (813a8 <UnityPrintNumberHex+0x184>)
   812e4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 813ac <UnityPrintNumberHex+0x188>
   812e8:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   812ec:	3c01      	subs	r4, #1
   812ee:	b2e4      	uxtb	r4, r4
   812f0:	00a3      	lsls	r3, r4, #2
   812f2:	fa26 f303 	lsr.w	r3, r6, r3
   812f6:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   812fa:	2b09      	cmp	r3, #9
   812fc:	d828      	bhi.n	81350 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   812fe:	6828      	ldr	r0, [r5, #0]
   81300:	6881      	ldr	r1, [r0, #8]
   81302:	688a      	ldr	r2, [r1, #8]
   81304:	3a01      	subs	r2, #1
   81306:	608a      	str	r2, [r1, #8]
   81308:	2a00      	cmp	r2, #0
   8130a:	da17      	bge.n	8133c <UnityPrintNumberHex+0x118>
   8130c:	6882      	ldr	r2, [r0, #8]
   8130e:	6891      	ldr	r1, [r2, #8]
   81310:	6997      	ldr	r7, [r2, #24]
   81312:	42b9      	cmp	r1, r7
   81314:	db0e      	blt.n	81334 <UnityPrintNumberHex+0x110>
   81316:	6812      	ldr	r2, [r2, #0]
   81318:	3330      	adds	r3, #48	; 0x30
   8131a:	7013      	strb	r3, [r2, #0]
   8131c:	6828      	ldr	r0, [r5, #0]
   8131e:	6882      	ldr	r2, [r0, #8]
   81320:	6813      	ldr	r3, [r2, #0]
   81322:	7819      	ldrb	r1, [r3, #0]
   81324:	290a      	cmp	r1, #10
   81326:	d002      	beq.n	8132e <UnityPrintNumberHex+0x10a>
   81328:	3301      	adds	r3, #1
   8132a:	6013      	str	r3, [r2, #0]
   8132c:	e038      	b.n	813a0 <UnityPrintNumberHex+0x17c>
   8132e:	4641      	mov	r1, r8
   81330:	47c8      	blx	r9
   81332:	e035      	b.n	813a0 <UnityPrintNumberHex+0x17c>
   81334:	f103 0130 	add.w	r1, r3, #48	; 0x30
   81338:	47c8      	blx	r9
   8133a:	e031      	b.n	813a0 <UnityPrintNumberHex+0x17c>
   8133c:	6882      	ldr	r2, [r0, #8]
   8133e:	6812      	ldr	r2, [r2, #0]
   81340:	3330      	adds	r3, #48	; 0x30
   81342:	7013      	strb	r3, [r2, #0]
   81344:	682b      	ldr	r3, [r5, #0]
   81346:	689b      	ldr	r3, [r3, #8]
   81348:	681a      	ldr	r2, [r3, #0]
   8134a:	3201      	adds	r2, #1
   8134c:	601a      	str	r2, [r3, #0]
   8134e:	e027      	b.n	813a0 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   81350:	6828      	ldr	r0, [r5, #0]
   81352:	6881      	ldr	r1, [r0, #8]
   81354:	688a      	ldr	r2, [r1, #8]
   81356:	3a01      	subs	r2, #1
   81358:	608a      	str	r2, [r1, #8]
   8135a:	2a00      	cmp	r2, #0
   8135c:	da17      	bge.n	8138e <UnityPrintNumberHex+0x16a>
   8135e:	6882      	ldr	r2, [r0, #8]
   81360:	6891      	ldr	r1, [r2, #8]
   81362:	6997      	ldr	r7, [r2, #24]
   81364:	42b9      	cmp	r1, r7
   81366:	db0e      	blt.n	81386 <UnityPrintNumberHex+0x162>
   81368:	6812      	ldr	r2, [r2, #0]
   8136a:	3337      	adds	r3, #55	; 0x37
   8136c:	7013      	strb	r3, [r2, #0]
   8136e:	6828      	ldr	r0, [r5, #0]
   81370:	6882      	ldr	r2, [r0, #8]
   81372:	6813      	ldr	r3, [r2, #0]
   81374:	7819      	ldrb	r1, [r3, #0]
   81376:	290a      	cmp	r1, #10
   81378:	d002      	beq.n	81380 <UnityPrintNumberHex+0x15c>
   8137a:	3301      	adds	r3, #1
   8137c:	6013      	str	r3, [r2, #0]
   8137e:	e00f      	b.n	813a0 <UnityPrintNumberHex+0x17c>
   81380:	4641      	mov	r1, r8
   81382:	47c8      	blx	r9
   81384:	e00c      	b.n	813a0 <UnityPrintNumberHex+0x17c>
   81386:	f103 0137 	add.w	r1, r3, #55	; 0x37
   8138a:	47c8      	blx	r9
   8138c:	e008      	b.n	813a0 <UnityPrintNumberHex+0x17c>
   8138e:	6882      	ldr	r2, [r0, #8]
   81390:	6812      	ldr	r2, [r2, #0]
   81392:	3337      	adds	r3, #55	; 0x37
   81394:	7013      	strb	r3, [r2, #0]
   81396:	682b      	ldr	r3, [r5, #0]
   81398:	689b      	ldr	r3, [r3, #8]
   8139a:	681a      	ldr	r2, [r3, #0]
   8139c:	3201      	adds	r2, #1
   8139e:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   813a0:	2c00      	cmp	r4, #0
   813a2:	d1a3      	bne.n	812ec <UnityPrintNumberHex+0xc8>
   813a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   813a8:	20070560 	.word	0x20070560
   813ac:	0008354d 	.word	0x0008354d

000813b0 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   813b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   813b2:	2800      	cmp	r0, #0
   813b4:	f000 810a 	beq.w	815cc <UnityPrint+0x21c>
    {
        while (*pch)
   813b8:	7803      	ldrb	r3, [r0, #0]
   813ba:	2b00      	cmp	r3, #0
   813bc:	f000 8106 	beq.w	815cc <UnityPrint+0x21c>
   813c0:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   813c2:	4d83      	ldr	r5, [pc, #524]	; (815d0 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   813c4:	4e83      	ldr	r6, [pc, #524]	; (815d4 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   813c6:	4f84      	ldr	r7, [pc, #528]	; (815d8 <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   813c8:	f1a3 0220 	sub.w	r2, r3, #32
   813cc:	b2d2      	uxtb	r2, r2
   813ce:	2a5e      	cmp	r2, #94	; 0x5e
   813d0:	d82a      	bhi.n	81428 <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   813d2:	6828      	ldr	r0, [r5, #0]
   813d4:	6882      	ldr	r2, [r0, #8]
   813d6:	6893      	ldr	r3, [r2, #8]
   813d8:	3b01      	subs	r3, #1
   813da:	6093      	str	r3, [r2, #8]
   813dc:	2b00      	cmp	r3, #0
   813de:	da18      	bge.n	81412 <UnityPrint+0x62>
   813e0:	6882      	ldr	r2, [r0, #8]
   813e2:	6891      	ldr	r1, [r2, #8]
   813e4:	6993      	ldr	r3, [r2, #24]
   813e6:	4299      	cmp	r1, r3
   813e8:	db0f      	blt.n	8140a <UnityPrint+0x5a>
   813ea:	6813      	ldr	r3, [r2, #0]
   813ec:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   813f0:	701a      	strb	r2, [r3, #0]
   813f2:	6828      	ldr	r0, [r5, #0]
   813f4:	6882      	ldr	r2, [r0, #8]
   813f6:	6813      	ldr	r3, [r2, #0]
   813f8:	7819      	ldrb	r1, [r3, #0]
   813fa:	290a      	cmp	r1, #10
   813fc:	d002      	beq.n	81404 <UnityPrint+0x54>
   813fe:	3301      	adds	r3, #1
   81400:	6013      	str	r3, [r2, #0]
   81402:	e0de      	b.n	815c2 <UnityPrint+0x212>
   81404:	210a      	movs	r1, #10
   81406:	47b8      	blx	r7
   81408:	e0db      	b.n	815c2 <UnityPrint+0x212>
   8140a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   8140e:	47b8      	blx	r7
   81410:	e0d7      	b.n	815c2 <UnityPrint+0x212>
   81412:	6883      	ldr	r3, [r0, #8]
   81414:	681b      	ldr	r3, [r3, #0]
   81416:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   8141a:	701a      	strb	r2, [r3, #0]
   8141c:	682b      	ldr	r3, [r5, #0]
   8141e:	689b      	ldr	r3, [r3, #8]
   81420:	681a      	ldr	r2, [r3, #0]
   81422:	3201      	adds	r2, #1
   81424:	601a      	str	r2, [r3, #0]
   81426:	e0cc      	b.n	815c2 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   81428:	2b0d      	cmp	r3, #13
   8142a:	d14e      	bne.n	814ca <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   8142c:	6828      	ldr	r0, [r5, #0]
   8142e:	6882      	ldr	r2, [r0, #8]
   81430:	6893      	ldr	r3, [r2, #8]
   81432:	3b01      	subs	r3, #1
   81434:	6093      	str	r3, [r2, #8]
   81436:	2b00      	cmp	r3, #0
   81438:	da16      	bge.n	81468 <UnityPrint+0xb8>
   8143a:	6882      	ldr	r2, [r0, #8]
   8143c:	6891      	ldr	r1, [r2, #8]
   8143e:	6993      	ldr	r3, [r2, #24]
   81440:	4299      	cmp	r1, r3
   81442:	db0e      	blt.n	81462 <UnityPrint+0xb2>
   81444:	6813      	ldr	r3, [r2, #0]
   81446:	225c      	movs	r2, #92	; 0x5c
   81448:	701a      	strb	r2, [r3, #0]
   8144a:	6828      	ldr	r0, [r5, #0]
   8144c:	6882      	ldr	r2, [r0, #8]
   8144e:	6813      	ldr	r3, [r2, #0]
   81450:	7819      	ldrb	r1, [r3, #0]
   81452:	290a      	cmp	r1, #10
   81454:	d002      	beq.n	8145c <UnityPrint+0xac>
   81456:	3301      	adds	r3, #1
   81458:	6013      	str	r3, [r2, #0]
   8145a:	e00e      	b.n	8147a <UnityPrint+0xca>
   8145c:	210a      	movs	r1, #10
   8145e:	47b8      	blx	r7
   81460:	e00b      	b.n	8147a <UnityPrint+0xca>
   81462:	215c      	movs	r1, #92	; 0x5c
   81464:	47b8      	blx	r7
   81466:	e008      	b.n	8147a <UnityPrint+0xca>
   81468:	6883      	ldr	r3, [r0, #8]
   8146a:	681b      	ldr	r3, [r3, #0]
   8146c:	225c      	movs	r2, #92	; 0x5c
   8146e:	701a      	strb	r2, [r3, #0]
   81470:	682b      	ldr	r3, [r5, #0]
   81472:	689b      	ldr	r3, [r3, #8]
   81474:	681a      	ldr	r2, [r3, #0]
   81476:	3201      	adds	r2, #1
   81478:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   8147a:	6828      	ldr	r0, [r5, #0]
   8147c:	6882      	ldr	r2, [r0, #8]
   8147e:	6893      	ldr	r3, [r2, #8]
   81480:	3b01      	subs	r3, #1
   81482:	6093      	str	r3, [r2, #8]
   81484:	2b00      	cmp	r3, #0
   81486:	da16      	bge.n	814b6 <UnityPrint+0x106>
   81488:	6882      	ldr	r2, [r0, #8]
   8148a:	6891      	ldr	r1, [r2, #8]
   8148c:	6993      	ldr	r3, [r2, #24]
   8148e:	4299      	cmp	r1, r3
   81490:	db0e      	blt.n	814b0 <UnityPrint+0x100>
   81492:	6813      	ldr	r3, [r2, #0]
   81494:	2272      	movs	r2, #114	; 0x72
   81496:	701a      	strb	r2, [r3, #0]
   81498:	6828      	ldr	r0, [r5, #0]
   8149a:	6882      	ldr	r2, [r0, #8]
   8149c:	6813      	ldr	r3, [r2, #0]
   8149e:	7819      	ldrb	r1, [r3, #0]
   814a0:	290a      	cmp	r1, #10
   814a2:	d002      	beq.n	814aa <UnityPrint+0xfa>
   814a4:	3301      	adds	r3, #1
   814a6:	6013      	str	r3, [r2, #0]
   814a8:	e08b      	b.n	815c2 <UnityPrint+0x212>
   814aa:	210a      	movs	r1, #10
   814ac:	47b8      	blx	r7
   814ae:	e088      	b.n	815c2 <UnityPrint+0x212>
   814b0:	2172      	movs	r1, #114	; 0x72
   814b2:	47b8      	blx	r7
   814b4:	e085      	b.n	815c2 <UnityPrint+0x212>
   814b6:	6883      	ldr	r3, [r0, #8]
   814b8:	681b      	ldr	r3, [r3, #0]
   814ba:	2272      	movs	r2, #114	; 0x72
   814bc:	701a      	strb	r2, [r3, #0]
   814be:	682b      	ldr	r3, [r5, #0]
   814c0:	689b      	ldr	r3, [r3, #8]
   814c2:	681a      	ldr	r2, [r3, #0]
   814c4:	3201      	adds	r2, #1
   814c6:	601a      	str	r2, [r3, #0]
   814c8:	e07b      	b.n	815c2 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   814ca:	2b0a      	cmp	r3, #10
   814cc:	d14e      	bne.n	8156c <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   814ce:	6828      	ldr	r0, [r5, #0]
   814d0:	6882      	ldr	r2, [r0, #8]
   814d2:	6893      	ldr	r3, [r2, #8]
   814d4:	3b01      	subs	r3, #1
   814d6:	6093      	str	r3, [r2, #8]
   814d8:	2b00      	cmp	r3, #0
   814da:	da16      	bge.n	8150a <UnityPrint+0x15a>
   814dc:	6882      	ldr	r2, [r0, #8]
   814de:	6891      	ldr	r1, [r2, #8]
   814e0:	6993      	ldr	r3, [r2, #24]
   814e2:	4299      	cmp	r1, r3
   814e4:	db0e      	blt.n	81504 <UnityPrint+0x154>
   814e6:	6813      	ldr	r3, [r2, #0]
   814e8:	225c      	movs	r2, #92	; 0x5c
   814ea:	701a      	strb	r2, [r3, #0]
   814ec:	6828      	ldr	r0, [r5, #0]
   814ee:	6882      	ldr	r2, [r0, #8]
   814f0:	6813      	ldr	r3, [r2, #0]
   814f2:	7819      	ldrb	r1, [r3, #0]
   814f4:	290a      	cmp	r1, #10
   814f6:	d002      	beq.n	814fe <UnityPrint+0x14e>
   814f8:	3301      	adds	r3, #1
   814fa:	6013      	str	r3, [r2, #0]
   814fc:	e00e      	b.n	8151c <UnityPrint+0x16c>
   814fe:	210a      	movs	r1, #10
   81500:	47b8      	blx	r7
   81502:	e00b      	b.n	8151c <UnityPrint+0x16c>
   81504:	215c      	movs	r1, #92	; 0x5c
   81506:	47b8      	blx	r7
   81508:	e008      	b.n	8151c <UnityPrint+0x16c>
   8150a:	6883      	ldr	r3, [r0, #8]
   8150c:	681b      	ldr	r3, [r3, #0]
   8150e:	225c      	movs	r2, #92	; 0x5c
   81510:	701a      	strb	r2, [r3, #0]
   81512:	682b      	ldr	r3, [r5, #0]
   81514:	689b      	ldr	r3, [r3, #8]
   81516:	681a      	ldr	r2, [r3, #0]
   81518:	3201      	adds	r2, #1
   8151a:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   8151c:	6828      	ldr	r0, [r5, #0]
   8151e:	6882      	ldr	r2, [r0, #8]
   81520:	6893      	ldr	r3, [r2, #8]
   81522:	3b01      	subs	r3, #1
   81524:	6093      	str	r3, [r2, #8]
   81526:	2b00      	cmp	r3, #0
   81528:	da16      	bge.n	81558 <UnityPrint+0x1a8>
   8152a:	6882      	ldr	r2, [r0, #8]
   8152c:	6891      	ldr	r1, [r2, #8]
   8152e:	6993      	ldr	r3, [r2, #24]
   81530:	4299      	cmp	r1, r3
   81532:	db0e      	blt.n	81552 <UnityPrint+0x1a2>
   81534:	6813      	ldr	r3, [r2, #0]
   81536:	226e      	movs	r2, #110	; 0x6e
   81538:	701a      	strb	r2, [r3, #0]
   8153a:	6828      	ldr	r0, [r5, #0]
   8153c:	6882      	ldr	r2, [r0, #8]
   8153e:	6813      	ldr	r3, [r2, #0]
   81540:	7819      	ldrb	r1, [r3, #0]
   81542:	290a      	cmp	r1, #10
   81544:	d002      	beq.n	8154c <UnityPrint+0x19c>
   81546:	3301      	adds	r3, #1
   81548:	6013      	str	r3, [r2, #0]
   8154a:	e03a      	b.n	815c2 <UnityPrint+0x212>
   8154c:	210a      	movs	r1, #10
   8154e:	47b8      	blx	r7
   81550:	e037      	b.n	815c2 <UnityPrint+0x212>
   81552:	216e      	movs	r1, #110	; 0x6e
   81554:	47b8      	blx	r7
   81556:	e034      	b.n	815c2 <UnityPrint+0x212>
   81558:	6883      	ldr	r3, [r0, #8]
   8155a:	681b      	ldr	r3, [r3, #0]
   8155c:	226e      	movs	r2, #110	; 0x6e
   8155e:	701a      	strb	r2, [r3, #0]
   81560:	682b      	ldr	r3, [r5, #0]
   81562:	689b      	ldr	r3, [r3, #8]
   81564:	681a      	ldr	r2, [r3, #0]
   81566:	3201      	adds	r2, #1
   81568:	601a      	str	r2, [r3, #0]
   8156a:	e02a      	b.n	815c2 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   8156c:	6828      	ldr	r0, [r5, #0]
   8156e:	6882      	ldr	r2, [r0, #8]
   81570:	6893      	ldr	r3, [r2, #8]
   81572:	3b01      	subs	r3, #1
   81574:	6093      	str	r3, [r2, #8]
   81576:	2b00      	cmp	r3, #0
   81578:	da16      	bge.n	815a8 <UnityPrint+0x1f8>
   8157a:	6882      	ldr	r2, [r0, #8]
   8157c:	6891      	ldr	r1, [r2, #8]
   8157e:	6993      	ldr	r3, [r2, #24]
   81580:	4299      	cmp	r1, r3
   81582:	db0e      	blt.n	815a2 <UnityPrint+0x1f2>
   81584:	6813      	ldr	r3, [r2, #0]
   81586:	225c      	movs	r2, #92	; 0x5c
   81588:	701a      	strb	r2, [r3, #0]
   8158a:	6828      	ldr	r0, [r5, #0]
   8158c:	6882      	ldr	r2, [r0, #8]
   8158e:	6813      	ldr	r3, [r2, #0]
   81590:	7819      	ldrb	r1, [r3, #0]
   81592:	290a      	cmp	r1, #10
   81594:	d002      	beq.n	8159c <UnityPrint+0x1ec>
   81596:	3301      	adds	r3, #1
   81598:	6013      	str	r3, [r2, #0]
   8159a:	e00e      	b.n	815ba <UnityPrint+0x20a>
   8159c:	210a      	movs	r1, #10
   8159e:	47b8      	blx	r7
   815a0:	e00b      	b.n	815ba <UnityPrint+0x20a>
   815a2:	215c      	movs	r1, #92	; 0x5c
   815a4:	47b8      	blx	r7
   815a6:	e008      	b.n	815ba <UnityPrint+0x20a>
   815a8:	6883      	ldr	r3, [r0, #8]
   815aa:	681b      	ldr	r3, [r3, #0]
   815ac:	225c      	movs	r2, #92	; 0x5c
   815ae:	701a      	strb	r2, [r3, #0]
   815b0:	682b      	ldr	r3, [r5, #0]
   815b2:	689b      	ldr	r3, [r3, #8]
   815b4:	681a      	ldr	r2, [r3, #0]
   815b6:	3201      	adds	r2, #1
   815b8:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   815ba:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   815be:	2102      	movs	r1, #2
   815c0:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   815c2:	f814 3b01 	ldrb.w	r3, [r4], #1
   815c6:	2b00      	cmp	r3, #0
   815c8:	f47f aefe 	bne.w	813c8 <UnityPrint+0x18>
   815cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   815ce:	bf00      	nop
   815d0:	20070560 	.word	0x20070560
   815d4:	00081225 	.word	0x00081225
   815d8:	0008354d 	.word	0x0008354d

000815dc <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   815dc:	b538      	push	{r3, r4, r5, lr}
   815de:	460d      	mov	r5, r1
    UnityPrint(file);
   815e0:	4b46      	ldr	r3, [pc, #280]	; (816fc <UnityTestResultsBegin+0x120>)
   815e2:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   815e4:	4b46      	ldr	r3, [pc, #280]	; (81700 <UnityTestResultsBegin+0x124>)
   815e6:	6818      	ldr	r0, [r3, #0]
   815e8:	6884      	ldr	r4, [r0, #8]
   815ea:	68a2      	ldr	r2, [r4, #8]
   815ec:	3a01      	subs	r2, #1
   815ee:	60a2      	str	r2, [r4, #8]
   815f0:	2a00      	cmp	r2, #0
   815f2:	da19      	bge.n	81628 <UnityTestResultsBegin+0x4c>
   815f4:	6882      	ldr	r2, [r0, #8]
   815f6:	6893      	ldr	r3, [r2, #8]
   815f8:	6991      	ldr	r1, [r2, #24]
   815fa:	428b      	cmp	r3, r1
   815fc:	db10      	blt.n	81620 <UnityTestResultsBegin+0x44>
   815fe:	6813      	ldr	r3, [r2, #0]
   81600:	223a      	movs	r2, #58	; 0x3a
   81602:	701a      	strb	r2, [r3, #0]
   81604:	4b3e      	ldr	r3, [pc, #248]	; (81700 <UnityTestResultsBegin+0x124>)
   81606:	6818      	ldr	r0, [r3, #0]
   81608:	6882      	ldr	r2, [r0, #8]
   8160a:	6813      	ldr	r3, [r2, #0]
   8160c:	7819      	ldrb	r1, [r3, #0]
   8160e:	290a      	cmp	r1, #10
   81610:	d002      	beq.n	81618 <UnityTestResultsBegin+0x3c>
   81612:	3301      	adds	r3, #1
   81614:	6013      	str	r3, [r2, #0]
   81616:	e011      	b.n	8163c <UnityTestResultsBegin+0x60>
   81618:	210a      	movs	r1, #10
   8161a:	4b3a      	ldr	r3, [pc, #232]	; (81704 <UnityTestResultsBegin+0x128>)
   8161c:	4798      	blx	r3
   8161e:	e00d      	b.n	8163c <UnityTestResultsBegin+0x60>
   81620:	213a      	movs	r1, #58	; 0x3a
   81622:	4b38      	ldr	r3, [pc, #224]	; (81704 <UnityTestResultsBegin+0x128>)
   81624:	4798      	blx	r3
   81626:	e009      	b.n	8163c <UnityTestResultsBegin+0x60>
   81628:	6883      	ldr	r3, [r0, #8]
   8162a:	681b      	ldr	r3, [r3, #0]
   8162c:	223a      	movs	r2, #58	; 0x3a
   8162e:	701a      	strb	r2, [r3, #0]
   81630:	4b33      	ldr	r3, [pc, #204]	; (81700 <UnityTestResultsBegin+0x124>)
   81632:	681b      	ldr	r3, [r3, #0]
   81634:	689b      	ldr	r3, [r3, #8]
   81636:	681a      	ldr	r2, [r3, #0]
   81638:	3201      	adds	r2, #1
   8163a:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   8163c:	4628      	mov	r0, r5
   8163e:	4b32      	ldr	r3, [pc, #200]	; (81708 <UnityTestResultsBegin+0x12c>)
   81640:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81642:	4b2f      	ldr	r3, [pc, #188]	; (81700 <UnityTestResultsBegin+0x124>)
   81644:	6818      	ldr	r0, [r3, #0]
   81646:	6882      	ldr	r2, [r0, #8]
   81648:	6893      	ldr	r3, [r2, #8]
   8164a:	3b01      	subs	r3, #1
   8164c:	6093      	str	r3, [r2, #8]
   8164e:	2b00      	cmp	r3, #0
   81650:	da19      	bge.n	81686 <UnityTestResultsBegin+0xaa>
   81652:	6882      	ldr	r2, [r0, #8]
   81654:	6891      	ldr	r1, [r2, #8]
   81656:	6993      	ldr	r3, [r2, #24]
   81658:	4299      	cmp	r1, r3
   8165a:	db10      	blt.n	8167e <UnityTestResultsBegin+0xa2>
   8165c:	6813      	ldr	r3, [r2, #0]
   8165e:	223a      	movs	r2, #58	; 0x3a
   81660:	701a      	strb	r2, [r3, #0]
   81662:	4b27      	ldr	r3, [pc, #156]	; (81700 <UnityTestResultsBegin+0x124>)
   81664:	6818      	ldr	r0, [r3, #0]
   81666:	6882      	ldr	r2, [r0, #8]
   81668:	6813      	ldr	r3, [r2, #0]
   8166a:	7819      	ldrb	r1, [r3, #0]
   8166c:	290a      	cmp	r1, #10
   8166e:	d002      	beq.n	81676 <UnityTestResultsBegin+0x9a>
   81670:	3301      	adds	r3, #1
   81672:	6013      	str	r3, [r2, #0]
   81674:	e011      	b.n	8169a <UnityTestResultsBegin+0xbe>
   81676:	210a      	movs	r1, #10
   81678:	4b22      	ldr	r3, [pc, #136]	; (81704 <UnityTestResultsBegin+0x128>)
   8167a:	4798      	blx	r3
   8167c:	e00d      	b.n	8169a <UnityTestResultsBegin+0xbe>
   8167e:	213a      	movs	r1, #58	; 0x3a
   81680:	4b20      	ldr	r3, [pc, #128]	; (81704 <UnityTestResultsBegin+0x128>)
   81682:	4798      	blx	r3
   81684:	e009      	b.n	8169a <UnityTestResultsBegin+0xbe>
   81686:	6883      	ldr	r3, [r0, #8]
   81688:	681b      	ldr	r3, [r3, #0]
   8168a:	223a      	movs	r2, #58	; 0x3a
   8168c:	701a      	strb	r2, [r3, #0]
   8168e:	4b1c      	ldr	r3, [pc, #112]	; (81700 <UnityTestResultsBegin+0x124>)
   81690:	681b      	ldr	r3, [r3, #0]
   81692:	689b      	ldr	r3, [r3, #8]
   81694:	681a      	ldr	r2, [r3, #0]
   81696:	3201      	adds	r2, #1
   81698:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   8169a:	4b1c      	ldr	r3, [pc, #112]	; (8170c <UnityTestResultsBegin+0x130>)
   8169c:	6858      	ldr	r0, [r3, #4]
   8169e:	4b17      	ldr	r3, [pc, #92]	; (816fc <UnityTestResultsBegin+0x120>)
   816a0:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   816a2:	4b17      	ldr	r3, [pc, #92]	; (81700 <UnityTestResultsBegin+0x124>)
   816a4:	6818      	ldr	r0, [r3, #0]
   816a6:	6882      	ldr	r2, [r0, #8]
   816a8:	6893      	ldr	r3, [r2, #8]
   816aa:	3b01      	subs	r3, #1
   816ac:	6093      	str	r3, [r2, #8]
   816ae:	2b00      	cmp	r3, #0
   816b0:	da19      	bge.n	816e6 <UnityTestResultsBegin+0x10a>
   816b2:	6882      	ldr	r2, [r0, #8]
   816b4:	6891      	ldr	r1, [r2, #8]
   816b6:	6993      	ldr	r3, [r2, #24]
   816b8:	4299      	cmp	r1, r3
   816ba:	db10      	blt.n	816de <UnityTestResultsBegin+0x102>
   816bc:	6813      	ldr	r3, [r2, #0]
   816be:	223a      	movs	r2, #58	; 0x3a
   816c0:	701a      	strb	r2, [r3, #0]
   816c2:	4b0f      	ldr	r3, [pc, #60]	; (81700 <UnityTestResultsBegin+0x124>)
   816c4:	6818      	ldr	r0, [r3, #0]
   816c6:	6882      	ldr	r2, [r0, #8]
   816c8:	6813      	ldr	r3, [r2, #0]
   816ca:	7819      	ldrb	r1, [r3, #0]
   816cc:	290a      	cmp	r1, #10
   816ce:	d002      	beq.n	816d6 <UnityTestResultsBegin+0xfa>
   816d0:	3301      	adds	r3, #1
   816d2:	6013      	str	r3, [r2, #0]
   816d4:	bd38      	pop	{r3, r4, r5, pc}
   816d6:	210a      	movs	r1, #10
   816d8:	4b0a      	ldr	r3, [pc, #40]	; (81704 <UnityTestResultsBegin+0x128>)
   816da:	4798      	blx	r3
   816dc:	bd38      	pop	{r3, r4, r5, pc}
   816de:	213a      	movs	r1, #58	; 0x3a
   816e0:	4b08      	ldr	r3, [pc, #32]	; (81704 <UnityTestResultsBegin+0x128>)
   816e2:	4798      	blx	r3
   816e4:	bd38      	pop	{r3, r4, r5, pc}
   816e6:	6883      	ldr	r3, [r0, #8]
   816e8:	681b      	ldr	r3, [r3, #0]
   816ea:	223a      	movs	r2, #58	; 0x3a
   816ec:	701a      	strb	r2, [r3, #0]
   816ee:	4b04      	ldr	r3, [pc, #16]	; (81700 <UnityTestResultsBegin+0x124>)
   816f0:	681b      	ldr	r3, [r3, #0]
   816f2:	689b      	ldr	r3, [r3, #8]
   816f4:	681a      	ldr	r2, [r3, #0]
   816f6:	3201      	adds	r2, #1
   816f8:	601a      	str	r2, [r3, #0]
   816fa:	bd38      	pop	{r3, r4, r5, pc}
   816fc:	000813b1 	.word	0x000813b1
   81700:	20070560 	.word	0x20070560
   81704:	0008354d 	.word	0x0008354d
   81708:	00080fc1 	.word	0x00080fc1
   8170c:	20070b0c 	.word	0x20070b0c

00081710 <UnityTestResultsFailBegin>:
}

//-----------------------------------------------
static void UnityTestResultsFailBegin(const UNITY_LINE_TYPE line)
{
   81710:	b508      	push	{r3, lr}
   81712:	4601      	mov	r1, r0
    UnityTestResultsBegin(Unity.TestFile, line);
   81714:	4b19      	ldr	r3, [pc, #100]	; (8177c <UnityTestResultsFailBegin+0x6c>)
   81716:	6818      	ldr	r0, [r3, #0]
   81718:	4b19      	ldr	r3, [pc, #100]	; (81780 <UnityTestResultsFailBegin+0x70>)
   8171a:	4798      	blx	r3
    UnityPrint(UnityStrFail);
   8171c:	4819      	ldr	r0, [pc, #100]	; (81784 <UnityTestResultsFailBegin+0x74>)
   8171e:	4b1a      	ldr	r3, [pc, #104]	; (81788 <UnityTestResultsFailBegin+0x78>)
   81720:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   81722:	4b1a      	ldr	r3, [pc, #104]	; (8178c <UnityTestResultsFailBegin+0x7c>)
   81724:	6818      	ldr	r0, [r3, #0]
   81726:	6882      	ldr	r2, [r0, #8]
   81728:	6893      	ldr	r3, [r2, #8]
   8172a:	3b01      	subs	r3, #1
   8172c:	6093      	str	r3, [r2, #8]
   8172e:	2b00      	cmp	r3, #0
   81730:	da19      	bge.n	81766 <UnityTestResultsFailBegin+0x56>
   81732:	6882      	ldr	r2, [r0, #8]
   81734:	6891      	ldr	r1, [r2, #8]
   81736:	6993      	ldr	r3, [r2, #24]
   81738:	4299      	cmp	r1, r3
   8173a:	db10      	blt.n	8175e <UnityTestResultsFailBegin+0x4e>
   8173c:	6813      	ldr	r3, [r2, #0]
   8173e:	223a      	movs	r2, #58	; 0x3a
   81740:	701a      	strb	r2, [r3, #0]
   81742:	4b12      	ldr	r3, [pc, #72]	; (8178c <UnityTestResultsFailBegin+0x7c>)
   81744:	6818      	ldr	r0, [r3, #0]
   81746:	6882      	ldr	r2, [r0, #8]
   81748:	6813      	ldr	r3, [r2, #0]
   8174a:	7819      	ldrb	r1, [r3, #0]
   8174c:	290a      	cmp	r1, #10
   8174e:	d002      	beq.n	81756 <UnityTestResultsFailBegin+0x46>
   81750:	3301      	adds	r3, #1
   81752:	6013      	str	r3, [r2, #0]
   81754:	bd08      	pop	{r3, pc}
   81756:	210a      	movs	r1, #10
   81758:	4b0d      	ldr	r3, [pc, #52]	; (81790 <UnityTestResultsFailBegin+0x80>)
   8175a:	4798      	blx	r3
   8175c:	bd08      	pop	{r3, pc}
   8175e:	213a      	movs	r1, #58	; 0x3a
   81760:	4b0b      	ldr	r3, [pc, #44]	; (81790 <UnityTestResultsFailBegin+0x80>)
   81762:	4798      	blx	r3
   81764:	bd08      	pop	{r3, pc}
   81766:	6883      	ldr	r3, [r0, #8]
   81768:	681b      	ldr	r3, [r3, #0]
   8176a:	223a      	movs	r2, #58	; 0x3a
   8176c:	701a      	strb	r2, [r3, #0]
   8176e:	4b07      	ldr	r3, [pc, #28]	; (8178c <UnityTestResultsFailBegin+0x7c>)
   81770:	681b      	ldr	r3, [r3, #0]
   81772:	689b      	ldr	r3, [r3, #8]
   81774:	681a      	ldr	r2, [r3, #0]
   81776:	3201      	adds	r2, #1
   81778:	601a      	str	r2, [r3, #0]
   8177a:	bd08      	pop	{r3, pc}
   8177c:	20070b0c 	.word	0x20070b0c
   81780:	000815dd 	.word	0x000815dd
   81784:	00085824 	.word	0x00085824
   81788:	000813b1 	.word	0x000813b1
   8178c:	20070560 	.word	0x20070560
   81790:	0008354d 	.word	0x0008354d

00081794 <UnityAddMsgIfSpecified>:
    UNITY_PRINT_EOL;
}

//-----------------------------------------------
static void UnityAddMsgIfSpecified(const char* msg)
{
   81794:	b538      	push	{r3, r4, r5, lr}
    if (msg)
   81796:	4605      	mov	r5, r0
   81798:	b120      	cbz	r0, 817a4 <UnityAddMsgIfSpecified+0x10>
    {
        UnityPrint(UnityStrSpacer);
   8179a:	4803      	ldr	r0, [pc, #12]	; (817a8 <UnityAddMsgIfSpecified+0x14>)
   8179c:	4c03      	ldr	r4, [pc, #12]	; (817ac <UnityAddMsgIfSpecified+0x18>)
   8179e:	47a0      	blx	r4
        UnityPrint(msg);
   817a0:	4628      	mov	r0, r5
   817a2:	47a0      	blx	r4
   817a4:	bd38      	pop	{r3, r4, r5, pc}
   817a6:	bf00      	nop
   817a8:	00085818 	.word	0x00085818
   817ac:	000813b1 	.word	0x000813b1

000817b0 <UnityPrintNumberByStyle>:
    }
}

//-----------------------------------------------
void UnityPrintNumberByStyle(const _U_SINT number, const UNITY_DISPLAY_STYLE_T style)
{
   817b0:	b508      	push	{r3, lr}
    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   817b2:	f011 0f10 	tst.w	r1, #16
   817b6:	d002      	beq.n	817be <UnityPrintNumberByStyle+0xe>
    {
        UnityPrintNumber(number);
   817b8:	4b0a      	ldr	r3, [pc, #40]	; (817e4 <UnityPrintNumberByStyle+0x34>)
   817ba:	4798      	blx	r3
   817bc:	bd08      	pop	{r3, pc}
    }
    else if ((style & UNITY_DISPLAY_RANGE_UINT) == UNITY_DISPLAY_RANGE_UINT)
   817be:	f011 0f20 	tst.w	r1, #32
   817c2:	d009      	beq.n	817d8 <UnityPrintNumberByStyle+0x28>
    {
        UnityPrintNumberUnsigned(  (_U_UINT)number  &  UnitySizeMask[((_U_UINT)style & (_U_UINT)0x0F) - 1]  );
   817c4:	f001 010f 	and.w	r1, r1, #15
   817c8:	3901      	subs	r1, #1
   817ca:	4b07      	ldr	r3, [pc, #28]	; (817e8 <UnityPrintNumberByStyle+0x38>)
   817cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   817d0:	4018      	ands	r0, r3
   817d2:	4b06      	ldr	r3, [pc, #24]	; (817ec <UnityPrintNumberByStyle+0x3c>)
   817d4:	4798      	blx	r3
   817d6:	bd08      	pop	{r3, pc}
    }
    else
    {
        UnityPrintNumberHex((_U_UINT)number, (char)((style & 0x000F) << 1));
   817d8:	f001 010f 	and.w	r1, r1, #15
   817dc:	0049      	lsls	r1, r1, #1
   817de:	4b04      	ldr	r3, [pc, #16]	; (817f0 <UnityPrintNumberByStyle+0x40>)
   817e0:	4798      	blx	r3
   817e2:	bd08      	pop	{r3, pc}
   817e4:	00080fc1 	.word	0x00080fc1
   817e8:	000857f8 	.word	0x000857f8
   817ec:	0008115d 	.word	0x0008115d
   817f0:	00081225 	.word	0x00081225

000817f4 <UnityPrintMask>:
    }
}

//-----------------------------------------------
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
   817f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   817f8:	4607      	mov	r7, r0
   817fa:	4688      	mov	r8, r1
   817fc:	2520      	movs	r5, #32
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
   817fe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
                UNITY_OUTPUT_CHAR('0');
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   81802:	4e43      	ldr	r6, [pc, #268]	; (81910 <UnityPrintMask+0x11c>)
   81804:	f04f 0958 	mov.w	r9, #88	; 0x58
   81808:	f8df a108 	ldr.w	sl, [pc, #264]	; 81914 <UnityPrintMask+0x120>
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
    {
        if (current_bit & mask)
   8180c:	423c      	tst	r4, r7
   8180e:	d052      	beq.n	818b6 <UnityPrintMask+0xc2>
        {
            if (current_bit & number)
   81810:	ea14 0f08 	tst.w	r4, r8
   81814:	d027      	beq.n	81866 <UnityPrintMask+0x72>
            {
                UNITY_OUTPUT_CHAR('1');
   81816:	6830      	ldr	r0, [r6, #0]
   81818:	6882      	ldr	r2, [r0, #8]
   8181a:	6893      	ldr	r3, [r2, #8]
   8181c:	3b01      	subs	r3, #1
   8181e:	6093      	str	r3, [r2, #8]
   81820:	2b00      	cmp	r3, #0
   81822:	da16      	bge.n	81852 <UnityPrintMask+0x5e>
   81824:	6882      	ldr	r2, [r0, #8]
   81826:	6891      	ldr	r1, [r2, #8]
   81828:	6993      	ldr	r3, [r2, #24]
   8182a:	4299      	cmp	r1, r3
   8182c:	db0e      	blt.n	8184c <UnityPrintMask+0x58>
   8182e:	6813      	ldr	r3, [r2, #0]
   81830:	2231      	movs	r2, #49	; 0x31
   81832:	701a      	strb	r2, [r3, #0]
   81834:	6830      	ldr	r0, [r6, #0]
   81836:	6882      	ldr	r2, [r0, #8]
   81838:	6813      	ldr	r3, [r2, #0]
   8183a:	7819      	ldrb	r1, [r3, #0]
   8183c:	290a      	cmp	r1, #10
   8183e:	d002      	beq.n	81846 <UnityPrintMask+0x52>
   81840:	3301      	adds	r3, #1
   81842:	6013      	str	r3, [r2, #0]
   81844:	e05e      	b.n	81904 <UnityPrintMask+0x110>
   81846:	210a      	movs	r1, #10
   81848:	47d0      	blx	sl
   8184a:	e05b      	b.n	81904 <UnityPrintMask+0x110>
   8184c:	2131      	movs	r1, #49	; 0x31
   8184e:	47d0      	blx	sl
   81850:	e058      	b.n	81904 <UnityPrintMask+0x110>
   81852:	6883      	ldr	r3, [r0, #8]
   81854:	681b      	ldr	r3, [r3, #0]
   81856:	2231      	movs	r2, #49	; 0x31
   81858:	701a      	strb	r2, [r3, #0]
   8185a:	6833      	ldr	r3, [r6, #0]
   8185c:	689b      	ldr	r3, [r3, #8]
   8185e:	681a      	ldr	r2, [r3, #0]
   81860:	3201      	adds	r2, #1
   81862:	601a      	str	r2, [r3, #0]
   81864:	e04e      	b.n	81904 <UnityPrintMask+0x110>
            }
            else
            {
                UNITY_OUTPUT_CHAR('0');
   81866:	6830      	ldr	r0, [r6, #0]
   81868:	6882      	ldr	r2, [r0, #8]
   8186a:	6893      	ldr	r3, [r2, #8]
   8186c:	3b01      	subs	r3, #1
   8186e:	6093      	str	r3, [r2, #8]
   81870:	2b00      	cmp	r3, #0
   81872:	da16      	bge.n	818a2 <UnityPrintMask+0xae>
   81874:	6882      	ldr	r2, [r0, #8]
   81876:	6891      	ldr	r1, [r2, #8]
   81878:	6993      	ldr	r3, [r2, #24]
   8187a:	4299      	cmp	r1, r3
   8187c:	db0e      	blt.n	8189c <UnityPrintMask+0xa8>
   8187e:	6813      	ldr	r3, [r2, #0]
   81880:	2230      	movs	r2, #48	; 0x30
   81882:	701a      	strb	r2, [r3, #0]
   81884:	6830      	ldr	r0, [r6, #0]
   81886:	6882      	ldr	r2, [r0, #8]
   81888:	6813      	ldr	r3, [r2, #0]
   8188a:	7819      	ldrb	r1, [r3, #0]
   8188c:	290a      	cmp	r1, #10
   8188e:	d002      	beq.n	81896 <UnityPrintMask+0xa2>
   81890:	3301      	adds	r3, #1
   81892:	6013      	str	r3, [r2, #0]
   81894:	e036      	b.n	81904 <UnityPrintMask+0x110>
   81896:	210a      	movs	r1, #10
   81898:	47d0      	blx	sl
   8189a:	e033      	b.n	81904 <UnityPrintMask+0x110>
   8189c:	2130      	movs	r1, #48	; 0x30
   8189e:	47d0      	blx	sl
   818a0:	e030      	b.n	81904 <UnityPrintMask+0x110>
   818a2:	6883      	ldr	r3, [r0, #8]
   818a4:	681b      	ldr	r3, [r3, #0]
   818a6:	2230      	movs	r2, #48	; 0x30
   818a8:	701a      	strb	r2, [r3, #0]
   818aa:	6833      	ldr	r3, [r6, #0]
   818ac:	689b      	ldr	r3, [r3, #8]
   818ae:	681a      	ldr	r2, [r3, #0]
   818b0:	3201      	adds	r2, #1
   818b2:	601a      	str	r2, [r3, #0]
   818b4:	e026      	b.n	81904 <UnityPrintMask+0x110>
            }
        }
        else
        {
            UNITY_OUTPUT_CHAR('X');
   818b6:	6830      	ldr	r0, [r6, #0]
   818b8:	6882      	ldr	r2, [r0, #8]
   818ba:	6893      	ldr	r3, [r2, #8]
   818bc:	3b01      	subs	r3, #1
   818be:	6093      	str	r3, [r2, #8]
   818c0:	2b00      	cmp	r3, #0
   818c2:	da16      	bge.n	818f2 <UnityPrintMask+0xfe>
   818c4:	6882      	ldr	r2, [r0, #8]
   818c6:	6891      	ldr	r1, [r2, #8]
   818c8:	6993      	ldr	r3, [r2, #24]
   818ca:	4299      	cmp	r1, r3
   818cc:	db0e      	blt.n	818ec <UnityPrintMask+0xf8>
   818ce:	6813      	ldr	r3, [r2, #0]
   818d0:	f883 9000 	strb.w	r9, [r3]
   818d4:	6830      	ldr	r0, [r6, #0]
   818d6:	6882      	ldr	r2, [r0, #8]
   818d8:	6813      	ldr	r3, [r2, #0]
   818da:	7819      	ldrb	r1, [r3, #0]
   818dc:	290a      	cmp	r1, #10
   818de:	d002      	beq.n	818e6 <UnityPrintMask+0xf2>
   818e0:	3301      	adds	r3, #1
   818e2:	6013      	str	r3, [r2, #0]
   818e4:	e00e      	b.n	81904 <UnityPrintMask+0x110>
   818e6:	210a      	movs	r1, #10
   818e8:	47d0      	blx	sl
   818ea:	e00b      	b.n	81904 <UnityPrintMask+0x110>
   818ec:	4649      	mov	r1, r9
   818ee:	47d0      	blx	sl
   818f0:	e008      	b.n	81904 <UnityPrintMask+0x110>
   818f2:	6883      	ldr	r3, [r0, #8]
   818f4:	681b      	ldr	r3, [r3, #0]
   818f6:	f883 9000 	strb.w	r9, [r3]
   818fa:	6833      	ldr	r3, [r6, #0]
   818fc:	689b      	ldr	r3, [r3, #8]
   818fe:	681a      	ldr	r2, [r3, #0]
   81900:	3201      	adds	r2, #1
   81902:	601a      	str	r2, [r3, #0]
        }
        current_bit = current_bit >> 1;
   81904:	0864      	lsrs	r4, r4, #1
void UnityPrintMask(const _U_UINT mask, const _U_UINT number)
{
    _U_UINT current_bit = (_U_UINT)1 << (UNITY_INT_WIDTH - 1);
    _US32 i;

    for (i = 0; i < UNITY_INT_WIDTH; i++)
   81906:	3d01      	subs	r5, #1
   81908:	d180      	bne.n	8180c <UnityPrintMask+0x18>
        {
            UNITY_OUTPUT_CHAR('X');
        }
        current_bit = current_bit >> 1;
    }
}
   8190a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8190e:	bf00      	nop
   81910:	20070560 	.word	0x20070560
   81914:	0008354d 	.word	0x0008354d

00081918 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   81918:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   8191a:	4802      	ldr	r0, [pc, #8]	; (81924 <UnityPrintFail+0xc>)
   8191c:	4b02      	ldr	r3, [pc, #8]	; (81928 <UnityPrintFail+0x10>)
   8191e:	4798      	blx	r3
   81920:	bd08      	pop	{r3, pc}
   81922:	bf00      	nop
   81924:	00085824 	.word	0x00085824
   81928:	000813b1 	.word	0x000813b1

0008192c <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   8192c:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   8192e:	4802      	ldr	r0, [pc, #8]	; (81938 <UnityPrintOk+0xc>)
   81930:	4b02      	ldr	r3, [pc, #8]	; (8193c <UnityPrintOk+0x10>)
   81932:	4798      	blx	r3
   81934:	bd08      	pop	{r3, pc}
   81936:	bf00      	nop
   81938:	00085814 	.word	0x00085814
   8193c:	000813b1 	.word	0x000813b1

00081940 <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   81940:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   81942:	4b24      	ldr	r3, [pc, #144]	; (819d4 <UnityConcludeTest+0x94>)
   81944:	69db      	ldr	r3, [r3, #28]
   81946:	b123      	cbz	r3, 81952 <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   81948:	4b22      	ldr	r3, [pc, #136]	; (819d4 <UnityConcludeTest+0x94>)
   8194a:	695a      	ldr	r2, [r3, #20]
   8194c:	3201      	adds	r2, #1
   8194e:	615a      	str	r2, [r3, #20]
   81950:	e00f      	b.n	81972 <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   81952:	4b20      	ldr	r3, [pc, #128]	; (819d4 <UnityConcludeTest+0x94>)
   81954:	699b      	ldr	r3, [r3, #24]
   81956:	b943      	cbnz	r3, 8196a <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   81958:	4b1e      	ldr	r3, [pc, #120]	; (819d4 <UnityConcludeTest+0x94>)
   8195a:	6818      	ldr	r0, [r3, #0]
   8195c:	6899      	ldr	r1, [r3, #8]
   8195e:	4b1e      	ldr	r3, [pc, #120]	; (819d8 <UnityConcludeTest+0x98>)
   81960:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   81962:	481e      	ldr	r0, [pc, #120]	; (819dc <UnityConcludeTest+0x9c>)
   81964:	4b1e      	ldr	r3, [pc, #120]	; (819e0 <UnityConcludeTest+0xa0>)
   81966:	4798      	blx	r3
   81968:	e003      	b.n	81972 <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   8196a:	4b1a      	ldr	r3, [pc, #104]	; (819d4 <UnityConcludeTest+0x94>)
   8196c:	691a      	ldr	r2, [r3, #16]
   8196e:	3201      	adds	r2, #1
   81970:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   81972:	4b18      	ldr	r3, [pc, #96]	; (819d4 <UnityConcludeTest+0x94>)
   81974:	2200      	movs	r2, #0
   81976:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81978:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   8197a:	4b1a      	ldr	r3, [pc, #104]	; (819e4 <UnityConcludeTest+0xa4>)
   8197c:	6818      	ldr	r0, [r3, #0]
   8197e:	6882      	ldr	r2, [r0, #8]
   81980:	6893      	ldr	r3, [r2, #8]
   81982:	3b01      	subs	r3, #1
   81984:	6093      	str	r3, [r2, #8]
   81986:	2b00      	cmp	r3, #0
   81988:	da19      	bge.n	819be <UnityConcludeTest+0x7e>
   8198a:	6882      	ldr	r2, [r0, #8]
   8198c:	6891      	ldr	r1, [r2, #8]
   8198e:	6993      	ldr	r3, [r2, #24]
   81990:	4299      	cmp	r1, r3
   81992:	db10      	blt.n	819b6 <UnityConcludeTest+0x76>
   81994:	6813      	ldr	r3, [r2, #0]
   81996:	220a      	movs	r2, #10
   81998:	701a      	strb	r2, [r3, #0]
   8199a:	4b12      	ldr	r3, [pc, #72]	; (819e4 <UnityConcludeTest+0xa4>)
   8199c:	6818      	ldr	r0, [r3, #0]
   8199e:	6882      	ldr	r2, [r0, #8]
   819a0:	6813      	ldr	r3, [r2, #0]
   819a2:	7819      	ldrb	r1, [r3, #0]
   819a4:	290a      	cmp	r1, #10
   819a6:	d002      	beq.n	819ae <UnityConcludeTest+0x6e>
   819a8:	3301      	adds	r3, #1
   819aa:	6013      	str	r3, [r2, #0]
   819ac:	bd08      	pop	{r3, pc}
   819ae:	210a      	movs	r1, #10
   819b0:	4b0d      	ldr	r3, [pc, #52]	; (819e8 <UnityConcludeTest+0xa8>)
   819b2:	4798      	blx	r3
   819b4:	bd08      	pop	{r3, pc}
   819b6:	210a      	movs	r1, #10
   819b8:	4b0b      	ldr	r3, [pc, #44]	; (819e8 <UnityConcludeTest+0xa8>)
   819ba:	4798      	blx	r3
   819bc:	bd08      	pop	{r3, pc}
   819be:	6883      	ldr	r3, [r0, #8]
   819c0:	681b      	ldr	r3, [r3, #0]
   819c2:	220a      	movs	r2, #10
   819c4:	701a      	strb	r2, [r3, #0]
   819c6:	4b07      	ldr	r3, [pc, #28]	; (819e4 <UnityConcludeTest+0xa4>)
   819c8:	681b      	ldr	r3, [r3, #0]
   819ca:	689b      	ldr	r3, [r3, #8]
   819cc:	681a      	ldr	r2, [r3, #0]
   819ce:	3201      	adds	r2, #1
   819d0:	601a      	str	r2, [r3, #0]
   819d2:	bd08      	pop	{r3, pc}
   819d4:	20070b0c 	.word	0x20070b0c
   819d8:	000815dd 	.word	0x000815dd
   819dc:	00085870 	.word	0x00085870
   819e0:	000813b1 	.word	0x000813b1
   819e4:	20070560 	.word	0x20070560
   819e8:	0008354d 	.word	0x0008354d

000819ec <UnityAssertBits>:
void UnityAssertBits(const _U_SINT mask,
                     const _U_SINT expected,
                     const _U_SINT actual,
                     const char* msg,
                     const UNITY_LINE_TYPE lineNumber)
{
   819ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   819f0:	4605      	mov	r5, r0
   819f2:	460f      	mov	r7, r1
   819f4:	4616      	mov	r6, r2
   819f6:	4698      	mov	r8, r3
    UNITY_SKIP_EXECUTION;
   819f8:	4c12      	ldr	r4, [pc, #72]	; (81a44 <UnityAssertBits+0x58>)
   819fa:	69a4      	ldr	r4, [r4, #24]
   819fc:	b9fc      	cbnz	r4, 81a3e <UnityAssertBits+0x52>
   819fe:	4a11      	ldr	r2, [pc, #68]	; (81a44 <UnityAssertBits+0x58>)
   81a00:	69d2      	ldr	r2, [r2, #28]
   81a02:	b9e2      	cbnz	r2, 81a3e <UnityAssertBits+0x52>

    if ((mask & expected) != (mask & actual))
   81a04:	ea81 0306 	eor.w	r3, r1, r6
   81a08:	4203      	tst	r3, r0
   81a0a:	d018      	beq.n	81a3e <UnityAssertBits+0x52>
    {
        UnityTestResultsFailBegin(lineNumber);
   81a0c:	9808      	ldr	r0, [sp, #32]
   81a0e:	4b0e      	ldr	r3, [pc, #56]	; (81a48 <UnityAssertBits+0x5c>)
   81a10:	4798      	blx	r3
        UnityPrint(UnityStrExpected);
   81a12:	480e      	ldr	r0, [pc, #56]	; (81a4c <UnityAssertBits+0x60>)
   81a14:	f8df 9048 	ldr.w	r9, [pc, #72]	; 81a60 <UnityAssertBits+0x74>
   81a18:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)expected);
   81a1a:	4628      	mov	r0, r5
   81a1c:	4639      	mov	r1, r7
   81a1e:	4c0c      	ldr	r4, [pc, #48]	; (81a50 <UnityAssertBits+0x64>)
   81a20:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   81a22:	480c      	ldr	r0, [pc, #48]	; (81a54 <UnityAssertBits+0x68>)
   81a24:	47c8      	blx	r9
        UnityPrintMask((_U_UINT)mask, (_U_UINT)actual);
   81a26:	4628      	mov	r0, r5
   81a28:	4631      	mov	r1, r6
   81a2a:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   81a2c:	4640      	mov	r0, r8
   81a2e:	4b0a      	ldr	r3, [pc, #40]	; (81a58 <UnityAssertBits+0x6c>)
   81a30:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   81a32:	4804      	ldr	r0, [pc, #16]	; (81a44 <UnityAssertBits+0x58>)
   81a34:	2101      	movs	r1, #1
   81a36:	6181      	str	r1, [r0, #24]
   81a38:	3020      	adds	r0, #32
   81a3a:	4b08      	ldr	r3, [pc, #32]	; (81a5c <UnityAssertBits+0x70>)
   81a3c:	4798      	blx	r3
   81a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81a42:	bf00      	nop
   81a44:	20070b0c 	.word	0x20070b0c
   81a48:	00081711 	.word	0x00081711
   81a4c:	0008582c 	.word	0x0008582c
   81a50:	000817f5 	.word	0x000817f5
   81a54:	0008581c 	.word	0x0008581c
   81a58:	00081795 	.word	0x00081795
   81a5c:	00082695 	.word	0x00082695
   81a60:	000813b1 	.word	0x000813b1

00081a64 <UnityAssertNumbersWithin>:
                               const _U_SINT expected,
                               const _U_SINT actual,
                               const char* msg,
                               const UNITY_LINE_TYPE lineNumber,
                               const UNITY_DISPLAY_STYLE_T style)
{
   81a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a68:	4680      	mov	r8, r0
   81a6a:	460e      	mov	r6, r1
   81a6c:	4615      	mov	r5, r2
   81a6e:	4699      	mov	r9, r3
   81a70:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
    UNITY_SKIP_EXECUTION;
   81a74:	4c25      	ldr	r4, [pc, #148]	; (81b0c <UnityAssertNumbersWithin+0xa8>)
   81a76:	69a4      	ldr	r4, [r4, #24]
   81a78:	2c00      	cmp	r4, #0
   81a7a:	d144      	bne.n	81b06 <UnityAssertNumbersWithin+0xa2>
   81a7c:	4b23      	ldr	r3, [pc, #140]	; (81b0c <UnityAssertNumbersWithin+0xa8>)
   81a7e:	69da      	ldr	r2, [r3, #28]
   81a80:	2a00      	cmp	r2, #0
   81a82:	d140      	bne.n	81b06 <UnityAssertNumbersWithin+0xa2>

    if ((style & UNITY_DISPLAY_RANGE_INT) == UNITY_DISPLAY_RANGE_INT)
   81a84:	f017 0f10 	tst.w	r7, #16
   81a88:	d010      	beq.n	81aac <UnityAssertNumbersWithin+0x48>
    {
        if (actual > expected)
   81a8a:	428d      	cmp	r5, r1
   81a8c:	dd06      	ble.n	81a9c <UnityAssertNumbersWithin+0x38>
          Unity.CurrentTestFailed = ((actual - expected) > delta);
   81a8e:	1a6a      	subs	r2, r5, r1
   81a90:	4282      	cmp	r2, r0
   81a92:	bfd4      	ite	le
   81a94:	2200      	movle	r2, #0
   81a96:	2201      	movgt	r2, #1
   81a98:	619a      	str	r2, [r3, #24]
   81a9a:	e013      	b.n	81ac4 <UnityAssertNumbersWithin+0x60>
        else
          Unity.CurrentTestFailed = ((expected - actual) > delta);
   81a9c:	1b4a      	subs	r2, r1, r5
   81a9e:	4282      	cmp	r2, r0
   81aa0:	bfd4      	ite	le
   81aa2:	2200      	movle	r2, #0
   81aa4:	2201      	movgt	r2, #1
   81aa6:	4b19      	ldr	r3, [pc, #100]	; (81b0c <UnityAssertNumbersWithin+0xa8>)
   81aa8:	619a      	str	r2, [r3, #24]
   81aaa:	e00b      	b.n	81ac4 <UnityAssertNumbersWithin+0x60>
    }
    else
    {
        if ((_U_UINT)actual > (_U_UINT)expected)
   81aac:	428d      	cmp	r5, r1
            Unity.CurrentTestFailed = ((_U_UINT)(actual - expected) > (_U_UINT)delta);
   81aae:	bf8c      	ite	hi
   81ab0:	ebc1 0205 	rsbhi	r2, r1, r5
        else
            Unity.CurrentTestFailed = ((_U_UINT)(expected - actual) > (_U_UINT)delta);
   81ab4:	ebc5 0201 	rsbls	r2, r5, r1
   81ab8:	4282      	cmp	r2, r0
   81aba:	bf94      	ite	ls
   81abc:	2200      	movls	r2, #0
   81abe:	2201      	movhi	r2, #1
   81ac0:	4b12      	ldr	r3, [pc, #72]	; (81b0c <UnityAssertNumbersWithin+0xa8>)
   81ac2:	619a      	str	r2, [r3, #24]
    }

    if (Unity.CurrentTestFailed)
   81ac4:	4b11      	ldr	r3, [pc, #68]	; (81b0c <UnityAssertNumbersWithin+0xa8>)
   81ac6:	699b      	ldr	r3, [r3, #24]
   81ac8:	b1eb      	cbz	r3, 81b06 <UnityAssertNumbersWithin+0xa2>
    {
        UnityTestResultsFailBegin(lineNumber);
   81aca:	9808      	ldr	r0, [sp, #32]
   81acc:	4b10      	ldr	r3, [pc, #64]	; (81b10 <UnityAssertNumbersWithin+0xac>)
   81ace:	4798      	blx	r3
        UnityPrint(UnityStrDelta);
   81ad0:	4810      	ldr	r0, [pc, #64]	; (81b14 <UnityAssertNumbersWithin+0xb0>)
   81ad2:	f8df a058 	ldr.w	sl, [pc, #88]	; 81b2c <UnityAssertNumbersWithin+0xc8>
   81ad6:	47d0      	blx	sl
        UnityPrintNumberByStyle(delta, style);
   81ad8:	4640      	mov	r0, r8
   81ada:	4639      	mov	r1, r7
   81adc:	4c0e      	ldr	r4, [pc, #56]	; (81b18 <UnityAssertNumbersWithin+0xb4>)
   81ade:	47a0      	blx	r4
        UnityPrint(UnityStrExpected);
   81ae0:	480e      	ldr	r0, [pc, #56]	; (81b1c <UnityAssertNumbersWithin+0xb8>)
   81ae2:	47d0      	blx	sl
        UnityPrintNumberByStyle(expected, style);
   81ae4:	4630      	mov	r0, r6
   81ae6:	4639      	mov	r1, r7
   81ae8:	47a0      	blx	r4
        UnityPrint(UnityStrWas);
   81aea:	480d      	ldr	r0, [pc, #52]	; (81b20 <UnityAssertNumbersWithin+0xbc>)
   81aec:	47d0      	blx	sl
        UnityPrintNumberByStyle(actual, style);
   81aee:	4628      	mov	r0, r5
   81af0:	4639      	mov	r1, r7
   81af2:	47a0      	blx	r4
        UnityAddMsgIfSpecified(msg);
   81af4:	4648      	mov	r0, r9
   81af6:	4b0b      	ldr	r3, [pc, #44]	; (81b24 <UnityAssertNumbersWithin+0xc0>)
   81af8:	4798      	blx	r3
        UNITY_FAIL_AND_BAIL;
   81afa:	4804      	ldr	r0, [pc, #16]	; (81b0c <UnityAssertNumbersWithin+0xa8>)
   81afc:	2101      	movs	r1, #1
   81afe:	6181      	str	r1, [r0, #24]
   81b00:	3020      	adds	r0, #32
   81b02:	4b09      	ldr	r3, [pc, #36]	; (81b28 <UnityAssertNumbersWithin+0xc4>)
   81b04:	4798      	blx	r3
   81b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b0a:	bf00      	nop
   81b0c:	20070b0c 	.word	0x20070b0c
   81b10:	00081711 	.word	0x00081711
   81b14:	00085878 	.word	0x00085878
   81b18:	000817b1 	.word	0x000817b1
   81b1c:	0008582c 	.word	0x0008582c
   81b20:	0008581c 	.word	0x0008581c
   81b24:	00081795 	.word	0x00081795
   81b28:	00082695 	.word	0x00082695
   81b2c:	000813b1 	.word	0x000813b1

00081b30 <UnityFail>:
//-----------------------------------------------
// Control Functions
//-----------------------------------------------

void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
{
   81b30:	b510      	push	{r4, lr}
   81b32:	4604      	mov	r4, r0
    UNITY_SKIP_EXECUTION;
   81b34:	4b3a      	ldr	r3, [pc, #232]	; (81c20 <UnityFail+0xf0>)
   81b36:	699b      	ldr	r3, [r3, #24]
   81b38:	2b00      	cmp	r3, #0
   81b3a:	d16f      	bne.n	81c1c <UnityFail+0xec>
   81b3c:	4b38      	ldr	r3, [pc, #224]	; (81c20 <UnityFail+0xf0>)
   81b3e:	69db      	ldr	r3, [r3, #28]
   81b40:	2b00      	cmp	r3, #0
   81b42:	d16b      	bne.n	81c1c <UnityFail+0xec>

    UnityTestResultsBegin(Unity.TestFile, line);
   81b44:	4b36      	ldr	r3, [pc, #216]	; (81c20 <UnityFail+0xf0>)
   81b46:	6818      	ldr	r0, [r3, #0]
   81b48:	4b36      	ldr	r3, [pc, #216]	; (81c24 <UnityFail+0xf4>)
   81b4a:	4798      	blx	r3
    UnityPrintFail();
   81b4c:	4b36      	ldr	r3, [pc, #216]	; (81c28 <UnityFail+0xf8>)
   81b4e:	4798      	blx	r3
    if (msg != NULL)
   81b50:	2c00      	cmp	r4, #0
   81b52:	d05d      	beq.n	81c10 <UnityFail+0xe0>
    {
      UNITY_OUTPUT_CHAR(':');
   81b54:	4b35      	ldr	r3, [pc, #212]	; (81c2c <UnityFail+0xfc>)
   81b56:	6818      	ldr	r0, [r3, #0]
   81b58:	6882      	ldr	r2, [r0, #8]
   81b5a:	6893      	ldr	r3, [r2, #8]
   81b5c:	3b01      	subs	r3, #1
   81b5e:	6093      	str	r3, [r2, #8]
   81b60:	2b00      	cmp	r3, #0
   81b62:	da19      	bge.n	81b98 <UnityFail+0x68>
   81b64:	6882      	ldr	r2, [r0, #8]
   81b66:	6891      	ldr	r1, [r2, #8]
   81b68:	6993      	ldr	r3, [r2, #24]
   81b6a:	4299      	cmp	r1, r3
   81b6c:	db10      	blt.n	81b90 <UnityFail+0x60>
   81b6e:	6813      	ldr	r3, [r2, #0]
   81b70:	223a      	movs	r2, #58	; 0x3a
   81b72:	701a      	strb	r2, [r3, #0]
   81b74:	4b2d      	ldr	r3, [pc, #180]	; (81c2c <UnityFail+0xfc>)
   81b76:	6818      	ldr	r0, [r3, #0]
   81b78:	6882      	ldr	r2, [r0, #8]
   81b7a:	6813      	ldr	r3, [r2, #0]
   81b7c:	7819      	ldrb	r1, [r3, #0]
   81b7e:	290a      	cmp	r1, #10
   81b80:	d002      	beq.n	81b88 <UnityFail+0x58>
   81b82:	3301      	adds	r3, #1
   81b84:	6013      	str	r3, [r2, #0]
   81b86:	e011      	b.n	81bac <UnityFail+0x7c>
   81b88:	210a      	movs	r1, #10
   81b8a:	4b29      	ldr	r3, [pc, #164]	; (81c30 <UnityFail+0x100>)
   81b8c:	4798      	blx	r3
   81b8e:	e00d      	b.n	81bac <UnityFail+0x7c>
   81b90:	213a      	movs	r1, #58	; 0x3a
   81b92:	4b27      	ldr	r3, [pc, #156]	; (81c30 <UnityFail+0x100>)
   81b94:	4798      	blx	r3
   81b96:	e009      	b.n	81bac <UnityFail+0x7c>
   81b98:	6883      	ldr	r3, [r0, #8]
   81b9a:	681b      	ldr	r3, [r3, #0]
   81b9c:	223a      	movs	r2, #58	; 0x3a
   81b9e:	701a      	strb	r2, [r3, #0]
   81ba0:	4b22      	ldr	r3, [pc, #136]	; (81c2c <UnityFail+0xfc>)
   81ba2:	681b      	ldr	r3, [r3, #0]
   81ba4:	689b      	ldr	r3, [r3, #8]
   81ba6:	681a      	ldr	r2, [r3, #0]
   81ba8:	3201      	adds	r2, #1
   81baa:	601a      	str	r2, [r3, #0]
      if (msg[0] != ' ')
   81bac:	7823      	ldrb	r3, [r4, #0]
   81bae:	2b20      	cmp	r3, #32
   81bb0:	d02b      	beq.n	81c0a <UnityFail+0xda>
      {
        UNITY_OUTPUT_CHAR(' ');
   81bb2:	4b1e      	ldr	r3, [pc, #120]	; (81c2c <UnityFail+0xfc>)
   81bb4:	6818      	ldr	r0, [r3, #0]
   81bb6:	6882      	ldr	r2, [r0, #8]
   81bb8:	6893      	ldr	r3, [r2, #8]
   81bba:	3b01      	subs	r3, #1
   81bbc:	6093      	str	r3, [r2, #8]
   81bbe:	2b00      	cmp	r3, #0
   81bc0:	da19      	bge.n	81bf6 <UnityFail+0xc6>
   81bc2:	6882      	ldr	r2, [r0, #8]
   81bc4:	6891      	ldr	r1, [r2, #8]
   81bc6:	6993      	ldr	r3, [r2, #24]
   81bc8:	4299      	cmp	r1, r3
   81bca:	db10      	blt.n	81bee <UnityFail+0xbe>
   81bcc:	6813      	ldr	r3, [r2, #0]
   81bce:	2220      	movs	r2, #32
   81bd0:	701a      	strb	r2, [r3, #0]
   81bd2:	4b16      	ldr	r3, [pc, #88]	; (81c2c <UnityFail+0xfc>)
   81bd4:	6818      	ldr	r0, [r3, #0]
   81bd6:	6882      	ldr	r2, [r0, #8]
   81bd8:	6813      	ldr	r3, [r2, #0]
   81bda:	7819      	ldrb	r1, [r3, #0]
   81bdc:	290a      	cmp	r1, #10
   81bde:	d002      	beq.n	81be6 <UnityFail+0xb6>
   81be0:	3301      	adds	r3, #1
   81be2:	6013      	str	r3, [r2, #0]
   81be4:	e011      	b.n	81c0a <UnityFail+0xda>
   81be6:	210a      	movs	r1, #10
   81be8:	4b11      	ldr	r3, [pc, #68]	; (81c30 <UnityFail+0x100>)
   81bea:	4798      	blx	r3
   81bec:	e00d      	b.n	81c0a <UnityFail+0xda>
   81bee:	2120      	movs	r1, #32
   81bf0:	4b0f      	ldr	r3, [pc, #60]	; (81c30 <UnityFail+0x100>)
   81bf2:	4798      	blx	r3
   81bf4:	e009      	b.n	81c0a <UnityFail+0xda>
   81bf6:	6883      	ldr	r3, [r0, #8]
   81bf8:	681b      	ldr	r3, [r3, #0]
   81bfa:	2220      	movs	r2, #32
   81bfc:	701a      	strb	r2, [r3, #0]
   81bfe:	4b0b      	ldr	r3, [pc, #44]	; (81c2c <UnityFail+0xfc>)
   81c00:	681b      	ldr	r3, [r3, #0]
   81c02:	689b      	ldr	r3, [r3, #8]
   81c04:	681a      	ldr	r2, [r3, #0]
   81c06:	3201      	adds	r2, #1
   81c08:	601a      	str	r2, [r3, #0]
      }
      UnityPrint(msg);
   81c0a:	4620      	mov	r0, r4
   81c0c:	4b09      	ldr	r3, [pc, #36]	; (81c34 <UnityFail+0x104>)
   81c0e:	4798      	blx	r3
    }
    UNITY_FAIL_AND_BAIL;
   81c10:	4803      	ldr	r0, [pc, #12]	; (81c20 <UnityFail+0xf0>)
   81c12:	2101      	movs	r1, #1
   81c14:	6181      	str	r1, [r0, #24]
   81c16:	3020      	adds	r0, #32
   81c18:	4b07      	ldr	r3, [pc, #28]	; (81c38 <UnityFail+0x108>)
   81c1a:	4798      	blx	r3
   81c1c:	bd10      	pop	{r4, pc}
   81c1e:	bf00      	nop
   81c20:	20070b0c 	.word	0x20070b0c
   81c24:	000815dd 	.word	0x000815dd
   81c28:	00081919 	.word	0x00081919
   81c2c:	20070560 	.word	0x20070560
   81c30:	0008354d 	.word	0x0008354d
   81c34:	000813b1 	.word	0x000813b1
   81c38:	00082695 	.word	0x00082695

00081c3c <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81c3c:	b500      	push	{lr}
   81c3e:	b083      	sub	sp, #12
   81c40:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   81c42:	480e      	ldr	r0, [pc, #56]	; (81c7c <UnityDefaultTestRun+0x40>)
   81c44:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   81c46:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   81c48:	68c3      	ldr	r3, [r0, #12]
   81c4a:	3301      	adds	r3, #1
   81c4c:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   81c4e:	3020      	adds	r0, #32
   81c50:	4b0b      	ldr	r3, [pc, #44]	; (81c80 <UnityDefaultTestRun+0x44>)
   81c52:	4798      	blx	r3
   81c54:	b918      	cbnz	r0, 81c5e <UnityDefaultTestRun+0x22>
    {
        setUp();
   81c56:	4b0b      	ldr	r3, [pc, #44]	; (81c84 <UnityDefaultTestRun+0x48>)
   81c58:	4798      	blx	r3
        Func();
   81c5a:	9b01      	ldr	r3, [sp, #4]
   81c5c:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   81c5e:	480a      	ldr	r0, [pc, #40]	; (81c88 <UnityDefaultTestRun+0x4c>)
   81c60:	4b07      	ldr	r3, [pc, #28]	; (81c80 <UnityDefaultTestRun+0x44>)
   81c62:	4798      	blx	r3
   81c64:	b920      	cbnz	r0, 81c70 <UnityDefaultTestRun+0x34>
   81c66:	4b05      	ldr	r3, [pc, #20]	; (81c7c <UnityDefaultTestRun+0x40>)
   81c68:	69db      	ldr	r3, [r3, #28]
   81c6a:	b90b      	cbnz	r3, 81c70 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   81c6c:	4b07      	ldr	r3, [pc, #28]	; (81c8c <UnityDefaultTestRun+0x50>)
   81c6e:	4798      	blx	r3
    }
    UnityConcludeTest();
   81c70:	4b07      	ldr	r3, [pc, #28]	; (81c90 <UnityDefaultTestRun+0x54>)
   81c72:	4798      	blx	r3
}
   81c74:	b003      	add	sp, #12
   81c76:	f85d fb04 	ldr.w	pc, [sp], #4
   81c7a:	bf00      	nop
   81c7c:	20070b0c 	.word	0x20070b0c
   81c80:	00082689 	.word	0x00082689
   81c84:	000808d1 	.word	0x000808d1
   81c88:	20070b2c 	.word	0x20070b2c
   81c8c:	000808d5 	.word	0x000808d5
   81c90:	00081941 	.word	0x00081941

00081c94 <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   81c94:	4b05      	ldr	r3, [pc, #20]	; (81cac <UnityBegin+0x18>)
   81c96:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   81c98:	2200      	movs	r2, #0
   81c9a:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   81c9c:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   81c9e:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   81ca0:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   81ca2:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   81ca4:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81ca6:	61da      	str	r2, [r3, #28]
   81ca8:	4770      	bx	lr
   81caa:	bf00      	nop
   81cac:	20070b0c 	.word	0x20070b0c

00081cb0 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81cb0:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   81cb2:	4b66      	ldr	r3, [pc, #408]	; (81e4c <UnityEnd+0x19c>)
   81cb4:	6818      	ldr	r0, [r3, #0]
   81cb6:	6882      	ldr	r2, [r0, #8]
   81cb8:	6893      	ldr	r3, [r2, #8]
   81cba:	3b01      	subs	r3, #1
   81cbc:	6093      	str	r3, [r2, #8]
   81cbe:	2b00      	cmp	r3, #0
   81cc0:	da19      	bge.n	81cf6 <UnityEnd+0x46>
   81cc2:	6882      	ldr	r2, [r0, #8]
   81cc4:	6891      	ldr	r1, [r2, #8]
   81cc6:	6993      	ldr	r3, [r2, #24]
   81cc8:	4299      	cmp	r1, r3
   81cca:	db10      	blt.n	81cee <UnityEnd+0x3e>
   81ccc:	6813      	ldr	r3, [r2, #0]
   81cce:	220a      	movs	r2, #10
   81cd0:	701a      	strb	r2, [r3, #0]
   81cd2:	4b5e      	ldr	r3, [pc, #376]	; (81e4c <UnityEnd+0x19c>)
   81cd4:	6818      	ldr	r0, [r3, #0]
   81cd6:	6882      	ldr	r2, [r0, #8]
   81cd8:	6813      	ldr	r3, [r2, #0]
   81cda:	7819      	ldrb	r1, [r3, #0]
   81cdc:	290a      	cmp	r1, #10
   81cde:	d002      	beq.n	81ce6 <UnityEnd+0x36>
   81ce0:	3301      	adds	r3, #1
   81ce2:	6013      	str	r3, [r2, #0]
   81ce4:	e011      	b.n	81d0a <UnityEnd+0x5a>
   81ce6:	210a      	movs	r1, #10
   81ce8:	4b59      	ldr	r3, [pc, #356]	; (81e50 <UnityEnd+0x1a0>)
   81cea:	4798      	blx	r3
   81cec:	e00d      	b.n	81d0a <UnityEnd+0x5a>
   81cee:	210a      	movs	r1, #10
   81cf0:	4b57      	ldr	r3, [pc, #348]	; (81e50 <UnityEnd+0x1a0>)
   81cf2:	4798      	blx	r3
   81cf4:	e009      	b.n	81d0a <UnityEnd+0x5a>
   81cf6:	6883      	ldr	r3, [r0, #8]
   81cf8:	681b      	ldr	r3, [r3, #0]
   81cfa:	220a      	movs	r2, #10
   81cfc:	701a      	strb	r2, [r3, #0]
   81cfe:	4b53      	ldr	r3, [pc, #332]	; (81e4c <UnityEnd+0x19c>)
   81d00:	681b      	ldr	r3, [r3, #0]
   81d02:	689b      	ldr	r3, [r3, #8]
   81d04:	681a      	ldr	r2, [r3, #0]
   81d06:	3201      	adds	r2, #1
   81d08:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   81d0a:	4852      	ldr	r0, [pc, #328]	; (81e54 <UnityEnd+0x1a4>)
   81d0c:	4b52      	ldr	r3, [pc, #328]	; (81e58 <UnityEnd+0x1a8>)
   81d0e:	4798      	blx	r3
    UNITY_PRINT_EOL;
   81d10:	4b4e      	ldr	r3, [pc, #312]	; (81e4c <UnityEnd+0x19c>)
   81d12:	6818      	ldr	r0, [r3, #0]
   81d14:	6882      	ldr	r2, [r0, #8]
   81d16:	6893      	ldr	r3, [r2, #8]
   81d18:	3b01      	subs	r3, #1
   81d1a:	6093      	str	r3, [r2, #8]
   81d1c:	2b00      	cmp	r3, #0
   81d1e:	da19      	bge.n	81d54 <UnityEnd+0xa4>
   81d20:	6882      	ldr	r2, [r0, #8]
   81d22:	6891      	ldr	r1, [r2, #8]
   81d24:	6993      	ldr	r3, [r2, #24]
   81d26:	4299      	cmp	r1, r3
   81d28:	db10      	blt.n	81d4c <UnityEnd+0x9c>
   81d2a:	6813      	ldr	r3, [r2, #0]
   81d2c:	220a      	movs	r2, #10
   81d2e:	701a      	strb	r2, [r3, #0]
   81d30:	4b46      	ldr	r3, [pc, #280]	; (81e4c <UnityEnd+0x19c>)
   81d32:	6818      	ldr	r0, [r3, #0]
   81d34:	6882      	ldr	r2, [r0, #8]
   81d36:	6813      	ldr	r3, [r2, #0]
   81d38:	7819      	ldrb	r1, [r3, #0]
   81d3a:	290a      	cmp	r1, #10
   81d3c:	d002      	beq.n	81d44 <UnityEnd+0x94>
   81d3e:	3301      	adds	r3, #1
   81d40:	6013      	str	r3, [r2, #0]
   81d42:	e011      	b.n	81d68 <UnityEnd+0xb8>
   81d44:	210a      	movs	r1, #10
   81d46:	4b42      	ldr	r3, [pc, #264]	; (81e50 <UnityEnd+0x1a0>)
   81d48:	4798      	blx	r3
   81d4a:	e00d      	b.n	81d68 <UnityEnd+0xb8>
   81d4c:	210a      	movs	r1, #10
   81d4e:	4b40      	ldr	r3, [pc, #256]	; (81e50 <UnityEnd+0x1a0>)
   81d50:	4798      	blx	r3
   81d52:	e009      	b.n	81d68 <UnityEnd+0xb8>
   81d54:	6883      	ldr	r3, [r0, #8]
   81d56:	681b      	ldr	r3, [r3, #0]
   81d58:	220a      	movs	r2, #10
   81d5a:	701a      	strb	r2, [r3, #0]
   81d5c:	4b3b      	ldr	r3, [pc, #236]	; (81e4c <UnityEnd+0x19c>)
   81d5e:	681b      	ldr	r3, [r3, #0]
   81d60:	689b      	ldr	r3, [r3, #8]
   81d62:	681a      	ldr	r2, [r3, #0]
   81d64:	3201      	adds	r2, #1
   81d66:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   81d68:	4e3c      	ldr	r6, [pc, #240]	; (81e5c <UnityEnd+0x1ac>)
   81d6a:	68f0      	ldr	r0, [r6, #12]
   81d6c:	4d3c      	ldr	r5, [pc, #240]	; (81e60 <UnityEnd+0x1b0>)
   81d6e:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   81d70:	483c      	ldr	r0, [pc, #240]	; (81e64 <UnityEnd+0x1b4>)
   81d72:	4c39      	ldr	r4, [pc, #228]	; (81e58 <UnityEnd+0x1a8>)
   81d74:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   81d76:	6930      	ldr	r0, [r6, #16]
   81d78:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   81d7a:	483b      	ldr	r0, [pc, #236]	; (81e68 <UnityEnd+0x1b8>)
   81d7c:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   81d7e:	6970      	ldr	r0, [r6, #20]
   81d80:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   81d82:	483a      	ldr	r0, [pc, #232]	; (81e6c <UnityEnd+0x1bc>)
   81d84:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   81d86:	4b31      	ldr	r3, [pc, #196]	; (81e4c <UnityEnd+0x19c>)
   81d88:	6818      	ldr	r0, [r3, #0]
   81d8a:	6882      	ldr	r2, [r0, #8]
   81d8c:	6893      	ldr	r3, [r2, #8]
   81d8e:	3b01      	subs	r3, #1
   81d90:	6093      	str	r3, [r2, #8]
   81d92:	2b00      	cmp	r3, #0
   81d94:	da19      	bge.n	81dca <UnityEnd+0x11a>
   81d96:	6882      	ldr	r2, [r0, #8]
   81d98:	6891      	ldr	r1, [r2, #8]
   81d9a:	6993      	ldr	r3, [r2, #24]
   81d9c:	4299      	cmp	r1, r3
   81d9e:	db10      	blt.n	81dc2 <UnityEnd+0x112>
   81da0:	6813      	ldr	r3, [r2, #0]
   81da2:	220a      	movs	r2, #10
   81da4:	701a      	strb	r2, [r3, #0]
   81da6:	4b29      	ldr	r3, [pc, #164]	; (81e4c <UnityEnd+0x19c>)
   81da8:	6818      	ldr	r0, [r3, #0]
   81daa:	6882      	ldr	r2, [r0, #8]
   81dac:	6813      	ldr	r3, [r2, #0]
   81dae:	7819      	ldrb	r1, [r3, #0]
   81db0:	290a      	cmp	r1, #10
   81db2:	d002      	beq.n	81dba <UnityEnd+0x10a>
   81db4:	3301      	adds	r3, #1
   81db6:	6013      	str	r3, [r2, #0]
   81db8:	e011      	b.n	81dde <UnityEnd+0x12e>
   81dba:	210a      	movs	r1, #10
   81dbc:	4b24      	ldr	r3, [pc, #144]	; (81e50 <UnityEnd+0x1a0>)
   81dbe:	4798      	blx	r3
   81dc0:	e00d      	b.n	81dde <UnityEnd+0x12e>
   81dc2:	210a      	movs	r1, #10
   81dc4:	4b22      	ldr	r3, [pc, #136]	; (81e50 <UnityEnd+0x1a0>)
   81dc6:	4798      	blx	r3
   81dc8:	e009      	b.n	81dde <UnityEnd+0x12e>
   81dca:	6883      	ldr	r3, [r0, #8]
   81dcc:	681b      	ldr	r3, [r3, #0]
   81dce:	220a      	movs	r2, #10
   81dd0:	701a      	strb	r2, [r3, #0]
   81dd2:	4b1e      	ldr	r3, [pc, #120]	; (81e4c <UnityEnd+0x19c>)
   81dd4:	681b      	ldr	r3, [r3, #0]
   81dd6:	689b      	ldr	r3, [r3, #8]
   81dd8:	681a      	ldr	r2, [r3, #0]
   81dda:	3201      	adds	r2, #1
   81ddc:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   81dde:	4b1f      	ldr	r3, [pc, #124]	; (81e5c <UnityEnd+0x1ac>)
   81de0:	691b      	ldr	r3, [r3, #16]
   81de2:	b913      	cbnz	r3, 81dea <UnityEnd+0x13a>
    {
        UnityPrintOk();
   81de4:	4b22      	ldr	r3, [pc, #136]	; (81e70 <UnityEnd+0x1c0>)
   81de6:	4798      	blx	r3
   81de8:	e001      	b.n	81dee <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   81dea:	4b22      	ldr	r3, [pc, #136]	; (81e74 <UnityEnd+0x1c4>)
   81dec:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   81dee:	4b17      	ldr	r3, [pc, #92]	; (81e4c <UnityEnd+0x19c>)
   81df0:	6818      	ldr	r0, [r3, #0]
   81df2:	6882      	ldr	r2, [r0, #8]
   81df4:	6893      	ldr	r3, [r2, #8]
   81df6:	3b01      	subs	r3, #1
   81df8:	6093      	str	r3, [r2, #8]
   81dfa:	2b00      	cmp	r3, #0
   81dfc:	da19      	bge.n	81e32 <UnityEnd+0x182>
   81dfe:	6882      	ldr	r2, [r0, #8]
   81e00:	6891      	ldr	r1, [r2, #8]
   81e02:	6993      	ldr	r3, [r2, #24]
   81e04:	4299      	cmp	r1, r3
   81e06:	db10      	blt.n	81e2a <UnityEnd+0x17a>
   81e08:	6813      	ldr	r3, [r2, #0]
   81e0a:	220a      	movs	r2, #10
   81e0c:	701a      	strb	r2, [r3, #0]
   81e0e:	4b0f      	ldr	r3, [pc, #60]	; (81e4c <UnityEnd+0x19c>)
   81e10:	6818      	ldr	r0, [r3, #0]
   81e12:	6882      	ldr	r2, [r0, #8]
   81e14:	6813      	ldr	r3, [r2, #0]
   81e16:	7819      	ldrb	r1, [r3, #0]
   81e18:	290a      	cmp	r1, #10
   81e1a:	d002      	beq.n	81e22 <UnityEnd+0x172>
   81e1c:	3301      	adds	r3, #1
   81e1e:	6013      	str	r3, [r2, #0]
   81e20:	e011      	b.n	81e46 <UnityEnd+0x196>
   81e22:	210a      	movs	r1, #10
   81e24:	4b0a      	ldr	r3, [pc, #40]	; (81e50 <UnityEnd+0x1a0>)
   81e26:	4798      	blx	r3
   81e28:	e00d      	b.n	81e46 <UnityEnd+0x196>
   81e2a:	210a      	movs	r1, #10
   81e2c:	4b08      	ldr	r3, [pc, #32]	; (81e50 <UnityEnd+0x1a0>)
   81e2e:	4798      	blx	r3
   81e30:	e009      	b.n	81e46 <UnityEnd+0x196>
   81e32:	6883      	ldr	r3, [r0, #8]
   81e34:	681b      	ldr	r3, [r3, #0]
   81e36:	220a      	movs	r2, #10
   81e38:	701a      	strb	r2, [r3, #0]
   81e3a:	4b04      	ldr	r3, [pc, #16]	; (81e4c <UnityEnd+0x19c>)
   81e3c:	681b      	ldr	r3, [r3, #0]
   81e3e:	689b      	ldr	r3, [r3, #8]
   81e40:	681a      	ldr	r2, [r3, #0]
   81e42:	3201      	adds	r2, #1
   81e44:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   81e46:	4b05      	ldr	r3, [pc, #20]	; (81e5c <UnityEnd+0x1ac>)
   81e48:	6918      	ldr	r0, [r3, #16]
   81e4a:	bd70      	pop	{r4, r5, r6, pc}
   81e4c:	20070560 	.word	0x20070560
   81e50:	0008354d 	.word	0x0008354d
   81e54:	00085838 	.word	0x00085838
   81e58:	000813b1 	.word	0x000813b1
   81e5c:	20070b0c 	.word	0x20070b0c
   81e60:	00080fc1 	.word	0x00080fc1
   81e64:	00085868 	.word	0x00085868
   81e68:	00085850 	.word	0x00085850
   81e6c:	0008585c 	.word	0x0008585c
   81e70:	0008192d 	.word	0x0008192d
   81e74:	00081919 	.word	0x00081919

00081e78 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81e78:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81e7a:	480e      	ldr	r0, [pc, #56]	; (81eb4 <sysclk_init+0x3c>)
   81e7c:	4b0e      	ldr	r3, [pc, #56]	; (81eb8 <sysclk_init+0x40>)
   81e7e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81e80:	2000      	movs	r0, #0
   81e82:	213e      	movs	r1, #62	; 0x3e
   81e84:	4b0d      	ldr	r3, [pc, #52]	; (81ebc <sysclk_init+0x44>)
   81e86:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81e88:	4c0d      	ldr	r4, [pc, #52]	; (81ec0 <sysclk_init+0x48>)
   81e8a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81e8c:	2800      	cmp	r0, #0
   81e8e:	d0fc      	beq.n	81e8a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81e90:	4b0c      	ldr	r3, [pc, #48]	; (81ec4 <sysclk_init+0x4c>)
   81e92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81e94:	4a0c      	ldr	r2, [pc, #48]	; (81ec8 <sysclk_init+0x50>)
   81e96:	4b0d      	ldr	r3, [pc, #52]	; (81ecc <sysclk_init+0x54>)
   81e98:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81e9a:	4c0d      	ldr	r4, [pc, #52]	; (81ed0 <sysclk_init+0x58>)
   81e9c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81e9e:	2800      	cmp	r0, #0
   81ea0:	d0fc      	beq.n	81e9c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81ea2:	2010      	movs	r0, #16
   81ea4:	4b0b      	ldr	r3, [pc, #44]	; (81ed4 <sysclk_init+0x5c>)
   81ea6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81ea8:	4b0b      	ldr	r3, [pc, #44]	; (81ed8 <sysclk_init+0x60>)
   81eaa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81eac:	4801      	ldr	r0, [pc, #4]	; (81eb4 <sysclk_init+0x3c>)
   81eae:	4b02      	ldr	r3, [pc, #8]	; (81eb8 <sysclk_init+0x40>)
   81eb0:	4798      	blx	r3
   81eb2:	bd10      	pop	{r4, pc}
   81eb4:	0501bd00 	.word	0x0501bd00
   81eb8:	200700a5 	.word	0x200700a5
   81ebc:	00082271 	.word	0x00082271
   81ec0:	000822c5 	.word	0x000822c5
   81ec4:	000822d5 	.word	0x000822d5
   81ec8:	200d3f01 	.word	0x200d3f01
   81ecc:	400e0600 	.word	0x400e0600
   81ed0:	000822e5 	.word	0x000822e5
   81ed4:	0008220d 	.word	0x0008220d
   81ed8:	00082401 	.word	0x00082401

00081edc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81edc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81ede:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81ee2:	4b12      	ldr	r3, [pc, #72]	; (81f2c <board_init+0x50>)
   81ee4:	605a      	str	r2, [r3, #4]
   81ee6:	200b      	movs	r0, #11
   81ee8:	4c11      	ldr	r4, [pc, #68]	; (81f30 <board_init+0x54>)
   81eea:	47a0      	blx	r4
   81eec:	200c      	movs	r0, #12
   81eee:	47a0      	blx	r4
   81ef0:	200d      	movs	r0, #13
   81ef2:	47a0      	blx	r4
   81ef4:	200e      	movs	r0, #14
   81ef6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81ef8:	203b      	movs	r0, #59	; 0x3b
   81efa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81efe:	4c0d      	ldr	r4, [pc, #52]	; (81f34 <board_init+0x58>)
   81f00:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81f02:	2055      	movs	r0, #85	; 0x55
   81f04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f08:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81f0a:	2056      	movs	r0, #86	; 0x56
   81f0c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f10:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81f12:	2068      	movs	r0, #104	; 0x68
   81f14:	4908      	ldr	r1, [pc, #32]	; (81f38 <board_init+0x5c>)
   81f16:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81f18:	205c      	movs	r0, #92	; 0x5c
   81f1a:	4908      	ldr	r1, [pc, #32]	; (81f3c <board_init+0x60>)
   81f1c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81f1e:	4808      	ldr	r0, [pc, #32]	; (81f40 <board_init+0x64>)
   81f20:	f44f 7140 	mov.w	r1, #768	; 0x300
   81f24:	4a07      	ldr	r2, [pc, #28]	; (81f44 <board_init+0x68>)
   81f26:	4b08      	ldr	r3, [pc, #32]	; (81f48 <board_init+0x6c>)
   81f28:	4798      	blx	r3
   81f2a:	bd10      	pop	{r4, pc}
   81f2c:	400e1a50 	.word	0x400e1a50
   81f30:	000822f5 	.word	0x000822f5
   81f34:	00081ff1 	.word	0x00081ff1
   81f38:	28000079 	.word	0x28000079
   81f3c:	28000001 	.word	0x28000001
   81f40:	400e0e00 	.word	0x400e0e00
   81f44:	08000001 	.word	0x08000001
   81f48:	000820c5 	.word	0x000820c5

00081f4c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81f4c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81f4e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81f52:	d016      	beq.n	81f82 <pio_set_peripheral+0x36>
   81f54:	d804      	bhi.n	81f60 <pio_set_peripheral+0x14>
   81f56:	b1c1      	cbz	r1, 81f8a <pio_set_peripheral+0x3e>
   81f58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81f5c:	d00a      	beq.n	81f74 <pio_set_peripheral+0x28>
   81f5e:	e013      	b.n	81f88 <pio_set_peripheral+0x3c>
   81f60:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81f64:	d011      	beq.n	81f8a <pio_set_peripheral+0x3e>
   81f66:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81f6a:	d00e      	beq.n	81f8a <pio_set_peripheral+0x3e>
   81f6c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81f70:	d10a      	bne.n	81f88 <pio_set_peripheral+0x3c>
   81f72:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81f74:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81f76:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81f78:	400b      	ands	r3, r1
   81f7a:	ea23 0302 	bic.w	r3, r3, r2
   81f7e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81f80:	e002      	b.n	81f88 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81f82:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81f84:	4313      	orrs	r3, r2
   81f86:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81f88:	6042      	str	r2, [r0, #4]
   81f8a:	4770      	bx	lr

00081f8c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81f8c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81f8e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81f92:	bf14      	ite	ne
   81f94:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81f96:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81f98:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81f9c:	bf14      	ite	ne
   81f9e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81fa0:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81fa2:	f012 0f02 	tst.w	r2, #2
   81fa6:	d002      	beq.n	81fae <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81fa8:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81fac:	e004      	b.n	81fb8 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81fae:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81fb2:	bf18      	it	ne
   81fb4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81fb8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81fba:	6001      	str	r1, [r0, #0]
   81fbc:	4770      	bx	lr
   81fbe:	bf00      	nop

00081fc0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81fc0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81fc2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81fc4:	9c01      	ldr	r4, [sp, #4]
   81fc6:	b10c      	cbz	r4, 81fcc <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81fc8:	6641      	str	r1, [r0, #100]	; 0x64
   81fca:	e000      	b.n	81fce <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81fcc:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81fce:	b10b      	cbz	r3, 81fd4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81fd0:	6501      	str	r1, [r0, #80]	; 0x50
   81fd2:	e000      	b.n	81fd6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81fd4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81fd6:	b10a      	cbz	r2, 81fdc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81fd8:	6301      	str	r1, [r0, #48]	; 0x30
   81fda:	e000      	b.n	81fde <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81fdc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81fde:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81fe0:	6001      	str	r1, [r0, #0]
}
   81fe2:	f85d 4b04 	ldr.w	r4, [sp], #4
   81fe6:	4770      	bx	lr

00081fe8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81fe8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81fea:	4770      	bx	lr

00081fec <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81fec:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81fee:	4770      	bx	lr

00081ff0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81ff0:	b570      	push	{r4, r5, r6, lr}
   81ff2:	b082      	sub	sp, #8
   81ff4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ff6:	0944      	lsrs	r4, r0, #5
   81ff8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81ffc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   82000:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82002:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   82006:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8200a:	d030      	beq.n	8206e <pio_configure_pin+0x7e>
   8200c:	d806      	bhi.n	8201c <pio_configure_pin+0x2c>
   8200e:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   82012:	d00a      	beq.n	8202a <pio_configure_pin+0x3a>
   82014:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   82018:	d018      	beq.n	8204c <pio_configure_pin+0x5c>
   8201a:	e049      	b.n	820b0 <pio_configure_pin+0xc0>
   8201c:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   82020:	d030      	beq.n	82084 <pio_configure_pin+0x94>
   82022:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   82026:	d02d      	beq.n	82084 <pio_configure_pin+0x94>
   82028:	e042      	b.n	820b0 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8202a:	f000 001f 	and.w	r0, r0, #31
   8202e:	2401      	movs	r4, #1
   82030:	4084      	lsls	r4, r0
   82032:	4630      	mov	r0, r6
   82034:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82038:	4622      	mov	r2, r4
   8203a:	4b1f      	ldr	r3, [pc, #124]	; (820b8 <pio_configure_pin+0xc8>)
   8203c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8203e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82042:	bf14      	ite	ne
   82044:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82046:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82048:	2001      	movs	r0, #1
   8204a:	e032      	b.n	820b2 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8204c:	f000 001f 	and.w	r0, r0, #31
   82050:	2401      	movs	r4, #1
   82052:	4084      	lsls	r4, r0
   82054:	4630      	mov	r0, r6
   82056:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8205a:	4622      	mov	r2, r4
   8205c:	4b16      	ldr	r3, [pc, #88]	; (820b8 <pio_configure_pin+0xc8>)
   8205e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82060:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82064:	bf14      	ite	ne
   82066:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82068:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8206a:	2001      	movs	r0, #1
   8206c:	e021      	b.n	820b2 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8206e:	f000 011f 	and.w	r1, r0, #31
   82072:	2401      	movs	r4, #1
   82074:	4630      	mov	r0, r6
   82076:	fa04 f101 	lsl.w	r1, r4, r1
   8207a:	462a      	mov	r2, r5
   8207c:	4b0f      	ldr	r3, [pc, #60]	; (820bc <pio_configure_pin+0xcc>)
   8207e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82080:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82082:	e016      	b.n	820b2 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82084:	f000 011f 	and.w	r1, r0, #31
   82088:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8208a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8208e:	ea05 0304 	and.w	r3, r5, r4
   82092:	9300      	str	r3, [sp, #0]
   82094:	4630      	mov	r0, r6
   82096:	fa04 f101 	lsl.w	r1, r4, r1
   8209a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8209e:	bf14      	ite	ne
   820a0:	2200      	movne	r2, #0
   820a2:	2201      	moveq	r2, #1
   820a4:	f3c5 0380 	ubfx	r3, r5, #2, #1
   820a8:	4d05      	ldr	r5, [pc, #20]	; (820c0 <pio_configure_pin+0xd0>)
   820aa:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   820ac:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   820ae:	e000      	b.n	820b2 <pio_configure_pin+0xc2>

	default:
		return 0;
   820b0:	2000      	movs	r0, #0
	}

	return 1;
}
   820b2:	b002      	add	sp, #8
   820b4:	bd70      	pop	{r4, r5, r6, pc}
   820b6:	bf00      	nop
   820b8:	00081f4d 	.word	0x00081f4d
   820bc:	00081f8d 	.word	0x00081f8d
   820c0:	00081fc1 	.word	0x00081fc1

000820c4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   820c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   820c6:	b083      	sub	sp, #12
   820c8:	4607      	mov	r7, r0
   820ca:	460e      	mov	r6, r1
   820cc:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   820ce:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   820d2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   820d6:	d026      	beq.n	82126 <pio_configure_pin_group+0x62>
   820d8:	d806      	bhi.n	820e8 <pio_configure_pin_group+0x24>
   820da:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   820de:	d00a      	beq.n	820f6 <pio_configure_pin_group+0x32>
   820e0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   820e4:	d013      	beq.n	8210e <pio_configure_pin_group+0x4a>
   820e6:	e034      	b.n	82152 <pio_configure_pin_group+0x8e>
   820e8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   820ec:	d01f      	beq.n	8212e <pio_configure_pin_group+0x6a>
   820ee:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   820f2:	d01c      	beq.n	8212e <pio_configure_pin_group+0x6a>
   820f4:	e02d      	b.n	82152 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   820f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   820fa:	4632      	mov	r2, r6
   820fc:	4b16      	ldr	r3, [pc, #88]	; (82158 <pio_configure_pin_group+0x94>)
   820fe:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82100:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82104:	bf14      	ite	ne
   82106:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82108:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8210a:	2001      	movs	r0, #1
   8210c:	e022      	b.n	82154 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8210e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82112:	4632      	mov	r2, r6
   82114:	4b10      	ldr	r3, [pc, #64]	; (82158 <pio_configure_pin_group+0x94>)
   82116:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82118:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8211c:	bf14      	ite	ne
   8211e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82120:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   82122:	2001      	movs	r0, #1
   82124:	e016      	b.n	82154 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82126:	4b0d      	ldr	r3, [pc, #52]	; (8215c <pio_configure_pin_group+0x98>)
   82128:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8212a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8212c:	e012      	b.n	82154 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8212e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82132:	f005 0301 	and.w	r3, r5, #1
   82136:	9300      	str	r3, [sp, #0]
   82138:	4638      	mov	r0, r7
   8213a:	4631      	mov	r1, r6
   8213c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82140:	bf14      	ite	ne
   82142:	2200      	movne	r2, #0
   82144:	2201      	moveq	r2, #1
   82146:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8214a:	4c05      	ldr	r4, [pc, #20]	; (82160 <pio_configure_pin_group+0x9c>)
   8214c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8214e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82150:	e000      	b.n	82154 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82152:	2000      	movs	r0, #0
	}

	return 1;
}
   82154:	b003      	add	sp, #12
   82156:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82158:	00081f4d 	.word	0x00081f4d
   8215c:	00081f8d 	.word	0x00081f8d
   82160:	00081fc1 	.word	0x00081fc1

00082164 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82168:	4604      	mov	r4, r0
   8216a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8216c:	4b10      	ldr	r3, [pc, #64]	; (821b0 <pio_handler_process+0x4c>)
   8216e:	4798      	blx	r3
   82170:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82172:	4620      	mov	r0, r4
   82174:	4b0f      	ldr	r3, [pc, #60]	; (821b4 <pio_handler_process+0x50>)
   82176:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82178:	4005      	ands	r5, r0
   8217a:	d017      	beq.n	821ac <pio_handler_process+0x48>
   8217c:	4f0e      	ldr	r7, [pc, #56]	; (821b8 <pio_handler_process+0x54>)
   8217e:	f107 040c 	add.w	r4, r7, #12
   82182:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82184:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   82188:	42b3      	cmp	r3, r6
   8218a:	d10a      	bne.n	821a2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8218c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82190:	4229      	tst	r1, r5
   82192:	d006      	beq.n	821a2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82194:	6823      	ldr	r3, [r4, #0]
   82196:	4630      	mov	r0, r6
   82198:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8219a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8219e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   821a2:	42bc      	cmp	r4, r7
   821a4:	d002      	beq.n	821ac <pio_handler_process+0x48>
   821a6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   821a8:	2d00      	cmp	r5, #0
   821aa:	d1eb      	bne.n	82184 <pio_handler_process+0x20>
   821ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821b0:	00081fe9 	.word	0x00081fe9
   821b4:	00081fed 	.word	0x00081fed
   821b8:	20070a58 	.word	0x20070a58

000821bc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   821bc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   821be:	4802      	ldr	r0, [pc, #8]	; (821c8 <PIOA_Handler+0xc>)
   821c0:	210b      	movs	r1, #11
   821c2:	4b02      	ldr	r3, [pc, #8]	; (821cc <PIOA_Handler+0x10>)
   821c4:	4798      	blx	r3
   821c6:	bd08      	pop	{r3, pc}
   821c8:	400e0e00 	.word	0x400e0e00
   821cc:	00082165 	.word	0x00082165

000821d0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   821d0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   821d2:	4802      	ldr	r0, [pc, #8]	; (821dc <PIOB_Handler+0xc>)
   821d4:	210c      	movs	r1, #12
   821d6:	4b02      	ldr	r3, [pc, #8]	; (821e0 <PIOB_Handler+0x10>)
   821d8:	4798      	blx	r3
   821da:	bd08      	pop	{r3, pc}
   821dc:	400e1000 	.word	0x400e1000
   821e0:	00082165 	.word	0x00082165

000821e4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   821e4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   821e6:	4802      	ldr	r0, [pc, #8]	; (821f0 <PIOC_Handler+0xc>)
   821e8:	210d      	movs	r1, #13
   821ea:	4b02      	ldr	r3, [pc, #8]	; (821f4 <PIOC_Handler+0x10>)
   821ec:	4798      	blx	r3
   821ee:	bd08      	pop	{r3, pc}
   821f0:	400e1200 	.word	0x400e1200
   821f4:	00082165 	.word	0x00082165

000821f8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   821f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   821fa:	4802      	ldr	r0, [pc, #8]	; (82204 <PIOD_Handler+0xc>)
   821fc:	210e      	movs	r1, #14
   821fe:	4b02      	ldr	r3, [pc, #8]	; (82208 <PIOD_Handler+0x10>)
   82200:	4798      	blx	r3
   82202:	bd08      	pop	{r3, pc}
   82204:	400e1400 	.word	0x400e1400
   82208:	00082165 	.word	0x00082165

0008220c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8220c:	4b17      	ldr	r3, [pc, #92]	; (8226c <pmc_switch_mck_to_pllack+0x60>)
   8220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82210:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   82214:	4310      	orrs	r0, r2
   82216:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8221a:	f013 0f08 	tst.w	r3, #8
   8221e:	d109      	bne.n	82234 <pmc_switch_mck_to_pllack+0x28>
   82220:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82224:	4911      	ldr	r1, [pc, #68]	; (8226c <pmc_switch_mck_to_pllack+0x60>)
   82226:	e001      	b.n	8222c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82228:	3b01      	subs	r3, #1
   8222a:	d019      	beq.n	82260 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8222c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8222e:	f012 0f08 	tst.w	r2, #8
   82232:	d0f9      	beq.n	82228 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82234:	4b0d      	ldr	r3, [pc, #52]	; (8226c <pmc_switch_mck_to_pllack+0x60>)
   82236:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82238:	f022 0203 	bic.w	r2, r2, #3
   8223c:	f042 0202 	orr.w	r2, r2, #2
   82240:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82242:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82244:	f010 0008 	ands.w	r0, r0, #8
   82248:	d10c      	bne.n	82264 <pmc_switch_mck_to_pllack+0x58>
   8224a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8224e:	4907      	ldr	r1, [pc, #28]	; (8226c <pmc_switch_mck_to_pllack+0x60>)
   82250:	e001      	b.n	82256 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82252:	3b01      	subs	r3, #1
   82254:	d008      	beq.n	82268 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82256:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82258:	f012 0f08 	tst.w	r2, #8
   8225c:	d0f9      	beq.n	82252 <pmc_switch_mck_to_pllack+0x46>
   8225e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82260:	2001      	movs	r0, #1
   82262:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82264:	2000      	movs	r0, #0
   82266:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82268:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8226a:	4770      	bx	lr
   8226c:	400e0600 	.word	0x400e0600

00082270 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82270:	b138      	cbz	r0, 82282 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82272:	4911      	ldr	r1, [pc, #68]	; (822b8 <pmc_switch_mainck_to_xtal+0x48>)
   82274:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82276:	4a11      	ldr	r2, [pc, #68]	; (822bc <pmc_switch_mainck_to_xtal+0x4c>)
   82278:	401a      	ands	r2, r3
   8227a:	4b11      	ldr	r3, [pc, #68]	; (822c0 <pmc_switch_mainck_to_xtal+0x50>)
   8227c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8227e:	620b      	str	r3, [r1, #32]
   82280:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82282:	4a0d      	ldr	r2, [pc, #52]	; (822b8 <pmc_switch_mainck_to_xtal+0x48>)
   82284:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82286:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8228a:	f023 0303 	bic.w	r3, r3, #3
   8228e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82292:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82296:	0209      	lsls	r1, r1, #8
   82298:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8229a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8229c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8229e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   822a0:	f013 0f01 	tst.w	r3, #1
   822a4:	d0fb      	beq.n	8229e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   822a6:	4a04      	ldr	r2, [pc, #16]	; (822b8 <pmc_switch_mainck_to_xtal+0x48>)
   822a8:	6a13      	ldr	r3, [r2, #32]
   822aa:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   822ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   822b2:	6213      	str	r3, [r2, #32]
   822b4:	4770      	bx	lr
   822b6:	bf00      	nop
   822b8:	400e0600 	.word	0x400e0600
   822bc:	fec8fffc 	.word	0xfec8fffc
   822c0:	01370002 	.word	0x01370002

000822c4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   822c4:	4b02      	ldr	r3, [pc, #8]	; (822d0 <pmc_osc_is_ready_mainck+0xc>)
   822c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   822c8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   822cc:	4770      	bx	lr
   822ce:	bf00      	nop
   822d0:	400e0600 	.word	0x400e0600

000822d4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   822d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   822d8:	4b01      	ldr	r3, [pc, #4]	; (822e0 <pmc_disable_pllack+0xc>)
   822da:	629a      	str	r2, [r3, #40]	; 0x28
   822dc:	4770      	bx	lr
   822de:	bf00      	nop
   822e0:	400e0600 	.word	0x400e0600

000822e4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   822e4:	4b02      	ldr	r3, [pc, #8]	; (822f0 <pmc_is_locked_pllack+0xc>)
   822e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   822e8:	f000 0002 	and.w	r0, r0, #2
   822ec:	4770      	bx	lr
   822ee:	bf00      	nop
   822f0:	400e0600 	.word	0x400e0600

000822f4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   822f4:	282c      	cmp	r0, #44	; 0x2c
   822f6:	d820      	bhi.n	8233a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   822f8:	281f      	cmp	r0, #31
   822fa:	d80d      	bhi.n	82318 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   822fc:	4b12      	ldr	r3, [pc, #72]	; (82348 <pmc_enable_periph_clk+0x54>)
   822fe:	699a      	ldr	r2, [r3, #24]
   82300:	2301      	movs	r3, #1
   82302:	4083      	lsls	r3, r0
   82304:	401a      	ands	r2, r3
   82306:	4293      	cmp	r3, r2
   82308:	d019      	beq.n	8233e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8230a:	2301      	movs	r3, #1
   8230c:	fa03 f000 	lsl.w	r0, r3, r0
   82310:	4b0d      	ldr	r3, [pc, #52]	; (82348 <pmc_enable_periph_clk+0x54>)
   82312:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82314:	2000      	movs	r0, #0
   82316:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82318:	4b0b      	ldr	r3, [pc, #44]	; (82348 <pmc_enable_periph_clk+0x54>)
   8231a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   8231e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82320:	2301      	movs	r3, #1
   82322:	4083      	lsls	r3, r0
   82324:	401a      	ands	r2, r3
   82326:	4293      	cmp	r3, r2
   82328:	d00b      	beq.n	82342 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8232a:	2301      	movs	r3, #1
   8232c:	fa03 f000 	lsl.w	r0, r3, r0
   82330:	4b05      	ldr	r3, [pc, #20]	; (82348 <pmc_enable_periph_clk+0x54>)
   82332:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   82336:	2000      	movs	r0, #0
   82338:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8233a:	2001      	movs	r0, #1
   8233c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8233e:	2000      	movs	r0, #0
   82340:	4770      	bx	lr
   82342:	2000      	movs	r0, #0
}
   82344:	4770      	bx	lr
   82346:	bf00      	nop
   82348:	400e0600 	.word	0x400e0600

0008234c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8234c:	e7fe      	b.n	8234c <Dummy_Handler>
   8234e:	bf00      	nop

00082350 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82350:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82352:	4b1e      	ldr	r3, [pc, #120]	; (823cc <Reset_Handler+0x7c>)
   82354:	4a1e      	ldr	r2, [pc, #120]	; (823d0 <Reset_Handler+0x80>)
   82356:	429a      	cmp	r2, r3
   82358:	d003      	beq.n	82362 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8235a:	4b1e      	ldr	r3, [pc, #120]	; (823d4 <Reset_Handler+0x84>)
   8235c:	4a1b      	ldr	r2, [pc, #108]	; (823cc <Reset_Handler+0x7c>)
   8235e:	429a      	cmp	r2, r3
   82360:	d304      	bcc.n	8236c <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82362:	4b1d      	ldr	r3, [pc, #116]	; (823d8 <Reset_Handler+0x88>)
   82364:	4a1d      	ldr	r2, [pc, #116]	; (823dc <Reset_Handler+0x8c>)
   82366:	429a      	cmp	r2, r3
   82368:	d30f      	bcc.n	8238a <Reset_Handler+0x3a>
   8236a:	e01a      	b.n	823a2 <Reset_Handler+0x52>
   8236c:	4b1c      	ldr	r3, [pc, #112]	; (823e0 <Reset_Handler+0x90>)
   8236e:	4c1d      	ldr	r4, [pc, #116]	; (823e4 <Reset_Handler+0x94>)
   82370:	1ae4      	subs	r4, r4, r3
   82372:	f024 0403 	bic.w	r4, r4, #3
   82376:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82378:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8237a:	4814      	ldr	r0, [pc, #80]	; (823cc <Reset_Handler+0x7c>)
   8237c:	4914      	ldr	r1, [pc, #80]	; (823d0 <Reset_Handler+0x80>)
   8237e:	585a      	ldr	r2, [r3, r1]
   82380:	501a      	str	r2, [r3, r0]
   82382:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82384:	42a3      	cmp	r3, r4
   82386:	d1fa      	bne.n	8237e <Reset_Handler+0x2e>
   82388:	e7eb      	b.n	82362 <Reset_Handler+0x12>
   8238a:	4b17      	ldr	r3, [pc, #92]	; (823e8 <Reset_Handler+0x98>)
   8238c:	4917      	ldr	r1, [pc, #92]	; (823ec <Reset_Handler+0x9c>)
   8238e:	1ac9      	subs	r1, r1, r3
   82390:	f021 0103 	bic.w	r1, r1, #3
   82394:	1d1a      	adds	r2, r3, #4
   82396:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   82398:	2200      	movs	r2, #0
   8239a:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8239e:	428b      	cmp	r3, r1
   823a0:	d1fb      	bne.n	8239a <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   823a2:	4a13      	ldr	r2, [pc, #76]	; (823f0 <Reset_Handler+0xa0>)
   823a4:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   823a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   823ac:	4911      	ldr	r1, [pc, #68]	; (823f4 <Reset_Handler+0xa4>)
   823ae:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   823b0:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   823b4:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   823b8:	d203      	bcs.n	823c2 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   823ba:	688a      	ldr	r2, [r1, #8]
   823bc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   823c0:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   823c2:	4b0d      	ldr	r3, [pc, #52]	; (823f8 <Reset_Handler+0xa8>)
   823c4:	4798      	blx	r3

	/* Branch to main function */
	main();
   823c6:	4b0d      	ldr	r3, [pc, #52]	; (823fc <Reset_Handler+0xac>)
   823c8:	4798      	blx	r3
   823ca:	e7fe      	b.n	823ca <Reset_Handler+0x7a>
   823cc:	20070000 	.word	0x20070000
   823d0:	00085918 	.word	0x00085918
   823d4:	2007099c 	.word	0x2007099c
   823d8:	20070b8c 	.word	0x20070b8c
   823dc:	2007099c 	.word	0x2007099c
   823e0:	20070004 	.word	0x20070004
   823e4:	2007099f 	.word	0x2007099f
   823e8:	20070998 	.word	0x20070998
   823ec:	20070b87 	.word	0x20070b87
   823f0:	00080000 	.word	0x00080000
   823f4:	e000ed00 	.word	0xe000ed00
   823f8:	0008256d 	.word	0x0008256d
   823fc:	000807bd 	.word	0x000807bd

00082400 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82400:	4b3e      	ldr	r3, [pc, #248]	; (824fc <SystemCoreClockUpdate+0xfc>)
   82402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82404:	f003 0303 	and.w	r3, r3, #3
   82408:	2b03      	cmp	r3, #3
   8240a:	d85f      	bhi.n	824cc <SystemCoreClockUpdate+0xcc>
   8240c:	e8df f003 	tbb	[pc, r3]
   82410:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82414:	4b3a      	ldr	r3, [pc, #232]	; (82500 <SystemCoreClockUpdate+0x100>)
   82416:	695b      	ldr	r3, [r3, #20]
   82418:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8241c:	bf14      	ite	ne
   8241e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82422:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82426:	4b37      	ldr	r3, [pc, #220]	; (82504 <SystemCoreClockUpdate+0x104>)
   82428:	601a      	str	r2, [r3, #0]
   8242a:	e04f      	b.n	824cc <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8242c:	4b33      	ldr	r3, [pc, #204]	; (824fc <SystemCoreClockUpdate+0xfc>)
   8242e:	6a1b      	ldr	r3, [r3, #32]
   82430:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82434:	d003      	beq.n	8243e <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82436:	4a34      	ldr	r2, [pc, #208]	; (82508 <SystemCoreClockUpdate+0x108>)
   82438:	4b32      	ldr	r3, [pc, #200]	; (82504 <SystemCoreClockUpdate+0x104>)
   8243a:	601a      	str	r2, [r3, #0]
   8243c:	e046      	b.n	824cc <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8243e:	4a33      	ldr	r2, [pc, #204]	; (8250c <SystemCoreClockUpdate+0x10c>)
   82440:	4b30      	ldr	r3, [pc, #192]	; (82504 <SystemCoreClockUpdate+0x104>)
   82442:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82444:	4b2d      	ldr	r3, [pc, #180]	; (824fc <SystemCoreClockUpdate+0xfc>)
   82446:	6a1b      	ldr	r3, [r3, #32]
   82448:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8244c:	2b10      	cmp	r3, #16
   8244e:	d002      	beq.n	82456 <SystemCoreClockUpdate+0x56>
   82450:	2b20      	cmp	r3, #32
   82452:	d004      	beq.n	8245e <SystemCoreClockUpdate+0x5e>
   82454:	e03a      	b.n	824cc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82456:	4a2e      	ldr	r2, [pc, #184]	; (82510 <SystemCoreClockUpdate+0x110>)
   82458:	4b2a      	ldr	r3, [pc, #168]	; (82504 <SystemCoreClockUpdate+0x104>)
   8245a:	601a      	str	r2, [r3, #0]
				break;
   8245c:	e036      	b.n	824cc <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8245e:	4a2a      	ldr	r2, [pc, #168]	; (82508 <SystemCoreClockUpdate+0x108>)
   82460:	4b28      	ldr	r3, [pc, #160]	; (82504 <SystemCoreClockUpdate+0x104>)
   82462:	601a      	str	r2, [r3, #0]
				break;
   82464:	e032      	b.n	824cc <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82466:	4b25      	ldr	r3, [pc, #148]	; (824fc <SystemCoreClockUpdate+0xfc>)
   82468:	6a1b      	ldr	r3, [r3, #32]
   8246a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8246e:	d003      	beq.n	82478 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82470:	4a25      	ldr	r2, [pc, #148]	; (82508 <SystemCoreClockUpdate+0x108>)
   82472:	4b24      	ldr	r3, [pc, #144]	; (82504 <SystemCoreClockUpdate+0x104>)
   82474:	601a      	str	r2, [r3, #0]
   82476:	e012      	b.n	8249e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82478:	4a24      	ldr	r2, [pc, #144]	; (8250c <SystemCoreClockUpdate+0x10c>)
   8247a:	4b22      	ldr	r3, [pc, #136]	; (82504 <SystemCoreClockUpdate+0x104>)
   8247c:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8247e:	4b1f      	ldr	r3, [pc, #124]	; (824fc <SystemCoreClockUpdate+0xfc>)
   82480:	6a1b      	ldr	r3, [r3, #32]
   82482:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82486:	2b10      	cmp	r3, #16
   82488:	d002      	beq.n	82490 <SystemCoreClockUpdate+0x90>
   8248a:	2b20      	cmp	r3, #32
   8248c:	d004      	beq.n	82498 <SystemCoreClockUpdate+0x98>
   8248e:	e006      	b.n	8249e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82490:	4a1f      	ldr	r2, [pc, #124]	; (82510 <SystemCoreClockUpdate+0x110>)
   82492:	4b1c      	ldr	r3, [pc, #112]	; (82504 <SystemCoreClockUpdate+0x104>)
   82494:	601a      	str	r2, [r3, #0]
				break;
   82496:	e002      	b.n	8249e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82498:	4a1b      	ldr	r2, [pc, #108]	; (82508 <SystemCoreClockUpdate+0x108>)
   8249a:	4b1a      	ldr	r3, [pc, #104]	; (82504 <SystemCoreClockUpdate+0x104>)
   8249c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8249e:	4b17      	ldr	r3, [pc, #92]	; (824fc <SystemCoreClockUpdate+0xfc>)
   824a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   824a2:	f003 0303 	and.w	r3, r3, #3
   824a6:	2b02      	cmp	r3, #2
   824a8:	d10d      	bne.n	824c6 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   824aa:	4b14      	ldr	r3, [pc, #80]	; (824fc <SystemCoreClockUpdate+0xfc>)
   824ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   824ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
   824b0:	4b14      	ldr	r3, [pc, #80]	; (82504 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   824b2:	f3c0 400a 	ubfx	r0, r0, #16, #11
   824b6:	681a      	ldr	r2, [r3, #0]
   824b8:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   824bc:	b2c9      	uxtb	r1, r1
   824be:	fbb2 f2f1 	udiv	r2, r2, r1
   824c2:	601a      	str	r2, [r3, #0]
   824c4:	e002      	b.n	824cc <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   824c6:	4a13      	ldr	r2, [pc, #76]	; (82514 <SystemCoreClockUpdate+0x114>)
   824c8:	4b0e      	ldr	r3, [pc, #56]	; (82504 <SystemCoreClockUpdate+0x104>)
   824ca:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   824cc:	4b0b      	ldr	r3, [pc, #44]	; (824fc <SystemCoreClockUpdate+0xfc>)
   824ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   824d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824d4:	2b70      	cmp	r3, #112	; 0x70
   824d6:	d107      	bne.n	824e8 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   824d8:	4b0a      	ldr	r3, [pc, #40]	; (82504 <SystemCoreClockUpdate+0x104>)
   824da:	681a      	ldr	r2, [r3, #0]
   824dc:	490e      	ldr	r1, [pc, #56]	; (82518 <SystemCoreClockUpdate+0x118>)
   824de:	fba1 0202 	umull	r0, r2, r1, r2
   824e2:	0852      	lsrs	r2, r2, #1
   824e4:	601a      	str	r2, [r3, #0]
   824e6:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   824e8:	4b04      	ldr	r3, [pc, #16]	; (824fc <SystemCoreClockUpdate+0xfc>)
   824ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
   824ec:	4b05      	ldr	r3, [pc, #20]	; (82504 <SystemCoreClockUpdate+0x104>)
   824ee:	f3c1 1102 	ubfx	r1, r1, #4, #3
   824f2:	681a      	ldr	r2, [r3, #0]
   824f4:	40ca      	lsrs	r2, r1
   824f6:	601a      	str	r2, [r3, #0]
   824f8:	4770      	bx	lr
   824fa:	bf00      	nop
   824fc:	400e0600 	.word	0x400e0600
   82500:	400e1a10 	.word	0x400e1a10
   82504:	20070130 	.word	0x20070130
   82508:	00b71b00 	.word	0x00b71b00
   8250c:	003d0900 	.word	0x003d0900
   82510:	007a1200 	.word	0x007a1200
   82514:	0e4e1c00 	.word	0x0e4e1c00
   82518:	aaaaaaab 	.word	0xaaaaaaab

0008251c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8251c:	4b09      	ldr	r3, [pc, #36]	; (82544 <_sbrk+0x28>)
   8251e:	681b      	ldr	r3, [r3, #0]
   82520:	b913      	cbnz	r3, 82528 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82522:	4a09      	ldr	r2, [pc, #36]	; (82548 <_sbrk+0x2c>)
   82524:	4b07      	ldr	r3, [pc, #28]	; (82544 <_sbrk+0x28>)
   82526:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82528:	4b06      	ldr	r3, [pc, #24]	; (82544 <_sbrk+0x28>)
   8252a:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8252c:	181a      	adds	r2, r3, r0
   8252e:	4907      	ldr	r1, [pc, #28]	; (8254c <_sbrk+0x30>)
   82530:	4291      	cmp	r1, r2
   82532:	db04      	blt.n	8253e <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82534:	4610      	mov	r0, r2
   82536:	4a03      	ldr	r2, [pc, #12]	; (82544 <_sbrk+0x28>)
   82538:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8253a:	4618      	mov	r0, r3
   8253c:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   8253e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82542:	4770      	bx	lr
   82544:	20070ac8 	.word	0x20070ac8
   82548:	20072b90 	.word	0x20072b90
   8254c:	20087ffc 	.word	0x20087ffc

00082550 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82550:	f04f 30ff 	mov.w	r0, #4294967295
   82554:	4770      	bx	lr
   82556:	bf00      	nop

00082558 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8255c:	604b      	str	r3, [r1, #4]

	return 0;
}
   8255e:	2000      	movs	r0, #0
   82560:	4770      	bx	lr
   82562:	bf00      	nop

00082564 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82564:	2001      	movs	r0, #1
   82566:	4770      	bx	lr

00082568 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82568:	2000      	movs	r0, #0
   8256a:	4770      	bx	lr

0008256c <__libc_init_array>:
   8256c:	b570      	push	{r4, r5, r6, lr}
   8256e:	4e0f      	ldr	r6, [pc, #60]	; (825ac <__libc_init_array+0x40>)
   82570:	4d0f      	ldr	r5, [pc, #60]	; (825b0 <__libc_init_array+0x44>)
   82572:	1b76      	subs	r6, r6, r5
   82574:	10b6      	asrs	r6, r6, #2
   82576:	d007      	beq.n	82588 <__libc_init_array+0x1c>
   82578:	3d04      	subs	r5, #4
   8257a:	2400      	movs	r4, #0
   8257c:	3401      	adds	r4, #1
   8257e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82582:	4798      	blx	r3
   82584:	42a6      	cmp	r6, r4
   82586:	d1f9      	bne.n	8257c <__libc_init_array+0x10>
   82588:	4e0a      	ldr	r6, [pc, #40]	; (825b4 <__libc_init_array+0x48>)
   8258a:	4d0b      	ldr	r5, [pc, #44]	; (825b8 <__libc_init_array+0x4c>)
   8258c:	f003 f9ae 	bl	858ec <_init>
   82590:	1b76      	subs	r6, r6, r5
   82592:	10b6      	asrs	r6, r6, #2
   82594:	d008      	beq.n	825a8 <__libc_init_array+0x3c>
   82596:	3d04      	subs	r5, #4
   82598:	2400      	movs	r4, #0
   8259a:	3401      	adds	r4, #1
   8259c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   825a0:	4798      	blx	r3
   825a2:	42a6      	cmp	r6, r4
   825a4:	d1f9      	bne.n	8259a <__libc_init_array+0x2e>
   825a6:	bd70      	pop	{r4, r5, r6, pc}
   825a8:	bd70      	pop	{r4, r5, r6, pc}
   825aa:	bf00      	nop
   825ac:	000858f8 	.word	0x000858f8
   825b0:	000858f8 	.word	0x000858f8
   825b4:	00085900 	.word	0x00085900
   825b8:	000858f8 	.word	0x000858f8

000825bc <iprintf>:
   825bc:	b40f      	push	{r0, r1, r2, r3}
   825be:	b510      	push	{r4, lr}
   825c0:	4b07      	ldr	r3, [pc, #28]	; (825e0 <iprintf+0x24>)
   825c2:	b082      	sub	sp, #8
   825c4:	ac04      	add	r4, sp, #16
   825c6:	f854 2b04 	ldr.w	r2, [r4], #4
   825ca:	6818      	ldr	r0, [r3, #0]
   825cc:	4623      	mov	r3, r4
   825ce:	6881      	ldr	r1, [r0, #8]
   825d0:	9401      	str	r4, [sp, #4]
   825d2:	f000 f953 	bl	8287c <_vfiprintf_r>
   825d6:	b002      	add	sp, #8
   825d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   825dc:	b004      	add	sp, #16
   825de:	4770      	bx	lr
   825e0:	20070560 	.word	0x20070560

000825e4 <memset>:
   825e4:	b4f0      	push	{r4, r5, r6, r7}
   825e6:	0784      	lsls	r4, r0, #30
   825e8:	d043      	beq.n	82672 <memset+0x8e>
   825ea:	1e54      	subs	r4, r2, #1
   825ec:	2a00      	cmp	r2, #0
   825ee:	d03e      	beq.n	8266e <memset+0x8a>
   825f0:	b2cd      	uxtb	r5, r1
   825f2:	4603      	mov	r3, r0
   825f4:	e003      	b.n	825fe <memset+0x1a>
   825f6:	1e62      	subs	r2, r4, #1
   825f8:	2c00      	cmp	r4, #0
   825fa:	d038      	beq.n	8266e <memset+0x8a>
   825fc:	4614      	mov	r4, r2
   825fe:	f803 5b01 	strb.w	r5, [r3], #1
   82602:	079a      	lsls	r2, r3, #30
   82604:	d1f7      	bne.n	825f6 <memset+0x12>
   82606:	2c03      	cmp	r4, #3
   82608:	d92a      	bls.n	82660 <memset+0x7c>
   8260a:	b2cd      	uxtb	r5, r1
   8260c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82610:	2c0f      	cmp	r4, #15
   82612:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82616:	d915      	bls.n	82644 <memset+0x60>
   82618:	f1a4 0710 	sub.w	r7, r4, #16
   8261c:	093f      	lsrs	r7, r7, #4
   8261e:	f103 0610 	add.w	r6, r3, #16
   82622:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82626:	461a      	mov	r2, r3
   82628:	6015      	str	r5, [r2, #0]
   8262a:	6055      	str	r5, [r2, #4]
   8262c:	6095      	str	r5, [r2, #8]
   8262e:	60d5      	str	r5, [r2, #12]
   82630:	3210      	adds	r2, #16
   82632:	42b2      	cmp	r2, r6
   82634:	d1f8      	bne.n	82628 <memset+0x44>
   82636:	f004 040f 	and.w	r4, r4, #15
   8263a:	3701      	adds	r7, #1
   8263c:	2c03      	cmp	r4, #3
   8263e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82642:	d90d      	bls.n	82660 <memset+0x7c>
   82644:	461e      	mov	r6, r3
   82646:	4622      	mov	r2, r4
   82648:	3a04      	subs	r2, #4
   8264a:	2a03      	cmp	r2, #3
   8264c:	f846 5b04 	str.w	r5, [r6], #4
   82650:	d8fa      	bhi.n	82648 <memset+0x64>
   82652:	1f22      	subs	r2, r4, #4
   82654:	f022 0203 	bic.w	r2, r2, #3
   82658:	3204      	adds	r2, #4
   8265a:	4413      	add	r3, r2
   8265c:	f004 0403 	and.w	r4, r4, #3
   82660:	b12c      	cbz	r4, 8266e <memset+0x8a>
   82662:	b2c9      	uxtb	r1, r1
   82664:	441c      	add	r4, r3
   82666:	f803 1b01 	strb.w	r1, [r3], #1
   8266a:	42a3      	cmp	r3, r4
   8266c:	d1fb      	bne.n	82666 <memset+0x82>
   8266e:	bcf0      	pop	{r4, r5, r6, r7}
   82670:	4770      	bx	lr
   82672:	4614      	mov	r4, r2
   82674:	4603      	mov	r3, r0
   82676:	e7c6      	b.n	82606 <memset+0x22>

00082678 <setbuf>:
   82678:	2900      	cmp	r1, #0
   8267a:	bf0c      	ite	eq
   8267c:	2202      	moveq	r2, #2
   8267e:	2200      	movne	r2, #0
   82680:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82684:	f000 b80e 	b.w	826a4 <setvbuf>

00082688 <setjmp>:
   82688:	46ec      	mov	ip, sp
   8268a:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   8268e:	f04f 0000 	mov.w	r0, #0
   82692:	4770      	bx	lr

00082694 <longjmp>:
   82694:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   82698:	46e5      	mov	sp, ip
   8269a:	0008      	movs	r0, r1
   8269c:	bf08      	it	eq
   8269e:	2001      	moveq	r0, #1
   826a0:	4770      	bx	lr
   826a2:	bf00      	nop

000826a4 <setvbuf>:
   826a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   826a8:	4d3c      	ldr	r5, [pc, #240]	; (8279c <setvbuf+0xf8>)
   826aa:	4604      	mov	r4, r0
   826ac:	682d      	ldr	r5, [r5, #0]
   826ae:	4688      	mov	r8, r1
   826b0:	4616      	mov	r6, r2
   826b2:	461f      	mov	r7, r3
   826b4:	b115      	cbz	r5, 826bc <setvbuf+0x18>
   826b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   826b8:	2b00      	cmp	r3, #0
   826ba:	d04f      	beq.n	8275c <setvbuf+0xb8>
   826bc:	2e02      	cmp	r6, #2
   826be:	d830      	bhi.n	82722 <setvbuf+0x7e>
   826c0:	2f00      	cmp	r7, #0
   826c2:	db2e      	blt.n	82722 <setvbuf+0x7e>
   826c4:	4628      	mov	r0, r5
   826c6:	4621      	mov	r1, r4
   826c8:	f001 f8aa 	bl	83820 <_fflush_r>
   826cc:	89a3      	ldrh	r3, [r4, #12]
   826ce:	2200      	movs	r2, #0
   826d0:	6062      	str	r2, [r4, #4]
   826d2:	61a2      	str	r2, [r4, #24]
   826d4:	061a      	lsls	r2, r3, #24
   826d6:	d428      	bmi.n	8272a <setvbuf+0x86>
   826d8:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   826dc:	b29b      	uxth	r3, r3
   826de:	2e02      	cmp	r6, #2
   826e0:	81a3      	strh	r3, [r4, #12]
   826e2:	d02d      	beq.n	82740 <setvbuf+0x9c>
   826e4:	f1b8 0f00 	cmp.w	r8, #0
   826e8:	d03c      	beq.n	82764 <setvbuf+0xc0>
   826ea:	2e01      	cmp	r6, #1
   826ec:	d013      	beq.n	82716 <setvbuf+0x72>
   826ee:	b29b      	uxth	r3, r3
   826f0:	f003 0008 	and.w	r0, r3, #8
   826f4:	4a2a      	ldr	r2, [pc, #168]	; (827a0 <setvbuf+0xfc>)
   826f6:	b280      	uxth	r0, r0
   826f8:	63ea      	str	r2, [r5, #60]	; 0x3c
   826fa:	f8c4 8000 	str.w	r8, [r4]
   826fe:	f8c4 8010 	str.w	r8, [r4, #16]
   82702:	6167      	str	r7, [r4, #20]
   82704:	b178      	cbz	r0, 82726 <setvbuf+0x82>
   82706:	f013 0f03 	tst.w	r3, #3
   8270a:	bf18      	it	ne
   8270c:	2700      	movne	r7, #0
   8270e:	60a7      	str	r7, [r4, #8]
   82710:	2000      	movs	r0, #0
   82712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82716:	f043 0301 	orr.w	r3, r3, #1
   8271a:	427a      	negs	r2, r7
   8271c:	81a3      	strh	r3, [r4, #12]
   8271e:	61a2      	str	r2, [r4, #24]
   82720:	e7e5      	b.n	826ee <setvbuf+0x4a>
   82722:	f04f 30ff 	mov.w	r0, #4294967295
   82726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8272a:	4628      	mov	r0, r5
   8272c:	6921      	ldr	r1, [r4, #16]
   8272e:	f001 f9d7 	bl	83ae0 <_free_r>
   82732:	89a3      	ldrh	r3, [r4, #12]
   82734:	2e02      	cmp	r6, #2
   82736:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8273a:	b29b      	uxth	r3, r3
   8273c:	81a3      	strh	r3, [r4, #12]
   8273e:	d1d1      	bne.n	826e4 <setvbuf+0x40>
   82740:	2000      	movs	r0, #0
   82742:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82746:	f043 0302 	orr.w	r3, r3, #2
   8274a:	2500      	movs	r5, #0
   8274c:	2101      	movs	r1, #1
   8274e:	81a3      	strh	r3, [r4, #12]
   82750:	60a5      	str	r5, [r4, #8]
   82752:	6022      	str	r2, [r4, #0]
   82754:	6122      	str	r2, [r4, #16]
   82756:	6161      	str	r1, [r4, #20]
   82758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8275c:	4628      	mov	r0, r5
   8275e:	f001 f87b 	bl	83858 <__sinit>
   82762:	e7ab      	b.n	826bc <setvbuf+0x18>
   82764:	2f00      	cmp	r7, #0
   82766:	bf08      	it	eq
   82768:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   8276c:	4638      	mov	r0, r7
   8276e:	f001 fcad 	bl	840cc <malloc>
   82772:	4680      	mov	r8, r0
   82774:	b128      	cbz	r0, 82782 <setvbuf+0xde>
   82776:	89a3      	ldrh	r3, [r4, #12]
   82778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8277c:	b29b      	uxth	r3, r3
   8277e:	81a3      	strh	r3, [r4, #12]
   82780:	e7b3      	b.n	826ea <setvbuf+0x46>
   82782:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82786:	f001 fca1 	bl	840cc <malloc>
   8278a:	4680      	mov	r8, r0
   8278c:	b918      	cbnz	r0, 82796 <setvbuf+0xf2>
   8278e:	89a3      	ldrh	r3, [r4, #12]
   82790:	f04f 30ff 	mov.w	r0, #4294967295
   82794:	e7d5      	b.n	82742 <setvbuf+0x9e>
   82796:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8279a:	e7ec      	b.n	82776 <setvbuf+0xd2>
   8279c:	20070560 	.word	0x20070560
   827a0:	0008384d 	.word	0x0008384d

000827a4 <strlen>:
   827a4:	f020 0103 	bic.w	r1, r0, #3
   827a8:	f010 0003 	ands.w	r0, r0, #3
   827ac:	f1c0 0000 	rsb	r0, r0, #0
   827b0:	f851 3b04 	ldr.w	r3, [r1], #4
   827b4:	f100 0c04 	add.w	ip, r0, #4
   827b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   827bc:	f06f 0200 	mvn.w	r2, #0
   827c0:	bf1c      	itt	ne
   827c2:	fa22 f20c 	lsrne.w	r2, r2, ip
   827c6:	4313      	orrne	r3, r2
   827c8:	f04f 0c01 	mov.w	ip, #1
   827cc:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   827d0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   827d4:	eba3 020c 	sub.w	r2, r3, ip
   827d8:	ea22 0203 	bic.w	r2, r2, r3
   827dc:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   827e0:	bf04      	itt	eq
   827e2:	f851 3b04 	ldreq.w	r3, [r1], #4
   827e6:	3004      	addeq	r0, #4
   827e8:	d0f4      	beq.n	827d4 <strlen+0x30>
   827ea:	f013 0fff 	tst.w	r3, #255	; 0xff
   827ee:	bf1f      	itttt	ne
   827f0:	3001      	addne	r0, #1
   827f2:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   827f6:	3001      	addne	r0, #1
   827f8:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   827fc:	bf18      	it	ne
   827fe:	3001      	addne	r0, #1
   82800:	4770      	bx	lr
   82802:	bf00      	nop

00082804 <__sprint_r.part.0>:
   82804:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8280a:	049c      	lsls	r4, r3, #18
   8280c:	460e      	mov	r6, r1
   8280e:	4680      	mov	r8, r0
   82810:	4691      	mov	r9, r2
   82812:	d52a      	bpl.n	8286a <__sprint_r.part.0+0x66>
   82814:	6893      	ldr	r3, [r2, #8]
   82816:	6812      	ldr	r2, [r2, #0]
   82818:	f102 0a08 	add.w	sl, r2, #8
   8281c:	b31b      	cbz	r3, 82866 <__sprint_r.part.0+0x62>
   8281e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   82822:	08bf      	lsrs	r7, r7, #2
   82824:	d017      	beq.n	82856 <__sprint_r.part.0+0x52>
   82826:	3d04      	subs	r5, #4
   82828:	2400      	movs	r4, #0
   8282a:	e001      	b.n	82830 <__sprint_r.part.0+0x2c>
   8282c:	42a7      	cmp	r7, r4
   8282e:	d010      	beq.n	82852 <__sprint_r.part.0+0x4e>
   82830:	4640      	mov	r0, r8
   82832:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82836:	4632      	mov	r2, r6
   82838:	f001 f8a4 	bl	83984 <_fputwc_r>
   8283c:	1c43      	adds	r3, r0, #1
   8283e:	f104 0401 	add.w	r4, r4, #1
   82842:	d1f3      	bne.n	8282c <__sprint_r.part.0+0x28>
   82844:	2300      	movs	r3, #0
   82846:	f8c9 3008 	str.w	r3, [r9, #8]
   8284a:	f8c9 3004 	str.w	r3, [r9, #4]
   8284e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82852:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82856:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   8285a:	f8c9 3008 	str.w	r3, [r9, #8]
   8285e:	f10a 0a08 	add.w	sl, sl, #8
   82862:	2b00      	cmp	r3, #0
   82864:	d1db      	bne.n	8281e <__sprint_r.part.0+0x1a>
   82866:	2000      	movs	r0, #0
   82868:	e7ec      	b.n	82844 <__sprint_r.part.0+0x40>
   8286a:	f001 fa05 	bl	83c78 <__sfvwrite_r>
   8286e:	2300      	movs	r3, #0
   82870:	f8c9 3008 	str.w	r3, [r9, #8]
   82874:	f8c9 3004 	str.w	r3, [r9, #4]
   82878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0008287c <_vfiprintf_r>:
   8287c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82880:	b0b1      	sub	sp, #196	; 0xc4
   82882:	461c      	mov	r4, r3
   82884:	9102      	str	r1, [sp, #8]
   82886:	4690      	mov	r8, r2
   82888:	9308      	str	r3, [sp, #32]
   8288a:	9006      	str	r0, [sp, #24]
   8288c:	b118      	cbz	r0, 82896 <_vfiprintf_r+0x1a>
   8288e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82890:	2b00      	cmp	r3, #0
   82892:	f000 80e8 	beq.w	82a66 <_vfiprintf_r+0x1ea>
   82896:	9d02      	ldr	r5, [sp, #8]
   82898:	89ab      	ldrh	r3, [r5, #12]
   8289a:	b29a      	uxth	r2, r3
   8289c:	0490      	lsls	r0, r2, #18
   8289e:	d407      	bmi.n	828b0 <_vfiprintf_r+0x34>
   828a0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   828a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   828a6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   828aa:	81ab      	strh	r3, [r5, #12]
   828ac:	b29a      	uxth	r2, r3
   828ae:	6669      	str	r1, [r5, #100]	; 0x64
   828b0:	0711      	lsls	r1, r2, #28
   828b2:	f140 80b7 	bpl.w	82a24 <_vfiprintf_r+0x1a8>
   828b6:	f8dd b008 	ldr.w	fp, [sp, #8]
   828ba:	f8db 3010 	ldr.w	r3, [fp, #16]
   828be:	2b00      	cmp	r3, #0
   828c0:	f000 80b0 	beq.w	82a24 <_vfiprintf_r+0x1a8>
   828c4:	f002 021a 	and.w	r2, r2, #26
   828c8:	2a0a      	cmp	r2, #10
   828ca:	f000 80b7 	beq.w	82a3c <_vfiprintf_r+0x1c0>
   828ce:	2300      	movs	r3, #0
   828d0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   828d4:	930a      	str	r3, [sp, #40]	; 0x28
   828d6:	9315      	str	r3, [sp, #84]	; 0x54
   828d8:	9314      	str	r3, [sp, #80]	; 0x50
   828da:	9309      	str	r3, [sp, #36]	; 0x24
   828dc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   828e0:	464e      	mov	r6, r9
   828e2:	f898 3000 	ldrb.w	r3, [r8]
   828e6:	2b00      	cmp	r3, #0
   828e8:	f000 84c8 	beq.w	8327c <_vfiprintf_r+0xa00>
   828ec:	2b25      	cmp	r3, #37	; 0x25
   828ee:	f000 84c5 	beq.w	8327c <_vfiprintf_r+0xa00>
   828f2:	f108 0201 	add.w	r2, r8, #1
   828f6:	e001      	b.n	828fc <_vfiprintf_r+0x80>
   828f8:	2b25      	cmp	r3, #37	; 0x25
   828fa:	d004      	beq.n	82906 <_vfiprintf_r+0x8a>
   828fc:	7813      	ldrb	r3, [r2, #0]
   828fe:	4614      	mov	r4, r2
   82900:	3201      	adds	r2, #1
   82902:	2b00      	cmp	r3, #0
   82904:	d1f8      	bne.n	828f8 <_vfiprintf_r+0x7c>
   82906:	ebc8 0504 	rsb	r5, r8, r4
   8290a:	b195      	cbz	r5, 82932 <_vfiprintf_r+0xb6>
   8290c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8290e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82910:	3301      	adds	r3, #1
   82912:	442a      	add	r2, r5
   82914:	2b07      	cmp	r3, #7
   82916:	f8c6 8000 	str.w	r8, [r6]
   8291a:	6075      	str	r5, [r6, #4]
   8291c:	9215      	str	r2, [sp, #84]	; 0x54
   8291e:	9314      	str	r3, [sp, #80]	; 0x50
   82920:	dd7b      	ble.n	82a1a <_vfiprintf_r+0x19e>
   82922:	2a00      	cmp	r2, #0
   82924:	f040 84d5 	bne.w	832d2 <_vfiprintf_r+0xa56>
   82928:	9809      	ldr	r0, [sp, #36]	; 0x24
   8292a:	9214      	str	r2, [sp, #80]	; 0x50
   8292c:	4428      	add	r0, r5
   8292e:	464e      	mov	r6, r9
   82930:	9009      	str	r0, [sp, #36]	; 0x24
   82932:	7823      	ldrb	r3, [r4, #0]
   82934:	2b00      	cmp	r3, #0
   82936:	f000 83ed 	beq.w	83114 <_vfiprintf_r+0x898>
   8293a:	2100      	movs	r1, #0
   8293c:	f04f 0200 	mov.w	r2, #0
   82940:	f04f 3cff 	mov.w	ip, #4294967295
   82944:	7863      	ldrb	r3, [r4, #1]
   82946:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   8294a:	9104      	str	r1, [sp, #16]
   8294c:	468a      	mov	sl, r1
   8294e:	f104 0801 	add.w	r8, r4, #1
   82952:	4608      	mov	r0, r1
   82954:	4665      	mov	r5, ip
   82956:	f108 0801 	add.w	r8, r8, #1
   8295a:	f1a3 0220 	sub.w	r2, r3, #32
   8295e:	2a58      	cmp	r2, #88	; 0x58
   82960:	f200 82d9 	bhi.w	82f16 <_vfiprintf_r+0x69a>
   82964:	e8df f012 	tbh	[pc, r2, lsl #1]
   82968:	02d702cb 	.word	0x02d702cb
   8296c:	02d202d7 	.word	0x02d202d7
   82970:	02d702d7 	.word	0x02d702d7
   82974:	02d702d7 	.word	0x02d702d7
   82978:	02d702d7 	.word	0x02d702d7
   8297c:	028f0282 	.word	0x028f0282
   82980:	008402d7 	.word	0x008402d7
   82984:	02d70293 	.word	0x02d70293
   82988:	0196012b 	.word	0x0196012b
   8298c:	01960196 	.word	0x01960196
   82990:	01960196 	.word	0x01960196
   82994:	01960196 	.word	0x01960196
   82998:	01960196 	.word	0x01960196
   8299c:	02d702d7 	.word	0x02d702d7
   829a0:	02d702d7 	.word	0x02d702d7
   829a4:	02d702d7 	.word	0x02d702d7
   829a8:	02d702d7 	.word	0x02d702d7
   829ac:	02d702d7 	.word	0x02d702d7
   829b0:	02d70130 	.word	0x02d70130
   829b4:	02d702d7 	.word	0x02d702d7
   829b8:	02d702d7 	.word	0x02d702d7
   829bc:	02d702d7 	.word	0x02d702d7
   829c0:	02d702d7 	.word	0x02d702d7
   829c4:	017b02d7 	.word	0x017b02d7
   829c8:	02d702d7 	.word	0x02d702d7
   829cc:	02d702d7 	.word	0x02d702d7
   829d0:	01a402d7 	.word	0x01a402d7
   829d4:	02d702d7 	.word	0x02d702d7
   829d8:	02d701bf 	.word	0x02d701bf
   829dc:	02d702d7 	.word	0x02d702d7
   829e0:	02d702d7 	.word	0x02d702d7
   829e4:	02d702d7 	.word	0x02d702d7
   829e8:	02d702d7 	.word	0x02d702d7
   829ec:	01e402d7 	.word	0x01e402d7
   829f0:	02d701fa 	.word	0x02d701fa
   829f4:	02d702d7 	.word	0x02d702d7
   829f8:	01fa0216 	.word	0x01fa0216
   829fc:	02d702d7 	.word	0x02d702d7
   82a00:	02d7021b 	.word	0x02d7021b
   82a04:	00890228 	.word	0x00890228
   82a08:	027d0266 	.word	0x027d0266
   82a0c:	023a02d7 	.word	0x023a02d7
   82a10:	011902d7 	.word	0x011902d7
   82a14:	02d702d7 	.word	0x02d702d7
   82a18:	02af      	.short	0x02af
   82a1a:	3608      	adds	r6, #8
   82a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
   82a1e:	4428      	add	r0, r5
   82a20:	9009      	str	r0, [sp, #36]	; 0x24
   82a22:	e786      	b.n	82932 <_vfiprintf_r+0xb6>
   82a24:	9806      	ldr	r0, [sp, #24]
   82a26:	9902      	ldr	r1, [sp, #8]
   82a28:	f000 fde4 	bl	835f4 <__swsetup_r>
   82a2c:	b9b0      	cbnz	r0, 82a5c <_vfiprintf_r+0x1e0>
   82a2e:	9d02      	ldr	r5, [sp, #8]
   82a30:	89aa      	ldrh	r2, [r5, #12]
   82a32:	f002 021a 	and.w	r2, r2, #26
   82a36:	2a0a      	cmp	r2, #10
   82a38:	f47f af49 	bne.w	828ce <_vfiprintf_r+0x52>
   82a3c:	f8dd b008 	ldr.w	fp, [sp, #8]
   82a40:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82a44:	2b00      	cmp	r3, #0
   82a46:	f6ff af42 	blt.w	828ce <_vfiprintf_r+0x52>
   82a4a:	9806      	ldr	r0, [sp, #24]
   82a4c:	4659      	mov	r1, fp
   82a4e:	4642      	mov	r2, r8
   82a50:	4623      	mov	r3, r4
   82a52:	f000 fd3d 	bl	834d0 <__sbprintf>
   82a56:	b031      	add	sp, #196	; 0xc4
   82a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a5c:	f04f 30ff 	mov.w	r0, #4294967295
   82a60:	b031      	add	sp, #196	; 0xc4
   82a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a66:	f000 fef7 	bl	83858 <__sinit>
   82a6a:	e714      	b.n	82896 <_vfiprintf_r+0x1a>
   82a6c:	4240      	negs	r0, r0
   82a6e:	9308      	str	r3, [sp, #32]
   82a70:	f04a 0a04 	orr.w	sl, sl, #4
   82a74:	f898 3000 	ldrb.w	r3, [r8]
   82a78:	e76d      	b.n	82956 <_vfiprintf_r+0xda>
   82a7a:	f01a 0320 	ands.w	r3, sl, #32
   82a7e:	9004      	str	r0, [sp, #16]
   82a80:	46ac      	mov	ip, r5
   82a82:	f000 80f4 	beq.w	82c6e <_vfiprintf_r+0x3f2>
   82a86:	f8dd b020 	ldr.w	fp, [sp, #32]
   82a8a:	f10b 0307 	add.w	r3, fp, #7
   82a8e:	f023 0307 	bic.w	r3, r3, #7
   82a92:	f103 0408 	add.w	r4, r3, #8
   82a96:	9408      	str	r4, [sp, #32]
   82a98:	e9d3 4500 	ldrd	r4, r5, [r3]
   82a9c:	2300      	movs	r3, #0
   82a9e:	f04f 0000 	mov.w	r0, #0
   82aa2:	2100      	movs	r1, #0
   82aa4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82aa8:	f8cd c014 	str.w	ip, [sp, #20]
   82aac:	9107      	str	r1, [sp, #28]
   82aae:	f1bc 0f00 	cmp.w	ip, #0
   82ab2:	bfa8      	it	ge
   82ab4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82ab8:	ea54 0205 	orrs.w	r2, r4, r5
   82abc:	f040 80ad 	bne.w	82c1a <_vfiprintf_r+0x39e>
   82ac0:	f1bc 0f00 	cmp.w	ip, #0
   82ac4:	f040 80a9 	bne.w	82c1a <_vfiprintf_r+0x39e>
   82ac8:	2b00      	cmp	r3, #0
   82aca:	f040 83c0 	bne.w	8324e <_vfiprintf_r+0x9d2>
   82ace:	f01a 0f01 	tst.w	sl, #1
   82ad2:	f000 83bc 	beq.w	8324e <_vfiprintf_r+0x9d2>
   82ad6:	2330      	movs	r3, #48	; 0x30
   82ad8:	af30      	add	r7, sp, #192	; 0xc0
   82ada:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82ade:	ebc7 0409 	rsb	r4, r7, r9
   82ae2:	9405      	str	r4, [sp, #20]
   82ae4:	f8dd b014 	ldr.w	fp, [sp, #20]
   82ae8:	9c07      	ldr	r4, [sp, #28]
   82aea:	45e3      	cmp	fp, ip
   82aec:	bfb8      	it	lt
   82aee:	46e3      	movlt	fp, ip
   82af0:	f8cd b00c 	str.w	fp, [sp, #12]
   82af4:	b11c      	cbz	r4, 82afe <_vfiprintf_r+0x282>
   82af6:	f10b 0b01 	add.w	fp, fp, #1
   82afa:	f8cd b00c 	str.w	fp, [sp, #12]
   82afe:	f01a 0502 	ands.w	r5, sl, #2
   82b02:	9507      	str	r5, [sp, #28]
   82b04:	d005      	beq.n	82b12 <_vfiprintf_r+0x296>
   82b06:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82b0a:	f10b 0b02 	add.w	fp, fp, #2
   82b0e:	f8cd b00c 	str.w	fp, [sp, #12]
   82b12:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82b16:	930b      	str	r3, [sp, #44]	; 0x2c
   82b18:	f040 821b 	bne.w	82f52 <_vfiprintf_r+0x6d6>
   82b1c:	9d04      	ldr	r5, [sp, #16]
   82b1e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82b22:	ebcb 0405 	rsb	r4, fp, r5
   82b26:	2c00      	cmp	r4, #0
   82b28:	f340 8213 	ble.w	82f52 <_vfiprintf_r+0x6d6>
   82b2c:	2c10      	cmp	r4, #16
   82b2e:	f340 8489 	ble.w	83444 <_vfiprintf_r+0xbc8>
   82b32:	4dbe      	ldr	r5, [pc, #760]	; (82e2c <_vfiprintf_r+0x5b0>)
   82b34:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82b36:	462b      	mov	r3, r5
   82b38:	9814      	ldr	r0, [sp, #80]	; 0x50
   82b3a:	4625      	mov	r5, r4
   82b3c:	f04f 0b10 	mov.w	fp, #16
   82b40:	4664      	mov	r4, ip
   82b42:	46b4      	mov	ip, r6
   82b44:	461e      	mov	r6, r3
   82b46:	e006      	b.n	82b56 <_vfiprintf_r+0x2da>
   82b48:	1c83      	adds	r3, r0, #2
   82b4a:	f10c 0c08 	add.w	ip, ip, #8
   82b4e:	4608      	mov	r0, r1
   82b50:	3d10      	subs	r5, #16
   82b52:	2d10      	cmp	r5, #16
   82b54:	dd11      	ble.n	82b7a <_vfiprintf_r+0x2fe>
   82b56:	1c41      	adds	r1, r0, #1
   82b58:	3210      	adds	r2, #16
   82b5a:	2907      	cmp	r1, #7
   82b5c:	9215      	str	r2, [sp, #84]	; 0x54
   82b5e:	e88c 0840 	stmia.w	ip, {r6, fp}
   82b62:	9114      	str	r1, [sp, #80]	; 0x50
   82b64:	ddf0      	ble.n	82b48 <_vfiprintf_r+0x2cc>
   82b66:	2a00      	cmp	r2, #0
   82b68:	f040 81e6 	bne.w	82f38 <_vfiprintf_r+0x6bc>
   82b6c:	3d10      	subs	r5, #16
   82b6e:	2d10      	cmp	r5, #16
   82b70:	f04f 0301 	mov.w	r3, #1
   82b74:	4610      	mov	r0, r2
   82b76:	46cc      	mov	ip, r9
   82b78:	dced      	bgt.n	82b56 <_vfiprintf_r+0x2da>
   82b7a:	4631      	mov	r1, r6
   82b7c:	4666      	mov	r6, ip
   82b7e:	46a4      	mov	ip, r4
   82b80:	462c      	mov	r4, r5
   82b82:	460d      	mov	r5, r1
   82b84:	4422      	add	r2, r4
   82b86:	2b07      	cmp	r3, #7
   82b88:	9215      	str	r2, [sp, #84]	; 0x54
   82b8a:	6035      	str	r5, [r6, #0]
   82b8c:	6074      	str	r4, [r6, #4]
   82b8e:	9314      	str	r3, [sp, #80]	; 0x50
   82b90:	f300 836d 	bgt.w	8326e <_vfiprintf_r+0x9f2>
   82b94:	3608      	adds	r6, #8
   82b96:	1c59      	adds	r1, r3, #1
   82b98:	e1de      	b.n	82f58 <_vfiprintf_r+0x6dc>
   82b9a:	f01a 0f20 	tst.w	sl, #32
   82b9e:	9004      	str	r0, [sp, #16]
   82ba0:	46ac      	mov	ip, r5
   82ba2:	f000 808d 	beq.w	82cc0 <_vfiprintf_r+0x444>
   82ba6:	9d08      	ldr	r5, [sp, #32]
   82ba8:	1deb      	adds	r3, r5, #7
   82baa:	f023 0307 	bic.w	r3, r3, #7
   82bae:	f103 0b08 	add.w	fp, r3, #8
   82bb2:	e9d3 4500 	ldrd	r4, r5, [r3]
   82bb6:	f8cd b020 	str.w	fp, [sp, #32]
   82bba:	2301      	movs	r3, #1
   82bbc:	e76f      	b.n	82a9e <_vfiprintf_r+0x222>
   82bbe:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82bc2:	f898 3000 	ldrb.w	r3, [r8]
   82bc6:	e6c6      	b.n	82956 <_vfiprintf_r+0xda>
   82bc8:	f04a 0a10 	orr.w	sl, sl, #16
   82bcc:	f01a 0f20 	tst.w	sl, #32
   82bd0:	9004      	str	r0, [sp, #16]
   82bd2:	46ac      	mov	ip, r5
   82bd4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82bd8:	f000 80c8 	beq.w	82d6c <_vfiprintf_r+0x4f0>
   82bdc:	9c08      	ldr	r4, [sp, #32]
   82bde:	1de1      	adds	r1, r4, #7
   82be0:	f021 0107 	bic.w	r1, r1, #7
   82be4:	e9d1 2300 	ldrd	r2, r3, [r1]
   82be8:	3108      	adds	r1, #8
   82bea:	9108      	str	r1, [sp, #32]
   82bec:	4614      	mov	r4, r2
   82bee:	461d      	mov	r5, r3
   82bf0:	2a00      	cmp	r2, #0
   82bf2:	f173 0b00 	sbcs.w	fp, r3, #0
   82bf6:	f2c0 83ce 	blt.w	83396 <_vfiprintf_r+0xb1a>
   82bfa:	f1bc 0f00 	cmp.w	ip, #0
   82bfe:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82c02:	bfa8      	it	ge
   82c04:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82c08:	ea54 0205 	orrs.w	r2, r4, r5
   82c0c:	9007      	str	r0, [sp, #28]
   82c0e:	f8cd c014 	str.w	ip, [sp, #20]
   82c12:	f04f 0301 	mov.w	r3, #1
   82c16:	f43f af53 	beq.w	82ac0 <_vfiprintf_r+0x244>
   82c1a:	2b01      	cmp	r3, #1
   82c1c:	f000 8319 	beq.w	83252 <_vfiprintf_r+0x9d6>
   82c20:	2b02      	cmp	r3, #2
   82c22:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   82c26:	f040 824c 	bne.w	830c2 <_vfiprintf_r+0x846>
   82c2a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   82c2e:	4619      	mov	r1, r3
   82c30:	f004 000f 	and.w	r0, r4, #15
   82c34:	0922      	lsrs	r2, r4, #4
   82c36:	f81b 0000 	ldrb.w	r0, [fp, r0]
   82c3a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   82c3e:	092b      	lsrs	r3, r5, #4
   82c40:	7008      	strb	r0, [r1, #0]
   82c42:	ea52 0003 	orrs.w	r0, r2, r3
   82c46:	460f      	mov	r7, r1
   82c48:	4614      	mov	r4, r2
   82c4a:	461d      	mov	r5, r3
   82c4c:	f101 31ff 	add.w	r1, r1, #4294967295
   82c50:	d1ee      	bne.n	82c30 <_vfiprintf_r+0x3b4>
   82c52:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   82c56:	ebc7 0309 	rsb	r3, r7, r9
   82c5a:	9305      	str	r3, [sp, #20]
   82c5c:	e742      	b.n	82ae4 <_vfiprintf_r+0x268>
   82c5e:	f04a 0a10 	orr.w	sl, sl, #16
   82c62:	f01a 0320 	ands.w	r3, sl, #32
   82c66:	9004      	str	r0, [sp, #16]
   82c68:	46ac      	mov	ip, r5
   82c6a:	f47f af0c 	bne.w	82a86 <_vfiprintf_r+0x20a>
   82c6e:	f01a 0210 	ands.w	r2, sl, #16
   82c72:	f040 8311 	bne.w	83298 <_vfiprintf_r+0xa1c>
   82c76:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   82c7a:	f000 830d 	beq.w	83298 <_vfiprintf_r+0xa1c>
   82c7e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82c82:	4613      	mov	r3, r2
   82c84:	f8bb 4000 	ldrh.w	r4, [fp]
   82c88:	f10b 0b04 	add.w	fp, fp, #4
   82c8c:	2500      	movs	r5, #0
   82c8e:	f8cd b020 	str.w	fp, [sp, #32]
   82c92:	e704      	b.n	82a9e <_vfiprintf_r+0x222>
   82c94:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82c98:	2000      	movs	r0, #0
   82c9a:	f818 3b01 	ldrb.w	r3, [r8], #1
   82c9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   82ca2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   82ca6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82caa:	2a09      	cmp	r2, #9
   82cac:	d9f5      	bls.n	82c9a <_vfiprintf_r+0x41e>
   82cae:	e654      	b.n	8295a <_vfiprintf_r+0xde>
   82cb0:	f04a 0a10 	orr.w	sl, sl, #16
   82cb4:	f01a 0f20 	tst.w	sl, #32
   82cb8:	9004      	str	r0, [sp, #16]
   82cba:	46ac      	mov	ip, r5
   82cbc:	f47f af73 	bne.w	82ba6 <_vfiprintf_r+0x32a>
   82cc0:	f01a 0f10 	tst.w	sl, #16
   82cc4:	f040 82ef 	bne.w	832a6 <_vfiprintf_r+0xa2a>
   82cc8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82ccc:	f000 82eb 	beq.w	832a6 <_vfiprintf_r+0xa2a>
   82cd0:	f8dd b020 	ldr.w	fp, [sp, #32]
   82cd4:	2500      	movs	r5, #0
   82cd6:	f8bb 4000 	ldrh.w	r4, [fp]
   82cda:	f10b 0b04 	add.w	fp, fp, #4
   82cde:	2301      	movs	r3, #1
   82ce0:	f8cd b020 	str.w	fp, [sp, #32]
   82ce4:	e6db      	b.n	82a9e <_vfiprintf_r+0x222>
   82ce6:	46ac      	mov	ip, r5
   82ce8:	4d51      	ldr	r5, [pc, #324]	; (82e30 <_vfiprintf_r+0x5b4>)
   82cea:	f01a 0f20 	tst.w	sl, #32
   82cee:	9004      	str	r0, [sp, #16]
   82cf0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82cf4:	950a      	str	r5, [sp, #40]	; 0x28
   82cf6:	f000 80f0 	beq.w	82eda <_vfiprintf_r+0x65e>
   82cfa:	9d08      	ldr	r5, [sp, #32]
   82cfc:	1dea      	adds	r2, r5, #7
   82cfe:	f022 0207 	bic.w	r2, r2, #7
   82d02:	f102 0b08 	add.w	fp, r2, #8
   82d06:	f8cd b020 	str.w	fp, [sp, #32]
   82d0a:	e9d2 4500 	ldrd	r4, r5, [r2]
   82d0e:	f01a 0f01 	tst.w	sl, #1
   82d12:	f000 82aa 	beq.w	8326a <_vfiprintf_r+0x9ee>
   82d16:	ea54 0b05 	orrs.w	fp, r4, r5
   82d1a:	f000 82a6 	beq.w	8326a <_vfiprintf_r+0x9ee>
   82d1e:	2230      	movs	r2, #48	; 0x30
   82d20:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82d24:	f04a 0a02 	orr.w	sl, sl, #2
   82d28:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82d2c:	2302      	movs	r3, #2
   82d2e:	e6b6      	b.n	82a9e <_vfiprintf_r+0x222>
   82d30:	9b08      	ldr	r3, [sp, #32]
   82d32:	f8dd b020 	ldr.w	fp, [sp, #32]
   82d36:	681b      	ldr	r3, [r3, #0]
   82d38:	2401      	movs	r4, #1
   82d3a:	f04f 0500 	mov.w	r5, #0
   82d3e:	f10b 0b04 	add.w	fp, fp, #4
   82d42:	9004      	str	r0, [sp, #16]
   82d44:	9403      	str	r4, [sp, #12]
   82d46:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82d4a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82d4e:	f8cd b020 	str.w	fp, [sp, #32]
   82d52:	9405      	str	r4, [sp, #20]
   82d54:	af16      	add	r7, sp, #88	; 0x58
   82d56:	f04f 0c00 	mov.w	ip, #0
   82d5a:	e6d0      	b.n	82afe <_vfiprintf_r+0x282>
   82d5c:	f01a 0f20 	tst.w	sl, #32
   82d60:	9004      	str	r0, [sp, #16]
   82d62:	46ac      	mov	ip, r5
   82d64:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82d68:	f47f af38 	bne.w	82bdc <_vfiprintf_r+0x360>
   82d6c:	f01a 0f10 	tst.w	sl, #16
   82d70:	f040 82a7 	bne.w	832c2 <_vfiprintf_r+0xa46>
   82d74:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82d78:	f000 82a3 	beq.w	832c2 <_vfiprintf_r+0xa46>
   82d7c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82d80:	f9bb 4000 	ldrsh.w	r4, [fp]
   82d84:	f10b 0b04 	add.w	fp, fp, #4
   82d88:	17e5      	asrs	r5, r4, #31
   82d8a:	4622      	mov	r2, r4
   82d8c:	462b      	mov	r3, r5
   82d8e:	f8cd b020 	str.w	fp, [sp, #32]
   82d92:	e72d      	b.n	82bf0 <_vfiprintf_r+0x374>
   82d94:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   82d98:	f898 3000 	ldrb.w	r3, [r8]
   82d9c:	e5db      	b.n	82956 <_vfiprintf_r+0xda>
   82d9e:	f898 3000 	ldrb.w	r3, [r8]
   82da2:	4642      	mov	r2, r8
   82da4:	2b6c      	cmp	r3, #108	; 0x6c
   82da6:	bf03      	ittte	eq
   82da8:	f108 0801 	addeq.w	r8, r8, #1
   82dac:	f04a 0a20 	orreq.w	sl, sl, #32
   82db0:	7853      	ldrbeq	r3, [r2, #1]
   82db2:	f04a 0a10 	orrne.w	sl, sl, #16
   82db6:	e5ce      	b.n	82956 <_vfiprintf_r+0xda>
   82db8:	f01a 0f20 	tst.w	sl, #32
   82dbc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82dc0:	f000 82f7 	beq.w	833b2 <_vfiprintf_r+0xb36>
   82dc4:	9c08      	ldr	r4, [sp, #32]
   82dc6:	6821      	ldr	r1, [r4, #0]
   82dc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82dca:	17e5      	asrs	r5, r4, #31
   82dcc:	462b      	mov	r3, r5
   82dce:	9d08      	ldr	r5, [sp, #32]
   82dd0:	4622      	mov	r2, r4
   82dd2:	3504      	adds	r5, #4
   82dd4:	9508      	str	r5, [sp, #32]
   82dd6:	e9c1 2300 	strd	r2, r3, [r1]
   82dda:	e582      	b.n	828e2 <_vfiprintf_r+0x66>
   82ddc:	9c08      	ldr	r4, [sp, #32]
   82dde:	46ac      	mov	ip, r5
   82de0:	6827      	ldr	r7, [r4, #0]
   82de2:	f04f 0500 	mov.w	r5, #0
   82de6:	9004      	str	r0, [sp, #16]
   82de8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   82dec:	3404      	adds	r4, #4
   82dee:	2f00      	cmp	r7, #0
   82df0:	f000 8332 	beq.w	83458 <_vfiprintf_r+0xbdc>
   82df4:	f1bc 0f00 	cmp.w	ip, #0
   82df8:	4638      	mov	r0, r7
   82dfa:	f2c0 8307 	blt.w	8340c <_vfiprintf_r+0xb90>
   82dfe:	4662      	mov	r2, ip
   82e00:	2100      	movs	r1, #0
   82e02:	f8cd c004 	str.w	ip, [sp, #4]
   82e06:	f001 fc05 	bl	84614 <memchr>
   82e0a:	f8dd c004 	ldr.w	ip, [sp, #4]
   82e0e:	2800      	cmp	r0, #0
   82e10:	f000 833a 	beq.w	83488 <_vfiprintf_r+0xc0c>
   82e14:	1bc0      	subs	r0, r0, r7
   82e16:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   82e1a:	4560      	cmp	r0, ip
   82e1c:	bfa8      	it	ge
   82e1e:	4660      	movge	r0, ip
   82e20:	9005      	str	r0, [sp, #20]
   82e22:	9408      	str	r4, [sp, #32]
   82e24:	9507      	str	r5, [sp, #28]
   82e26:	f04f 0c00 	mov.w	ip, #0
   82e2a:	e65b      	b.n	82ae4 <_vfiprintf_r+0x268>
   82e2c:	000858dc 	.word	0x000858dc
   82e30:	0008589c 	.word	0x0008589c
   82e34:	9b08      	ldr	r3, [sp, #32]
   82e36:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e3a:	9004      	str	r0, [sp, #16]
   82e3c:	48b2      	ldr	r0, [pc, #712]	; (83108 <_vfiprintf_r+0x88c>)
   82e3e:	681c      	ldr	r4, [r3, #0]
   82e40:	2230      	movs	r2, #48	; 0x30
   82e42:	2378      	movs	r3, #120	; 0x78
   82e44:	f10b 0b04 	add.w	fp, fp, #4
   82e48:	46ac      	mov	ip, r5
   82e4a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   82e4e:	f04a 0a02 	orr.w	sl, sl, #2
   82e52:	f8cd b020 	str.w	fp, [sp, #32]
   82e56:	2500      	movs	r5, #0
   82e58:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82e5c:	900a      	str	r0, [sp, #40]	; 0x28
   82e5e:	2302      	movs	r3, #2
   82e60:	e61d      	b.n	82a9e <_vfiprintf_r+0x222>
   82e62:	f04a 0a20 	orr.w	sl, sl, #32
   82e66:	f898 3000 	ldrb.w	r3, [r8]
   82e6a:	e574      	b.n	82956 <_vfiprintf_r+0xda>
   82e6c:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e70:	f8db 0000 	ldr.w	r0, [fp]
   82e74:	f10b 0304 	add.w	r3, fp, #4
   82e78:	2800      	cmp	r0, #0
   82e7a:	f6ff adf7 	blt.w	82a6c <_vfiprintf_r+0x1f0>
   82e7e:	9308      	str	r3, [sp, #32]
   82e80:	f898 3000 	ldrb.w	r3, [r8]
   82e84:	e567      	b.n	82956 <_vfiprintf_r+0xda>
   82e86:	f898 3000 	ldrb.w	r3, [r8]
   82e8a:	212b      	movs	r1, #43	; 0x2b
   82e8c:	e563      	b.n	82956 <_vfiprintf_r+0xda>
   82e8e:	f898 3000 	ldrb.w	r3, [r8]
   82e92:	f108 0401 	add.w	r4, r8, #1
   82e96:	2b2a      	cmp	r3, #42	; 0x2a
   82e98:	f000 8305 	beq.w	834a6 <_vfiprintf_r+0xc2a>
   82e9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82ea0:	2a09      	cmp	r2, #9
   82ea2:	bf98      	it	ls
   82ea4:	2500      	movls	r5, #0
   82ea6:	f200 82fa 	bhi.w	8349e <_vfiprintf_r+0xc22>
   82eaa:	f814 3b01 	ldrb.w	r3, [r4], #1
   82eae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82eb2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   82eb6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   82eba:	2a09      	cmp	r2, #9
   82ebc:	d9f5      	bls.n	82eaa <_vfiprintf_r+0x62e>
   82ebe:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   82ec2:	46a0      	mov	r8, r4
   82ec4:	e549      	b.n	8295a <_vfiprintf_r+0xde>
   82ec6:	4c90      	ldr	r4, [pc, #576]	; (83108 <_vfiprintf_r+0x88c>)
   82ec8:	f01a 0f20 	tst.w	sl, #32
   82ecc:	9004      	str	r0, [sp, #16]
   82ece:	46ac      	mov	ip, r5
   82ed0:	940a      	str	r4, [sp, #40]	; 0x28
   82ed2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82ed6:	f47f af10 	bne.w	82cfa <_vfiprintf_r+0x47e>
   82eda:	f01a 0f10 	tst.w	sl, #16
   82ede:	f040 81ea 	bne.w	832b6 <_vfiprintf_r+0xa3a>
   82ee2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   82ee6:	f000 81e6 	beq.w	832b6 <_vfiprintf_r+0xa3a>
   82eea:	f8dd b020 	ldr.w	fp, [sp, #32]
   82eee:	2500      	movs	r5, #0
   82ef0:	f8bb 4000 	ldrh.w	r4, [fp]
   82ef4:	f10b 0b04 	add.w	fp, fp, #4
   82ef8:	f8cd b020 	str.w	fp, [sp, #32]
   82efc:	e707      	b.n	82d0e <_vfiprintf_r+0x492>
   82efe:	f898 3000 	ldrb.w	r3, [r8]
   82f02:	2900      	cmp	r1, #0
   82f04:	f47f ad27 	bne.w	82956 <_vfiprintf_r+0xda>
   82f08:	2120      	movs	r1, #32
   82f0a:	e524      	b.n	82956 <_vfiprintf_r+0xda>
   82f0c:	f04a 0a01 	orr.w	sl, sl, #1
   82f10:	f898 3000 	ldrb.w	r3, [r8]
   82f14:	e51f      	b.n	82956 <_vfiprintf_r+0xda>
   82f16:	9004      	str	r0, [sp, #16]
   82f18:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82f1c:	2b00      	cmp	r3, #0
   82f1e:	f000 80f9 	beq.w	83114 <_vfiprintf_r+0x898>
   82f22:	2501      	movs	r5, #1
   82f24:	f04f 0b00 	mov.w	fp, #0
   82f28:	9503      	str	r5, [sp, #12]
   82f2a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   82f2e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   82f32:	9505      	str	r5, [sp, #20]
   82f34:	af16      	add	r7, sp, #88	; 0x58
   82f36:	e70e      	b.n	82d56 <_vfiprintf_r+0x4da>
   82f38:	9806      	ldr	r0, [sp, #24]
   82f3a:	9902      	ldr	r1, [sp, #8]
   82f3c:	aa13      	add	r2, sp, #76	; 0x4c
   82f3e:	f7ff fc61 	bl	82804 <__sprint_r.part.0>
   82f42:	2800      	cmp	r0, #0
   82f44:	f040 80ed 	bne.w	83122 <_vfiprintf_r+0x8a6>
   82f48:	9814      	ldr	r0, [sp, #80]	; 0x50
   82f4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82f4c:	1c43      	adds	r3, r0, #1
   82f4e:	46cc      	mov	ip, r9
   82f50:	e5fe      	b.n	82b50 <_vfiprintf_r+0x2d4>
   82f52:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82f54:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82f56:	1c59      	adds	r1, r3, #1
   82f58:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   82f5c:	b168      	cbz	r0, 82f7a <_vfiprintf_r+0x6fe>
   82f5e:	3201      	adds	r2, #1
   82f60:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   82f64:	2301      	movs	r3, #1
   82f66:	2907      	cmp	r1, #7
   82f68:	9215      	str	r2, [sp, #84]	; 0x54
   82f6a:	9114      	str	r1, [sp, #80]	; 0x50
   82f6c:	e886 0009 	stmia.w	r6, {r0, r3}
   82f70:	f300 8160 	bgt.w	83234 <_vfiprintf_r+0x9b8>
   82f74:	460b      	mov	r3, r1
   82f76:	3608      	adds	r6, #8
   82f78:	3101      	adds	r1, #1
   82f7a:	9c07      	ldr	r4, [sp, #28]
   82f7c:	b164      	cbz	r4, 82f98 <_vfiprintf_r+0x71c>
   82f7e:	3202      	adds	r2, #2
   82f80:	a812      	add	r0, sp, #72	; 0x48
   82f82:	2302      	movs	r3, #2
   82f84:	2907      	cmp	r1, #7
   82f86:	9215      	str	r2, [sp, #84]	; 0x54
   82f88:	9114      	str	r1, [sp, #80]	; 0x50
   82f8a:	e886 0009 	stmia.w	r6, {r0, r3}
   82f8e:	f300 8157 	bgt.w	83240 <_vfiprintf_r+0x9c4>
   82f92:	460b      	mov	r3, r1
   82f94:	3608      	adds	r6, #8
   82f96:	3101      	adds	r1, #1
   82f98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82f9a:	2d80      	cmp	r5, #128	; 0x80
   82f9c:	f000 8101 	beq.w	831a2 <_vfiprintf_r+0x926>
   82fa0:	9d05      	ldr	r5, [sp, #20]
   82fa2:	ebc5 040c 	rsb	r4, r5, ip
   82fa6:	2c00      	cmp	r4, #0
   82fa8:	dd2f      	ble.n	8300a <_vfiprintf_r+0x78e>
   82faa:	2c10      	cmp	r4, #16
   82fac:	4d57      	ldr	r5, [pc, #348]	; (8310c <_vfiprintf_r+0x890>)
   82fae:	dd22      	ble.n	82ff6 <_vfiprintf_r+0x77a>
   82fb0:	4630      	mov	r0, r6
   82fb2:	f04f 0b10 	mov.w	fp, #16
   82fb6:	462e      	mov	r6, r5
   82fb8:	4625      	mov	r5, r4
   82fba:	9c06      	ldr	r4, [sp, #24]
   82fbc:	e006      	b.n	82fcc <_vfiprintf_r+0x750>
   82fbe:	f103 0c02 	add.w	ip, r3, #2
   82fc2:	3008      	adds	r0, #8
   82fc4:	460b      	mov	r3, r1
   82fc6:	3d10      	subs	r5, #16
   82fc8:	2d10      	cmp	r5, #16
   82fca:	dd10      	ble.n	82fee <_vfiprintf_r+0x772>
   82fcc:	1c59      	adds	r1, r3, #1
   82fce:	3210      	adds	r2, #16
   82fd0:	2907      	cmp	r1, #7
   82fd2:	9215      	str	r2, [sp, #84]	; 0x54
   82fd4:	e880 0840 	stmia.w	r0, {r6, fp}
   82fd8:	9114      	str	r1, [sp, #80]	; 0x50
   82fda:	ddf0      	ble.n	82fbe <_vfiprintf_r+0x742>
   82fdc:	2a00      	cmp	r2, #0
   82fde:	d163      	bne.n	830a8 <_vfiprintf_r+0x82c>
   82fe0:	3d10      	subs	r5, #16
   82fe2:	2d10      	cmp	r5, #16
   82fe4:	f04f 0c01 	mov.w	ip, #1
   82fe8:	4613      	mov	r3, r2
   82fea:	4648      	mov	r0, r9
   82fec:	dcee      	bgt.n	82fcc <_vfiprintf_r+0x750>
   82fee:	462c      	mov	r4, r5
   82ff0:	4661      	mov	r1, ip
   82ff2:	4635      	mov	r5, r6
   82ff4:	4606      	mov	r6, r0
   82ff6:	4422      	add	r2, r4
   82ff8:	2907      	cmp	r1, #7
   82ffa:	9215      	str	r2, [sp, #84]	; 0x54
   82ffc:	6035      	str	r5, [r6, #0]
   82ffe:	6074      	str	r4, [r6, #4]
   83000:	9114      	str	r1, [sp, #80]	; 0x50
   83002:	f300 80c1 	bgt.w	83188 <_vfiprintf_r+0x90c>
   83006:	3608      	adds	r6, #8
   83008:	3101      	adds	r1, #1
   8300a:	9d05      	ldr	r5, [sp, #20]
   8300c:	2907      	cmp	r1, #7
   8300e:	442a      	add	r2, r5
   83010:	9215      	str	r2, [sp, #84]	; 0x54
   83012:	6037      	str	r7, [r6, #0]
   83014:	6075      	str	r5, [r6, #4]
   83016:	9114      	str	r1, [sp, #80]	; 0x50
   83018:	f340 80c1 	ble.w	8319e <_vfiprintf_r+0x922>
   8301c:	2a00      	cmp	r2, #0
   8301e:	f040 8130 	bne.w	83282 <_vfiprintf_r+0xa06>
   83022:	9214      	str	r2, [sp, #80]	; 0x50
   83024:	464e      	mov	r6, r9
   83026:	f01a 0f04 	tst.w	sl, #4
   8302a:	f000 808b 	beq.w	83144 <_vfiprintf_r+0x8c8>
   8302e:	9d04      	ldr	r5, [sp, #16]
   83030:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83034:	ebcb 0405 	rsb	r4, fp, r5
   83038:	2c00      	cmp	r4, #0
   8303a:	f340 8083 	ble.w	83144 <_vfiprintf_r+0x8c8>
   8303e:	2c10      	cmp	r4, #16
   83040:	f340 821e 	ble.w	83480 <_vfiprintf_r+0xc04>
   83044:	9914      	ldr	r1, [sp, #80]	; 0x50
   83046:	4d32      	ldr	r5, [pc, #200]	; (83110 <_vfiprintf_r+0x894>)
   83048:	2710      	movs	r7, #16
   8304a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8304e:	f8dd b008 	ldr.w	fp, [sp, #8]
   83052:	e005      	b.n	83060 <_vfiprintf_r+0x7e4>
   83054:	1c88      	adds	r0, r1, #2
   83056:	3608      	adds	r6, #8
   83058:	4619      	mov	r1, r3
   8305a:	3c10      	subs	r4, #16
   8305c:	2c10      	cmp	r4, #16
   8305e:	dd10      	ble.n	83082 <_vfiprintf_r+0x806>
   83060:	1c4b      	adds	r3, r1, #1
   83062:	3210      	adds	r2, #16
   83064:	2b07      	cmp	r3, #7
   83066:	9215      	str	r2, [sp, #84]	; 0x54
   83068:	e886 00a0 	stmia.w	r6, {r5, r7}
   8306c:	9314      	str	r3, [sp, #80]	; 0x50
   8306e:	ddf1      	ble.n	83054 <_vfiprintf_r+0x7d8>
   83070:	2a00      	cmp	r2, #0
   83072:	d17d      	bne.n	83170 <_vfiprintf_r+0x8f4>
   83074:	3c10      	subs	r4, #16
   83076:	2c10      	cmp	r4, #16
   83078:	f04f 0001 	mov.w	r0, #1
   8307c:	4611      	mov	r1, r2
   8307e:	464e      	mov	r6, r9
   83080:	dcee      	bgt.n	83060 <_vfiprintf_r+0x7e4>
   83082:	4422      	add	r2, r4
   83084:	2807      	cmp	r0, #7
   83086:	9215      	str	r2, [sp, #84]	; 0x54
   83088:	6035      	str	r5, [r6, #0]
   8308a:	6074      	str	r4, [r6, #4]
   8308c:	9014      	str	r0, [sp, #80]	; 0x50
   8308e:	dd59      	ble.n	83144 <_vfiprintf_r+0x8c8>
   83090:	2a00      	cmp	r2, #0
   83092:	d14f      	bne.n	83134 <_vfiprintf_r+0x8b8>
   83094:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83096:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8309a:	9d04      	ldr	r5, [sp, #16]
   8309c:	45ab      	cmp	fp, r5
   8309e:	bfac      	ite	ge
   830a0:	445c      	addge	r4, fp
   830a2:	1964      	addlt	r4, r4, r5
   830a4:	9409      	str	r4, [sp, #36]	; 0x24
   830a6:	e05e      	b.n	83166 <_vfiprintf_r+0x8ea>
   830a8:	4620      	mov	r0, r4
   830aa:	9902      	ldr	r1, [sp, #8]
   830ac:	aa13      	add	r2, sp, #76	; 0x4c
   830ae:	f7ff fba9 	bl	82804 <__sprint_r.part.0>
   830b2:	2800      	cmp	r0, #0
   830b4:	d135      	bne.n	83122 <_vfiprintf_r+0x8a6>
   830b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   830b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   830ba:	f103 0c01 	add.w	ip, r3, #1
   830be:	4648      	mov	r0, r9
   830c0:	e781      	b.n	82fc6 <_vfiprintf_r+0x74a>
   830c2:	08e0      	lsrs	r0, r4, #3
   830c4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   830c8:	f004 0207 	and.w	r2, r4, #7
   830cc:	08e9      	lsrs	r1, r5, #3
   830ce:	3230      	adds	r2, #48	; 0x30
   830d0:	ea50 0b01 	orrs.w	fp, r0, r1
   830d4:	461f      	mov	r7, r3
   830d6:	701a      	strb	r2, [r3, #0]
   830d8:	4604      	mov	r4, r0
   830da:	460d      	mov	r5, r1
   830dc:	f103 33ff 	add.w	r3, r3, #4294967295
   830e0:	d1ef      	bne.n	830c2 <_vfiprintf_r+0x846>
   830e2:	f01a 0f01 	tst.w	sl, #1
   830e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   830ea:	4639      	mov	r1, r7
   830ec:	f000 80b9 	beq.w	83262 <_vfiprintf_r+0x9e6>
   830f0:	2a30      	cmp	r2, #48	; 0x30
   830f2:	f43f acf4 	beq.w	82ade <_vfiprintf_r+0x262>
   830f6:	461f      	mov	r7, r3
   830f8:	ebc7 0509 	rsb	r5, r7, r9
   830fc:	2330      	movs	r3, #48	; 0x30
   830fe:	9505      	str	r5, [sp, #20]
   83100:	f801 3c01 	strb.w	r3, [r1, #-1]
   83104:	e4ee      	b.n	82ae4 <_vfiprintf_r+0x268>
   83106:	bf00      	nop
   83108:	000858b0 	.word	0x000858b0
   8310c:	000858cc 	.word	0x000858cc
   83110:	000858dc 	.word	0x000858dc
   83114:	9b15      	ldr	r3, [sp, #84]	; 0x54
   83116:	b123      	cbz	r3, 83122 <_vfiprintf_r+0x8a6>
   83118:	9806      	ldr	r0, [sp, #24]
   8311a:	9902      	ldr	r1, [sp, #8]
   8311c:	aa13      	add	r2, sp, #76	; 0x4c
   8311e:	f7ff fb71 	bl	82804 <__sprint_r.part.0>
   83122:	9c02      	ldr	r4, [sp, #8]
   83124:	89a3      	ldrh	r3, [r4, #12]
   83126:	065b      	lsls	r3, r3, #25
   83128:	f53f ac98 	bmi.w	82a5c <_vfiprintf_r+0x1e0>
   8312c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8312e:	b031      	add	sp, #196	; 0xc4
   83130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83134:	9806      	ldr	r0, [sp, #24]
   83136:	9902      	ldr	r1, [sp, #8]
   83138:	aa13      	add	r2, sp, #76	; 0x4c
   8313a:	f7ff fb63 	bl	82804 <__sprint_r.part.0>
   8313e:	2800      	cmp	r0, #0
   83140:	d1ef      	bne.n	83122 <_vfiprintf_r+0x8a6>
   83142:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83144:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83146:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8314a:	9d04      	ldr	r5, [sp, #16]
   8314c:	45ab      	cmp	fp, r5
   8314e:	bfac      	ite	ge
   83150:	445c      	addge	r4, fp
   83152:	1964      	addlt	r4, r4, r5
   83154:	9409      	str	r4, [sp, #36]	; 0x24
   83156:	b132      	cbz	r2, 83166 <_vfiprintf_r+0x8ea>
   83158:	9806      	ldr	r0, [sp, #24]
   8315a:	9902      	ldr	r1, [sp, #8]
   8315c:	aa13      	add	r2, sp, #76	; 0x4c
   8315e:	f7ff fb51 	bl	82804 <__sprint_r.part.0>
   83162:	2800      	cmp	r0, #0
   83164:	d1dd      	bne.n	83122 <_vfiprintf_r+0x8a6>
   83166:	2000      	movs	r0, #0
   83168:	9014      	str	r0, [sp, #80]	; 0x50
   8316a:	464e      	mov	r6, r9
   8316c:	f7ff bbb9 	b.w	828e2 <_vfiprintf_r+0x66>
   83170:	4650      	mov	r0, sl
   83172:	4659      	mov	r1, fp
   83174:	aa13      	add	r2, sp, #76	; 0x4c
   83176:	f7ff fb45 	bl	82804 <__sprint_r.part.0>
   8317a:	2800      	cmp	r0, #0
   8317c:	d1d1      	bne.n	83122 <_vfiprintf_r+0x8a6>
   8317e:	9914      	ldr	r1, [sp, #80]	; 0x50
   83180:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83182:	1c48      	adds	r0, r1, #1
   83184:	464e      	mov	r6, r9
   83186:	e768      	b.n	8305a <_vfiprintf_r+0x7de>
   83188:	2a00      	cmp	r2, #0
   8318a:	f040 80f7 	bne.w	8337c <_vfiprintf_r+0xb00>
   8318e:	9c05      	ldr	r4, [sp, #20]
   83190:	2301      	movs	r3, #1
   83192:	9720      	str	r7, [sp, #128]	; 0x80
   83194:	9421      	str	r4, [sp, #132]	; 0x84
   83196:	9415      	str	r4, [sp, #84]	; 0x54
   83198:	4622      	mov	r2, r4
   8319a:	9314      	str	r3, [sp, #80]	; 0x50
   8319c:	464e      	mov	r6, r9
   8319e:	3608      	adds	r6, #8
   831a0:	e741      	b.n	83026 <_vfiprintf_r+0x7aa>
   831a2:	9d04      	ldr	r5, [sp, #16]
   831a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   831a8:	ebcb 0405 	rsb	r4, fp, r5
   831ac:	2c00      	cmp	r4, #0
   831ae:	f77f aef7 	ble.w	82fa0 <_vfiprintf_r+0x724>
   831b2:	2c10      	cmp	r4, #16
   831b4:	4da6      	ldr	r5, [pc, #664]	; (83450 <_vfiprintf_r+0xbd4>)
   831b6:	f340 8170 	ble.w	8349a <_vfiprintf_r+0xc1e>
   831ba:	4629      	mov	r1, r5
   831bc:	f04f 0b10 	mov.w	fp, #16
   831c0:	4625      	mov	r5, r4
   831c2:	4664      	mov	r4, ip
   831c4:	46b4      	mov	ip, r6
   831c6:	460e      	mov	r6, r1
   831c8:	e006      	b.n	831d8 <_vfiprintf_r+0x95c>
   831ca:	1c98      	adds	r0, r3, #2
   831cc:	f10c 0c08 	add.w	ip, ip, #8
   831d0:	460b      	mov	r3, r1
   831d2:	3d10      	subs	r5, #16
   831d4:	2d10      	cmp	r5, #16
   831d6:	dd0f      	ble.n	831f8 <_vfiprintf_r+0x97c>
   831d8:	1c59      	adds	r1, r3, #1
   831da:	3210      	adds	r2, #16
   831dc:	2907      	cmp	r1, #7
   831de:	9215      	str	r2, [sp, #84]	; 0x54
   831e0:	e88c 0840 	stmia.w	ip, {r6, fp}
   831e4:	9114      	str	r1, [sp, #80]	; 0x50
   831e6:	ddf0      	ble.n	831ca <_vfiprintf_r+0x94e>
   831e8:	b9ba      	cbnz	r2, 8321a <_vfiprintf_r+0x99e>
   831ea:	3d10      	subs	r5, #16
   831ec:	2d10      	cmp	r5, #16
   831ee:	f04f 0001 	mov.w	r0, #1
   831f2:	4613      	mov	r3, r2
   831f4:	46cc      	mov	ip, r9
   831f6:	dcef      	bgt.n	831d8 <_vfiprintf_r+0x95c>
   831f8:	4633      	mov	r3, r6
   831fa:	4666      	mov	r6, ip
   831fc:	46a4      	mov	ip, r4
   831fe:	462c      	mov	r4, r5
   83200:	461d      	mov	r5, r3
   83202:	4422      	add	r2, r4
   83204:	2807      	cmp	r0, #7
   83206:	9215      	str	r2, [sp, #84]	; 0x54
   83208:	6035      	str	r5, [r6, #0]
   8320a:	6074      	str	r4, [r6, #4]
   8320c:	9014      	str	r0, [sp, #80]	; 0x50
   8320e:	f300 80af 	bgt.w	83370 <_vfiprintf_r+0xaf4>
   83212:	3608      	adds	r6, #8
   83214:	1c41      	adds	r1, r0, #1
   83216:	4603      	mov	r3, r0
   83218:	e6c2      	b.n	82fa0 <_vfiprintf_r+0x724>
   8321a:	9806      	ldr	r0, [sp, #24]
   8321c:	9902      	ldr	r1, [sp, #8]
   8321e:	aa13      	add	r2, sp, #76	; 0x4c
   83220:	f7ff faf0 	bl	82804 <__sprint_r.part.0>
   83224:	2800      	cmp	r0, #0
   83226:	f47f af7c 	bne.w	83122 <_vfiprintf_r+0x8a6>
   8322a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8322c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8322e:	1c58      	adds	r0, r3, #1
   83230:	46cc      	mov	ip, r9
   83232:	e7ce      	b.n	831d2 <_vfiprintf_r+0x956>
   83234:	2a00      	cmp	r2, #0
   83236:	d179      	bne.n	8332c <_vfiprintf_r+0xab0>
   83238:	4619      	mov	r1, r3
   8323a:	464e      	mov	r6, r9
   8323c:	4613      	mov	r3, r2
   8323e:	e69c      	b.n	82f7a <_vfiprintf_r+0x6fe>
   83240:	2a00      	cmp	r2, #0
   83242:	f040 8084 	bne.w	8334e <_vfiprintf_r+0xad2>
   83246:	2101      	movs	r1, #1
   83248:	4613      	mov	r3, r2
   8324a:	464e      	mov	r6, r9
   8324c:	e6a4      	b.n	82f98 <_vfiprintf_r+0x71c>
   8324e:	464f      	mov	r7, r9
   83250:	e448      	b.n	82ae4 <_vfiprintf_r+0x268>
   83252:	2d00      	cmp	r5, #0
   83254:	bf08      	it	eq
   83256:	2c0a      	cmpeq	r4, #10
   83258:	d246      	bcs.n	832e8 <_vfiprintf_r+0xa6c>
   8325a:	3430      	adds	r4, #48	; 0x30
   8325c:	af30      	add	r7, sp, #192	; 0xc0
   8325e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83262:	ebc7 0309 	rsb	r3, r7, r9
   83266:	9305      	str	r3, [sp, #20]
   83268:	e43c      	b.n	82ae4 <_vfiprintf_r+0x268>
   8326a:	2302      	movs	r3, #2
   8326c:	e417      	b.n	82a9e <_vfiprintf_r+0x222>
   8326e:	2a00      	cmp	r2, #0
   83270:	f040 80af 	bne.w	833d2 <_vfiprintf_r+0xb56>
   83274:	4613      	mov	r3, r2
   83276:	2101      	movs	r1, #1
   83278:	464e      	mov	r6, r9
   8327a:	e66d      	b.n	82f58 <_vfiprintf_r+0x6dc>
   8327c:	4644      	mov	r4, r8
   8327e:	f7ff bb58 	b.w	82932 <_vfiprintf_r+0xb6>
   83282:	9806      	ldr	r0, [sp, #24]
   83284:	9902      	ldr	r1, [sp, #8]
   83286:	aa13      	add	r2, sp, #76	; 0x4c
   83288:	f7ff fabc 	bl	82804 <__sprint_r.part.0>
   8328c:	2800      	cmp	r0, #0
   8328e:	f47f af48 	bne.w	83122 <_vfiprintf_r+0x8a6>
   83292:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83294:	464e      	mov	r6, r9
   83296:	e6c6      	b.n	83026 <_vfiprintf_r+0x7aa>
   83298:	9d08      	ldr	r5, [sp, #32]
   8329a:	682c      	ldr	r4, [r5, #0]
   8329c:	3504      	adds	r5, #4
   8329e:	9508      	str	r5, [sp, #32]
   832a0:	2500      	movs	r5, #0
   832a2:	f7ff bbfc 	b.w	82a9e <_vfiprintf_r+0x222>
   832a6:	9d08      	ldr	r5, [sp, #32]
   832a8:	2301      	movs	r3, #1
   832aa:	682c      	ldr	r4, [r5, #0]
   832ac:	3504      	adds	r5, #4
   832ae:	9508      	str	r5, [sp, #32]
   832b0:	2500      	movs	r5, #0
   832b2:	f7ff bbf4 	b.w	82a9e <_vfiprintf_r+0x222>
   832b6:	9d08      	ldr	r5, [sp, #32]
   832b8:	682c      	ldr	r4, [r5, #0]
   832ba:	3504      	adds	r5, #4
   832bc:	9508      	str	r5, [sp, #32]
   832be:	2500      	movs	r5, #0
   832c0:	e525      	b.n	82d0e <_vfiprintf_r+0x492>
   832c2:	9d08      	ldr	r5, [sp, #32]
   832c4:	682c      	ldr	r4, [r5, #0]
   832c6:	3504      	adds	r5, #4
   832c8:	9508      	str	r5, [sp, #32]
   832ca:	17e5      	asrs	r5, r4, #31
   832cc:	4622      	mov	r2, r4
   832ce:	462b      	mov	r3, r5
   832d0:	e48e      	b.n	82bf0 <_vfiprintf_r+0x374>
   832d2:	9806      	ldr	r0, [sp, #24]
   832d4:	9902      	ldr	r1, [sp, #8]
   832d6:	aa13      	add	r2, sp, #76	; 0x4c
   832d8:	f7ff fa94 	bl	82804 <__sprint_r.part.0>
   832dc:	2800      	cmp	r0, #0
   832de:	f47f af20 	bne.w	83122 <_vfiprintf_r+0x8a6>
   832e2:	464e      	mov	r6, r9
   832e4:	f7ff bb9a 	b.w	82a1c <_vfiprintf_r+0x1a0>
   832e8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   832ec:	9603      	str	r6, [sp, #12]
   832ee:	465e      	mov	r6, fp
   832f0:	46e3      	mov	fp, ip
   832f2:	4620      	mov	r0, r4
   832f4:	4629      	mov	r1, r5
   832f6:	220a      	movs	r2, #10
   832f8:	2300      	movs	r3, #0
   832fa:	f001 fe2f 	bl	84f5c <__aeabi_uldivmod>
   832fe:	3230      	adds	r2, #48	; 0x30
   83300:	7032      	strb	r2, [r6, #0]
   83302:	4620      	mov	r0, r4
   83304:	4629      	mov	r1, r5
   83306:	220a      	movs	r2, #10
   83308:	2300      	movs	r3, #0
   8330a:	f001 fe27 	bl	84f5c <__aeabi_uldivmod>
   8330e:	4604      	mov	r4, r0
   83310:	460d      	mov	r5, r1
   83312:	ea54 0005 	orrs.w	r0, r4, r5
   83316:	4637      	mov	r7, r6
   83318:	f106 36ff 	add.w	r6, r6, #4294967295
   8331c:	d1e9      	bne.n	832f2 <_vfiprintf_r+0xa76>
   8331e:	ebc7 0309 	rsb	r3, r7, r9
   83322:	46dc      	mov	ip, fp
   83324:	9e03      	ldr	r6, [sp, #12]
   83326:	9305      	str	r3, [sp, #20]
   83328:	f7ff bbdc 	b.w	82ae4 <_vfiprintf_r+0x268>
   8332c:	9806      	ldr	r0, [sp, #24]
   8332e:	9902      	ldr	r1, [sp, #8]
   83330:	aa13      	add	r2, sp, #76	; 0x4c
   83332:	f8cd c004 	str.w	ip, [sp, #4]
   83336:	f7ff fa65 	bl	82804 <__sprint_r.part.0>
   8333a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8333e:	2800      	cmp	r0, #0
   83340:	f47f aeef 	bne.w	83122 <_vfiprintf_r+0x8a6>
   83344:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83346:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83348:	1c59      	adds	r1, r3, #1
   8334a:	464e      	mov	r6, r9
   8334c:	e615      	b.n	82f7a <_vfiprintf_r+0x6fe>
   8334e:	9806      	ldr	r0, [sp, #24]
   83350:	9902      	ldr	r1, [sp, #8]
   83352:	aa13      	add	r2, sp, #76	; 0x4c
   83354:	f8cd c004 	str.w	ip, [sp, #4]
   83358:	f7ff fa54 	bl	82804 <__sprint_r.part.0>
   8335c:	f8dd c004 	ldr.w	ip, [sp, #4]
   83360:	2800      	cmp	r0, #0
   83362:	f47f aede 	bne.w	83122 <_vfiprintf_r+0x8a6>
   83366:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83368:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8336a:	1c59      	adds	r1, r3, #1
   8336c:	464e      	mov	r6, r9
   8336e:	e613      	b.n	82f98 <_vfiprintf_r+0x71c>
   83370:	2a00      	cmp	r2, #0
   83372:	d156      	bne.n	83422 <_vfiprintf_r+0xba6>
   83374:	2101      	movs	r1, #1
   83376:	4613      	mov	r3, r2
   83378:	464e      	mov	r6, r9
   8337a:	e611      	b.n	82fa0 <_vfiprintf_r+0x724>
   8337c:	9806      	ldr	r0, [sp, #24]
   8337e:	9902      	ldr	r1, [sp, #8]
   83380:	aa13      	add	r2, sp, #76	; 0x4c
   83382:	f7ff fa3f 	bl	82804 <__sprint_r.part.0>
   83386:	2800      	cmp	r0, #0
   83388:	f47f aecb 	bne.w	83122 <_vfiprintf_r+0x8a6>
   8338c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8338e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83390:	3101      	adds	r1, #1
   83392:	464e      	mov	r6, r9
   83394:	e639      	b.n	8300a <_vfiprintf_r+0x78e>
   83396:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8339a:	4264      	negs	r4, r4
   8339c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   833a0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   833a4:	f8cd b01c 	str.w	fp, [sp, #28]
   833a8:	f8cd c014 	str.w	ip, [sp, #20]
   833ac:	2301      	movs	r3, #1
   833ae:	f7ff bb7e 	b.w	82aae <_vfiprintf_r+0x232>
   833b2:	f01a 0f10 	tst.w	sl, #16
   833b6:	d11d      	bne.n	833f4 <_vfiprintf_r+0xb78>
   833b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   833bc:	d058      	beq.n	83470 <_vfiprintf_r+0xbf4>
   833be:	9d08      	ldr	r5, [sp, #32]
   833c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   833c4:	682b      	ldr	r3, [r5, #0]
   833c6:	3504      	adds	r5, #4
   833c8:	9508      	str	r5, [sp, #32]
   833ca:	f8a3 b000 	strh.w	fp, [r3]
   833ce:	f7ff ba88 	b.w	828e2 <_vfiprintf_r+0x66>
   833d2:	9806      	ldr	r0, [sp, #24]
   833d4:	9902      	ldr	r1, [sp, #8]
   833d6:	aa13      	add	r2, sp, #76	; 0x4c
   833d8:	f8cd c004 	str.w	ip, [sp, #4]
   833dc:	f7ff fa12 	bl	82804 <__sprint_r.part.0>
   833e0:	f8dd c004 	ldr.w	ip, [sp, #4]
   833e4:	2800      	cmp	r0, #0
   833e6:	f47f ae9c 	bne.w	83122 <_vfiprintf_r+0x8a6>
   833ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   833ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   833ee:	1c59      	adds	r1, r3, #1
   833f0:	464e      	mov	r6, r9
   833f2:	e5b1      	b.n	82f58 <_vfiprintf_r+0x6dc>
   833f4:	f8dd b020 	ldr.w	fp, [sp, #32]
   833f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   833fa:	f8db 3000 	ldr.w	r3, [fp]
   833fe:	f10b 0b04 	add.w	fp, fp, #4
   83402:	f8cd b020 	str.w	fp, [sp, #32]
   83406:	601c      	str	r4, [r3, #0]
   83408:	f7ff ba6b 	b.w	828e2 <_vfiprintf_r+0x66>
   8340c:	9408      	str	r4, [sp, #32]
   8340e:	f7ff f9c9 	bl	827a4 <strlen>
   83412:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   83416:	9005      	str	r0, [sp, #20]
   83418:	9407      	str	r4, [sp, #28]
   8341a:	f04f 0c00 	mov.w	ip, #0
   8341e:	f7ff bb61 	b.w	82ae4 <_vfiprintf_r+0x268>
   83422:	9806      	ldr	r0, [sp, #24]
   83424:	9902      	ldr	r1, [sp, #8]
   83426:	aa13      	add	r2, sp, #76	; 0x4c
   83428:	f8cd c004 	str.w	ip, [sp, #4]
   8342c:	f7ff f9ea 	bl	82804 <__sprint_r.part.0>
   83430:	f8dd c004 	ldr.w	ip, [sp, #4]
   83434:	2800      	cmp	r0, #0
   83436:	f47f ae74 	bne.w	83122 <_vfiprintf_r+0x8a6>
   8343a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8343c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8343e:	1c59      	adds	r1, r3, #1
   83440:	464e      	mov	r6, r9
   83442:	e5ad      	b.n	82fa0 <_vfiprintf_r+0x724>
   83444:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83446:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83448:	3301      	adds	r3, #1
   8344a:	4d02      	ldr	r5, [pc, #8]	; (83454 <_vfiprintf_r+0xbd8>)
   8344c:	f7ff bb9a 	b.w	82b84 <_vfiprintf_r+0x308>
   83450:	000858cc 	.word	0x000858cc
   83454:	000858dc 	.word	0x000858dc
   83458:	f1bc 0f06 	cmp.w	ip, #6
   8345c:	bf34      	ite	cc
   8345e:	4663      	movcc	r3, ip
   83460:	2306      	movcs	r3, #6
   83462:	9408      	str	r4, [sp, #32]
   83464:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   83468:	9305      	str	r3, [sp, #20]
   8346a:	9403      	str	r4, [sp, #12]
   8346c:	4f16      	ldr	r7, [pc, #88]	; (834c8 <_vfiprintf_r+0xc4c>)
   8346e:	e472      	b.n	82d56 <_vfiprintf_r+0x4da>
   83470:	9c08      	ldr	r4, [sp, #32]
   83472:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83474:	6823      	ldr	r3, [r4, #0]
   83476:	3404      	adds	r4, #4
   83478:	9408      	str	r4, [sp, #32]
   8347a:	601d      	str	r5, [r3, #0]
   8347c:	f7ff ba31 	b.w	828e2 <_vfiprintf_r+0x66>
   83480:	9814      	ldr	r0, [sp, #80]	; 0x50
   83482:	4d12      	ldr	r5, [pc, #72]	; (834cc <_vfiprintf_r+0xc50>)
   83484:	3001      	adds	r0, #1
   83486:	e5fc      	b.n	83082 <_vfiprintf_r+0x806>
   83488:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8348c:	f8cd c014 	str.w	ip, [sp, #20]
   83490:	9507      	str	r5, [sp, #28]
   83492:	9408      	str	r4, [sp, #32]
   83494:	4684      	mov	ip, r0
   83496:	f7ff bb25 	b.w	82ae4 <_vfiprintf_r+0x268>
   8349a:	4608      	mov	r0, r1
   8349c:	e6b1      	b.n	83202 <_vfiprintf_r+0x986>
   8349e:	46a0      	mov	r8, r4
   834a0:	2500      	movs	r5, #0
   834a2:	f7ff ba5a 	b.w	8295a <_vfiprintf_r+0xde>
   834a6:	f8dd b020 	ldr.w	fp, [sp, #32]
   834aa:	f898 3001 	ldrb.w	r3, [r8, #1]
   834ae:	f8db 5000 	ldr.w	r5, [fp]
   834b2:	f10b 0204 	add.w	r2, fp, #4
   834b6:	2d00      	cmp	r5, #0
   834b8:	9208      	str	r2, [sp, #32]
   834ba:	46a0      	mov	r8, r4
   834bc:	f6bf aa4b 	bge.w	82956 <_vfiprintf_r+0xda>
   834c0:	f04f 35ff 	mov.w	r5, #4294967295
   834c4:	f7ff ba47 	b.w	82956 <_vfiprintf_r+0xda>
   834c8:	000858c4 	.word	0x000858c4
   834cc:	000858dc 	.word	0x000858dc

000834d0 <__sbprintf>:
   834d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834d4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   834d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   834da:	4688      	mov	r8, r1
   834dc:	9719      	str	r7, [sp, #100]	; 0x64
   834de:	f8d8 701c 	ldr.w	r7, [r8, #28]
   834e2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   834e6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   834ea:	9707      	str	r7, [sp, #28]
   834ec:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   834f0:	ac1a      	add	r4, sp, #104	; 0x68
   834f2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   834f6:	f02a 0a02 	bic.w	sl, sl, #2
   834fa:	2600      	movs	r6, #0
   834fc:	4669      	mov	r1, sp
   834fe:	9400      	str	r4, [sp, #0]
   83500:	9404      	str	r4, [sp, #16]
   83502:	9502      	str	r5, [sp, #8]
   83504:	9505      	str	r5, [sp, #20]
   83506:	f8ad a00c 	strh.w	sl, [sp, #12]
   8350a:	f8ad 900e 	strh.w	r9, [sp, #14]
   8350e:	9709      	str	r7, [sp, #36]	; 0x24
   83510:	9606      	str	r6, [sp, #24]
   83512:	4605      	mov	r5, r0
   83514:	f7ff f9b2 	bl	8287c <_vfiprintf_r>
   83518:	1e04      	subs	r4, r0, #0
   8351a:	db07      	blt.n	8352c <__sbprintf+0x5c>
   8351c:	4628      	mov	r0, r5
   8351e:	4669      	mov	r1, sp
   83520:	f000 f97e 	bl	83820 <_fflush_r>
   83524:	42b0      	cmp	r0, r6
   83526:	bf18      	it	ne
   83528:	f04f 34ff 	movne.w	r4, #4294967295
   8352c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83530:	065b      	lsls	r3, r3, #25
   83532:	d505      	bpl.n	83540 <__sbprintf+0x70>
   83534:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   83538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8353c:	f8a8 300c 	strh.w	r3, [r8, #12]
   83540:	4620      	mov	r0, r4
   83542:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8354a:	bf00      	nop

0008354c <__swbuf_r>:
   8354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8354e:	460d      	mov	r5, r1
   83550:	4614      	mov	r4, r2
   83552:	4607      	mov	r7, r0
   83554:	b110      	cbz	r0, 8355c <__swbuf_r+0x10>
   83556:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83558:	2b00      	cmp	r3, #0
   8355a:	d048      	beq.n	835ee <__swbuf_r+0xa2>
   8355c:	89a2      	ldrh	r2, [r4, #12]
   8355e:	69a0      	ldr	r0, [r4, #24]
   83560:	b293      	uxth	r3, r2
   83562:	60a0      	str	r0, [r4, #8]
   83564:	0718      	lsls	r0, r3, #28
   83566:	d538      	bpl.n	835da <__swbuf_r+0x8e>
   83568:	6926      	ldr	r6, [r4, #16]
   8356a:	2e00      	cmp	r6, #0
   8356c:	d035      	beq.n	835da <__swbuf_r+0x8e>
   8356e:	0499      	lsls	r1, r3, #18
   83570:	b2ed      	uxtb	r5, r5
   83572:	d515      	bpl.n	835a0 <__swbuf_r+0x54>
   83574:	6823      	ldr	r3, [r4, #0]
   83576:	6962      	ldr	r2, [r4, #20]
   83578:	1b9e      	subs	r6, r3, r6
   8357a:	4296      	cmp	r6, r2
   8357c:	da1c      	bge.n	835b8 <__swbuf_r+0x6c>
   8357e:	3601      	adds	r6, #1
   83580:	68a2      	ldr	r2, [r4, #8]
   83582:	1c59      	adds	r1, r3, #1
   83584:	3a01      	subs	r2, #1
   83586:	60a2      	str	r2, [r4, #8]
   83588:	6021      	str	r1, [r4, #0]
   8358a:	701d      	strb	r5, [r3, #0]
   8358c:	6963      	ldr	r3, [r4, #20]
   8358e:	42b3      	cmp	r3, r6
   83590:	d01a      	beq.n	835c8 <__swbuf_r+0x7c>
   83592:	89a3      	ldrh	r3, [r4, #12]
   83594:	07db      	lsls	r3, r3, #31
   83596:	d501      	bpl.n	8359c <__swbuf_r+0x50>
   83598:	2d0a      	cmp	r5, #10
   8359a:	d015      	beq.n	835c8 <__swbuf_r+0x7c>
   8359c:	4628      	mov	r0, r5
   8359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   835a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   835a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   835aa:	6663      	str	r3, [r4, #100]	; 0x64
   835ac:	6823      	ldr	r3, [r4, #0]
   835ae:	81a2      	strh	r2, [r4, #12]
   835b0:	6962      	ldr	r2, [r4, #20]
   835b2:	1b9e      	subs	r6, r3, r6
   835b4:	4296      	cmp	r6, r2
   835b6:	dbe2      	blt.n	8357e <__swbuf_r+0x32>
   835b8:	4638      	mov	r0, r7
   835ba:	4621      	mov	r1, r4
   835bc:	f000 f930 	bl	83820 <_fflush_r>
   835c0:	b940      	cbnz	r0, 835d4 <__swbuf_r+0x88>
   835c2:	6823      	ldr	r3, [r4, #0]
   835c4:	2601      	movs	r6, #1
   835c6:	e7db      	b.n	83580 <__swbuf_r+0x34>
   835c8:	4638      	mov	r0, r7
   835ca:	4621      	mov	r1, r4
   835cc:	f000 f928 	bl	83820 <_fflush_r>
   835d0:	2800      	cmp	r0, #0
   835d2:	d0e3      	beq.n	8359c <__swbuf_r+0x50>
   835d4:	f04f 30ff 	mov.w	r0, #4294967295
   835d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   835da:	4638      	mov	r0, r7
   835dc:	4621      	mov	r1, r4
   835de:	f000 f809 	bl	835f4 <__swsetup_r>
   835e2:	2800      	cmp	r0, #0
   835e4:	d1f6      	bne.n	835d4 <__swbuf_r+0x88>
   835e6:	89a2      	ldrh	r2, [r4, #12]
   835e8:	6926      	ldr	r6, [r4, #16]
   835ea:	b293      	uxth	r3, r2
   835ec:	e7bf      	b.n	8356e <__swbuf_r+0x22>
   835ee:	f000 f933 	bl	83858 <__sinit>
   835f2:	e7b3      	b.n	8355c <__swbuf_r+0x10>

000835f4 <__swsetup_r>:
   835f4:	4b2f      	ldr	r3, [pc, #188]	; (836b4 <__swsetup_r+0xc0>)
   835f6:	b570      	push	{r4, r5, r6, lr}
   835f8:	4606      	mov	r6, r0
   835fa:	6818      	ldr	r0, [r3, #0]
   835fc:	460c      	mov	r4, r1
   835fe:	b110      	cbz	r0, 83606 <__swsetup_r+0x12>
   83600:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83602:	2a00      	cmp	r2, #0
   83604:	d036      	beq.n	83674 <__swsetup_r+0x80>
   83606:	89a5      	ldrh	r5, [r4, #12]
   83608:	b2ab      	uxth	r3, r5
   8360a:	0719      	lsls	r1, r3, #28
   8360c:	d50c      	bpl.n	83628 <__swsetup_r+0x34>
   8360e:	6922      	ldr	r2, [r4, #16]
   83610:	b1aa      	cbz	r2, 8363e <__swsetup_r+0x4a>
   83612:	f013 0101 	ands.w	r1, r3, #1
   83616:	d01e      	beq.n	83656 <__swsetup_r+0x62>
   83618:	6963      	ldr	r3, [r4, #20]
   8361a:	2100      	movs	r1, #0
   8361c:	425b      	negs	r3, r3
   8361e:	61a3      	str	r3, [r4, #24]
   83620:	60a1      	str	r1, [r4, #8]
   83622:	b1f2      	cbz	r2, 83662 <__swsetup_r+0x6e>
   83624:	2000      	movs	r0, #0
   83626:	bd70      	pop	{r4, r5, r6, pc}
   83628:	06da      	lsls	r2, r3, #27
   8362a:	d53a      	bpl.n	836a2 <__swsetup_r+0xae>
   8362c:	075b      	lsls	r3, r3, #29
   8362e:	d424      	bmi.n	8367a <__swsetup_r+0x86>
   83630:	6922      	ldr	r2, [r4, #16]
   83632:	f045 0308 	orr.w	r3, r5, #8
   83636:	81a3      	strh	r3, [r4, #12]
   83638:	b29b      	uxth	r3, r3
   8363a:	2a00      	cmp	r2, #0
   8363c:	d1e9      	bne.n	83612 <__swsetup_r+0x1e>
   8363e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   83642:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   83646:	d0e4      	beq.n	83612 <__swsetup_r+0x1e>
   83648:	4630      	mov	r0, r6
   8364a:	4621      	mov	r1, r4
   8364c:	f000 fcce 	bl	83fec <__smakebuf_r>
   83650:	89a3      	ldrh	r3, [r4, #12]
   83652:	6922      	ldr	r2, [r4, #16]
   83654:	e7dd      	b.n	83612 <__swsetup_r+0x1e>
   83656:	0798      	lsls	r0, r3, #30
   83658:	bf58      	it	pl
   8365a:	6961      	ldrpl	r1, [r4, #20]
   8365c:	60a1      	str	r1, [r4, #8]
   8365e:	2a00      	cmp	r2, #0
   83660:	d1e0      	bne.n	83624 <__swsetup_r+0x30>
   83662:	89a3      	ldrh	r3, [r4, #12]
   83664:	061a      	lsls	r2, r3, #24
   83666:	d5dd      	bpl.n	83624 <__swsetup_r+0x30>
   83668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8366c:	81a3      	strh	r3, [r4, #12]
   8366e:	f04f 30ff 	mov.w	r0, #4294967295
   83672:	bd70      	pop	{r4, r5, r6, pc}
   83674:	f000 f8f0 	bl	83858 <__sinit>
   83678:	e7c5      	b.n	83606 <__swsetup_r+0x12>
   8367a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8367c:	b149      	cbz	r1, 83692 <__swsetup_r+0x9e>
   8367e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83682:	4299      	cmp	r1, r3
   83684:	d003      	beq.n	8368e <__swsetup_r+0x9a>
   83686:	4630      	mov	r0, r6
   83688:	f000 fa2a 	bl	83ae0 <_free_r>
   8368c:	89a5      	ldrh	r5, [r4, #12]
   8368e:	2300      	movs	r3, #0
   83690:	6323      	str	r3, [r4, #48]	; 0x30
   83692:	6922      	ldr	r2, [r4, #16]
   83694:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   83698:	2100      	movs	r1, #0
   8369a:	b2ad      	uxth	r5, r5
   8369c:	6022      	str	r2, [r4, #0]
   8369e:	6061      	str	r1, [r4, #4]
   836a0:	e7c7      	b.n	83632 <__swsetup_r+0x3e>
   836a2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   836a6:	2309      	movs	r3, #9
   836a8:	6033      	str	r3, [r6, #0]
   836aa:	f04f 30ff 	mov.w	r0, #4294967295
   836ae:	81a5      	strh	r5, [r4, #12]
   836b0:	bd70      	pop	{r4, r5, r6, pc}
   836b2:	bf00      	nop
   836b4:	20070560 	.word	0x20070560

000836b8 <register_fini>:
   836b8:	4b02      	ldr	r3, [pc, #8]	; (836c4 <register_fini+0xc>)
   836ba:	b113      	cbz	r3, 836c2 <register_fini+0xa>
   836bc:	4802      	ldr	r0, [pc, #8]	; (836c8 <register_fini+0x10>)
   836be:	f000 b805 	b.w	836cc <atexit>
   836c2:	4770      	bx	lr
   836c4:	00000000 	.word	0x00000000
   836c8:	00083955 	.word	0x00083955

000836cc <atexit>:
   836cc:	4601      	mov	r1, r0
   836ce:	2000      	movs	r0, #0
   836d0:	4602      	mov	r2, r0
   836d2:	4603      	mov	r3, r0
   836d4:	f001 bb46 	b.w	84d64 <__register_exitproc>

000836d8 <__sflush_r>:
   836d8:	898b      	ldrh	r3, [r1, #12]
   836da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836de:	b29a      	uxth	r2, r3
   836e0:	460d      	mov	r5, r1
   836e2:	0711      	lsls	r1, r2, #28
   836e4:	4680      	mov	r8, r0
   836e6:	d43c      	bmi.n	83762 <__sflush_r+0x8a>
   836e8:	686a      	ldr	r2, [r5, #4]
   836ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   836ee:	2a00      	cmp	r2, #0
   836f0:	81ab      	strh	r3, [r5, #12]
   836f2:	dd59      	ble.n	837a8 <__sflush_r+0xd0>
   836f4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   836f6:	2c00      	cmp	r4, #0
   836f8:	d04b      	beq.n	83792 <__sflush_r+0xba>
   836fa:	b29b      	uxth	r3, r3
   836fc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83700:	2100      	movs	r1, #0
   83702:	b292      	uxth	r2, r2
   83704:	f8d8 6000 	ldr.w	r6, [r8]
   83708:	f8c8 1000 	str.w	r1, [r8]
   8370c:	2a00      	cmp	r2, #0
   8370e:	d04f      	beq.n	837b0 <__sflush_r+0xd8>
   83710:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83712:	075f      	lsls	r7, r3, #29
   83714:	d505      	bpl.n	83722 <__sflush_r+0x4a>
   83716:	6869      	ldr	r1, [r5, #4]
   83718:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8371a:	1a52      	subs	r2, r2, r1
   8371c:	b10b      	cbz	r3, 83722 <__sflush_r+0x4a>
   8371e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83720:	1ad2      	subs	r2, r2, r3
   83722:	4640      	mov	r0, r8
   83724:	69e9      	ldr	r1, [r5, #28]
   83726:	2300      	movs	r3, #0
   83728:	47a0      	blx	r4
   8372a:	1c44      	adds	r4, r0, #1
   8372c:	d04a      	beq.n	837c4 <__sflush_r+0xec>
   8372e:	89ab      	ldrh	r3, [r5, #12]
   83730:	692a      	ldr	r2, [r5, #16]
   83732:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83736:	b29b      	uxth	r3, r3
   83738:	2100      	movs	r1, #0
   8373a:	602a      	str	r2, [r5, #0]
   8373c:	04da      	lsls	r2, r3, #19
   8373e:	81ab      	strh	r3, [r5, #12]
   83740:	6069      	str	r1, [r5, #4]
   83742:	d44c      	bmi.n	837de <__sflush_r+0x106>
   83744:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83746:	f8c8 6000 	str.w	r6, [r8]
   8374a:	b311      	cbz	r1, 83792 <__sflush_r+0xba>
   8374c:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83750:	4299      	cmp	r1, r3
   83752:	d002      	beq.n	8375a <__sflush_r+0x82>
   83754:	4640      	mov	r0, r8
   83756:	f000 f9c3 	bl	83ae0 <_free_r>
   8375a:	2000      	movs	r0, #0
   8375c:	6328      	str	r0, [r5, #48]	; 0x30
   8375e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83762:	692e      	ldr	r6, [r5, #16]
   83764:	b1ae      	cbz	r6, 83792 <__sflush_r+0xba>
   83766:	0791      	lsls	r1, r2, #30
   83768:	682c      	ldr	r4, [r5, #0]
   8376a:	bf0c      	ite	eq
   8376c:	696b      	ldreq	r3, [r5, #20]
   8376e:	2300      	movne	r3, #0
   83770:	602e      	str	r6, [r5, #0]
   83772:	1ba4      	subs	r4, r4, r6
   83774:	60ab      	str	r3, [r5, #8]
   83776:	e00a      	b.n	8378e <__sflush_r+0xb6>
   83778:	4632      	mov	r2, r6
   8377a:	4623      	mov	r3, r4
   8377c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8377e:	4640      	mov	r0, r8
   83780:	69e9      	ldr	r1, [r5, #28]
   83782:	47b8      	blx	r7
   83784:	2800      	cmp	r0, #0
   83786:	ebc0 0404 	rsb	r4, r0, r4
   8378a:	4406      	add	r6, r0
   8378c:	dd04      	ble.n	83798 <__sflush_r+0xc0>
   8378e:	2c00      	cmp	r4, #0
   83790:	dcf2      	bgt.n	83778 <__sflush_r+0xa0>
   83792:	2000      	movs	r0, #0
   83794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83798:	89ab      	ldrh	r3, [r5, #12]
   8379a:	f04f 30ff 	mov.w	r0, #4294967295
   8379e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   837a2:	81ab      	strh	r3, [r5, #12]
   837a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837a8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   837aa:	2a00      	cmp	r2, #0
   837ac:	dca2      	bgt.n	836f4 <__sflush_r+0x1c>
   837ae:	e7f0      	b.n	83792 <__sflush_r+0xba>
   837b0:	2301      	movs	r3, #1
   837b2:	4640      	mov	r0, r8
   837b4:	69e9      	ldr	r1, [r5, #28]
   837b6:	47a0      	blx	r4
   837b8:	1c43      	adds	r3, r0, #1
   837ba:	4602      	mov	r2, r0
   837bc:	d01e      	beq.n	837fc <__sflush_r+0x124>
   837be:	89ab      	ldrh	r3, [r5, #12]
   837c0:	6aac      	ldr	r4, [r5, #40]	; 0x28
   837c2:	e7a6      	b.n	83712 <__sflush_r+0x3a>
   837c4:	f8d8 3000 	ldr.w	r3, [r8]
   837c8:	b95b      	cbnz	r3, 837e2 <__sflush_r+0x10a>
   837ca:	89aa      	ldrh	r2, [r5, #12]
   837cc:	6929      	ldr	r1, [r5, #16]
   837ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   837d2:	b292      	uxth	r2, r2
   837d4:	606b      	str	r3, [r5, #4]
   837d6:	04d3      	lsls	r3, r2, #19
   837d8:	81aa      	strh	r2, [r5, #12]
   837da:	6029      	str	r1, [r5, #0]
   837dc:	d5b2      	bpl.n	83744 <__sflush_r+0x6c>
   837de:	6528      	str	r0, [r5, #80]	; 0x50
   837e0:	e7b0      	b.n	83744 <__sflush_r+0x6c>
   837e2:	2b1d      	cmp	r3, #29
   837e4:	d001      	beq.n	837ea <__sflush_r+0x112>
   837e6:	2b16      	cmp	r3, #22
   837e8:	d113      	bne.n	83812 <__sflush_r+0x13a>
   837ea:	89a9      	ldrh	r1, [r5, #12]
   837ec:	692b      	ldr	r3, [r5, #16]
   837ee:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   837f2:	2200      	movs	r2, #0
   837f4:	81a9      	strh	r1, [r5, #12]
   837f6:	602b      	str	r3, [r5, #0]
   837f8:	606a      	str	r2, [r5, #4]
   837fa:	e7a3      	b.n	83744 <__sflush_r+0x6c>
   837fc:	f8d8 3000 	ldr.w	r3, [r8]
   83800:	2b00      	cmp	r3, #0
   83802:	d0dc      	beq.n	837be <__sflush_r+0xe6>
   83804:	2b1d      	cmp	r3, #29
   83806:	d001      	beq.n	8380c <__sflush_r+0x134>
   83808:	2b16      	cmp	r3, #22
   8380a:	d1c5      	bne.n	83798 <__sflush_r+0xc0>
   8380c:	f8c8 6000 	str.w	r6, [r8]
   83810:	e7bf      	b.n	83792 <__sflush_r+0xba>
   83812:	89ab      	ldrh	r3, [r5, #12]
   83814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83818:	81ab      	strh	r3, [r5, #12]
   8381a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8381e:	bf00      	nop

00083820 <_fflush_r>:
   83820:	b510      	push	{r4, lr}
   83822:	4604      	mov	r4, r0
   83824:	b082      	sub	sp, #8
   83826:	b108      	cbz	r0, 8382c <_fflush_r+0xc>
   83828:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8382a:	b153      	cbz	r3, 83842 <_fflush_r+0x22>
   8382c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83830:	b908      	cbnz	r0, 83836 <_fflush_r+0x16>
   83832:	b002      	add	sp, #8
   83834:	bd10      	pop	{r4, pc}
   83836:	4620      	mov	r0, r4
   83838:	b002      	add	sp, #8
   8383a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8383e:	f7ff bf4b 	b.w	836d8 <__sflush_r>
   83842:	9101      	str	r1, [sp, #4]
   83844:	f000 f808 	bl	83858 <__sinit>
   83848:	9901      	ldr	r1, [sp, #4]
   8384a:	e7ef      	b.n	8382c <_fflush_r+0xc>

0008384c <_cleanup_r>:
   8384c:	4901      	ldr	r1, [pc, #4]	; (83854 <_cleanup_r+0x8>)
   8384e:	f000 bb9f 	b.w	83f90 <_fwalk>
   83852:	bf00      	nop
   83854:	00084eb1 	.word	0x00084eb1

00083858 <__sinit>:
   83858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8385c:	6b84      	ldr	r4, [r0, #56]	; 0x38
   8385e:	b083      	sub	sp, #12
   83860:	4607      	mov	r7, r0
   83862:	2c00      	cmp	r4, #0
   83864:	d165      	bne.n	83932 <__sinit+0xda>
   83866:	687d      	ldr	r5, [r7, #4]
   83868:	4833      	ldr	r0, [pc, #204]	; (83938 <__sinit+0xe0>)
   8386a:	2304      	movs	r3, #4
   8386c:	2103      	movs	r1, #3
   8386e:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83872:	63f8      	str	r0, [r7, #60]	; 0x3c
   83874:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83878:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8387c:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83880:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83884:	81ab      	strh	r3, [r5, #12]
   83886:	602c      	str	r4, [r5, #0]
   83888:	606c      	str	r4, [r5, #4]
   8388a:	60ac      	str	r4, [r5, #8]
   8388c:	666c      	str	r4, [r5, #100]	; 0x64
   8388e:	81ec      	strh	r4, [r5, #14]
   83890:	612c      	str	r4, [r5, #16]
   83892:	616c      	str	r4, [r5, #20]
   83894:	61ac      	str	r4, [r5, #24]
   83896:	4621      	mov	r1, r4
   83898:	2208      	movs	r2, #8
   8389a:	f7fe fea3 	bl	825e4 <memset>
   8389e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8393c <__sinit+0xe4>
   838a2:	68be      	ldr	r6, [r7, #8]
   838a4:	f8df a098 	ldr.w	sl, [pc, #152]	; 83940 <__sinit+0xe8>
   838a8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83944 <__sinit+0xec>
   838ac:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83948 <__sinit+0xf0>
   838b0:	2301      	movs	r3, #1
   838b2:	2209      	movs	r2, #9
   838b4:	61ed      	str	r5, [r5, #28]
   838b6:	f8c5 b020 	str.w	fp, [r5, #32]
   838ba:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   838be:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   838c2:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   838c6:	4621      	mov	r1, r4
   838c8:	81f3      	strh	r3, [r6, #14]
   838ca:	81b2      	strh	r2, [r6, #12]
   838cc:	6034      	str	r4, [r6, #0]
   838ce:	6074      	str	r4, [r6, #4]
   838d0:	60b4      	str	r4, [r6, #8]
   838d2:	6674      	str	r4, [r6, #100]	; 0x64
   838d4:	6134      	str	r4, [r6, #16]
   838d6:	6174      	str	r4, [r6, #20]
   838d8:	61b4      	str	r4, [r6, #24]
   838da:	2208      	movs	r2, #8
   838dc:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   838e0:	9301      	str	r3, [sp, #4]
   838e2:	f7fe fe7f 	bl	825e4 <memset>
   838e6:	68fd      	ldr	r5, [r7, #12]
   838e8:	2012      	movs	r0, #18
   838ea:	2202      	movs	r2, #2
   838ec:	61f6      	str	r6, [r6, #28]
   838ee:	f8c6 b020 	str.w	fp, [r6, #32]
   838f2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   838f6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   838fa:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   838fe:	4621      	mov	r1, r4
   83900:	81a8      	strh	r0, [r5, #12]
   83902:	81ea      	strh	r2, [r5, #14]
   83904:	602c      	str	r4, [r5, #0]
   83906:	606c      	str	r4, [r5, #4]
   83908:	60ac      	str	r4, [r5, #8]
   8390a:	666c      	str	r4, [r5, #100]	; 0x64
   8390c:	612c      	str	r4, [r5, #16]
   8390e:	616c      	str	r4, [r5, #20]
   83910:	61ac      	str	r4, [r5, #24]
   83912:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83916:	2208      	movs	r2, #8
   83918:	f7fe fe64 	bl	825e4 <memset>
   8391c:	9b01      	ldr	r3, [sp, #4]
   8391e:	61ed      	str	r5, [r5, #28]
   83920:	f8c5 b020 	str.w	fp, [r5, #32]
   83924:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83928:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8392c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83930:	63bb      	str	r3, [r7, #56]	; 0x38
   83932:	b003      	add	sp, #12
   83934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83938:	0008384d 	.word	0x0008384d
   8393c:	00084c4d 	.word	0x00084c4d
   83940:	00084c71 	.word	0x00084c71
   83944:	00084ca9 	.word	0x00084ca9
   83948:	00084cc9 	.word	0x00084cc9

0008394c <__sfp_lock_acquire>:
   8394c:	4770      	bx	lr
   8394e:	bf00      	nop

00083950 <__sfp_lock_release>:
   83950:	4770      	bx	lr
   83952:	bf00      	nop

00083954 <__libc_fini_array>:
   83954:	b538      	push	{r3, r4, r5, lr}
   83956:	4d09      	ldr	r5, [pc, #36]	; (8397c <__libc_fini_array+0x28>)
   83958:	4c09      	ldr	r4, [pc, #36]	; (83980 <__libc_fini_array+0x2c>)
   8395a:	1b64      	subs	r4, r4, r5
   8395c:	10a4      	asrs	r4, r4, #2
   8395e:	bf18      	it	ne
   83960:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83964:	d005      	beq.n	83972 <__libc_fini_array+0x1e>
   83966:	3c01      	subs	r4, #1
   83968:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   8396c:	4798      	blx	r3
   8396e:	2c00      	cmp	r4, #0
   83970:	d1f9      	bne.n	83966 <__libc_fini_array+0x12>
   83972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83976:	f001 bfc3 	b.w	85900 <_fini>
   8397a:	bf00      	nop
   8397c:	0008590c 	.word	0x0008590c
   83980:	00085910 	.word	0x00085910

00083984 <_fputwc_r>:
   83984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83988:	8993      	ldrh	r3, [r2, #12]
   8398a:	460f      	mov	r7, r1
   8398c:	0499      	lsls	r1, r3, #18
   8398e:	b082      	sub	sp, #8
   83990:	4614      	mov	r4, r2
   83992:	4680      	mov	r8, r0
   83994:	d406      	bmi.n	839a4 <_fputwc_r+0x20>
   83996:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83998:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8399c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   839a0:	81a3      	strh	r3, [r4, #12]
   839a2:	6662      	str	r2, [r4, #100]	; 0x64
   839a4:	f000 fb1c 	bl	83fe0 <__locale_mb_cur_max>
   839a8:	2801      	cmp	r0, #1
   839aa:	d03e      	beq.n	83a2a <_fputwc_r+0xa6>
   839ac:	463a      	mov	r2, r7
   839ae:	4640      	mov	r0, r8
   839b0:	a901      	add	r1, sp, #4
   839b2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   839b6:	f001 f98b 	bl	84cd0 <_wcrtomb_r>
   839ba:	1c42      	adds	r2, r0, #1
   839bc:	4606      	mov	r6, r0
   839be:	d02d      	beq.n	83a1c <_fputwc_r+0x98>
   839c0:	2800      	cmp	r0, #0
   839c2:	d03a      	beq.n	83a3a <_fputwc_r+0xb6>
   839c4:	f89d 1004 	ldrb.w	r1, [sp, #4]
   839c8:	2500      	movs	r5, #0
   839ca:	e009      	b.n	839e0 <_fputwc_r+0x5c>
   839cc:	6823      	ldr	r3, [r4, #0]
   839ce:	7019      	strb	r1, [r3, #0]
   839d0:	6823      	ldr	r3, [r4, #0]
   839d2:	3301      	adds	r3, #1
   839d4:	6023      	str	r3, [r4, #0]
   839d6:	3501      	adds	r5, #1
   839d8:	42b5      	cmp	r5, r6
   839da:	d22e      	bcs.n	83a3a <_fputwc_r+0xb6>
   839dc:	ab01      	add	r3, sp, #4
   839de:	5ce9      	ldrb	r1, [r5, r3]
   839e0:	68a3      	ldr	r3, [r4, #8]
   839e2:	3b01      	subs	r3, #1
   839e4:	2b00      	cmp	r3, #0
   839e6:	60a3      	str	r3, [r4, #8]
   839e8:	daf0      	bge.n	839cc <_fputwc_r+0x48>
   839ea:	69a2      	ldr	r2, [r4, #24]
   839ec:	4293      	cmp	r3, r2
   839ee:	db06      	blt.n	839fe <_fputwc_r+0x7a>
   839f0:	6823      	ldr	r3, [r4, #0]
   839f2:	7019      	strb	r1, [r3, #0]
   839f4:	6823      	ldr	r3, [r4, #0]
   839f6:	7819      	ldrb	r1, [r3, #0]
   839f8:	3301      	adds	r3, #1
   839fa:	290a      	cmp	r1, #10
   839fc:	d1ea      	bne.n	839d4 <_fputwc_r+0x50>
   839fe:	4640      	mov	r0, r8
   83a00:	4622      	mov	r2, r4
   83a02:	f7ff fda3 	bl	8354c <__swbuf_r>
   83a06:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83a0a:	4258      	negs	r0, r3
   83a0c:	4158      	adcs	r0, r3
   83a0e:	2800      	cmp	r0, #0
   83a10:	d0e1      	beq.n	839d6 <_fputwc_r+0x52>
   83a12:	f04f 30ff 	mov.w	r0, #4294967295
   83a16:	b002      	add	sp, #8
   83a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a1c:	89a3      	ldrh	r3, [r4, #12]
   83a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a22:	81a3      	strh	r3, [r4, #12]
   83a24:	b002      	add	sp, #8
   83a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a2a:	1e7b      	subs	r3, r7, #1
   83a2c:	2bfe      	cmp	r3, #254	; 0xfe
   83a2e:	d8bd      	bhi.n	839ac <_fputwc_r+0x28>
   83a30:	b2f9      	uxtb	r1, r7
   83a32:	4606      	mov	r6, r0
   83a34:	f88d 1004 	strb.w	r1, [sp, #4]
   83a38:	e7c6      	b.n	839c8 <_fputwc_r+0x44>
   83a3a:	4638      	mov	r0, r7
   83a3c:	b002      	add	sp, #8
   83a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83a42:	bf00      	nop

00083a44 <_malloc_trim_r>:
   83a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a46:	4d23      	ldr	r5, [pc, #140]	; (83ad4 <_malloc_trim_r+0x90>)
   83a48:	460f      	mov	r7, r1
   83a4a:	4604      	mov	r4, r0
   83a4c:	f000 ff08 	bl	84860 <__malloc_lock>
   83a50:	68ab      	ldr	r3, [r5, #8]
   83a52:	685e      	ldr	r6, [r3, #4]
   83a54:	f026 0603 	bic.w	r6, r6, #3
   83a58:	1bf1      	subs	r1, r6, r7
   83a5a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83a5e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83a62:	f021 010f 	bic.w	r1, r1, #15
   83a66:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83a6a:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83a6e:	db07      	blt.n	83a80 <_malloc_trim_r+0x3c>
   83a70:	4620      	mov	r0, r4
   83a72:	2100      	movs	r1, #0
   83a74:	f001 f8d8 	bl	84c28 <_sbrk_r>
   83a78:	68ab      	ldr	r3, [r5, #8]
   83a7a:	4433      	add	r3, r6
   83a7c:	4298      	cmp	r0, r3
   83a7e:	d004      	beq.n	83a8a <_malloc_trim_r+0x46>
   83a80:	4620      	mov	r0, r4
   83a82:	f000 feef 	bl	84864 <__malloc_unlock>
   83a86:	2000      	movs	r0, #0
   83a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a8a:	4620      	mov	r0, r4
   83a8c:	4279      	negs	r1, r7
   83a8e:	f001 f8cb 	bl	84c28 <_sbrk_r>
   83a92:	3001      	adds	r0, #1
   83a94:	d00d      	beq.n	83ab2 <_malloc_trim_r+0x6e>
   83a96:	4b10      	ldr	r3, [pc, #64]	; (83ad8 <_malloc_trim_r+0x94>)
   83a98:	68aa      	ldr	r2, [r5, #8]
   83a9a:	6819      	ldr	r1, [r3, #0]
   83a9c:	1bf6      	subs	r6, r6, r7
   83a9e:	f046 0601 	orr.w	r6, r6, #1
   83aa2:	4620      	mov	r0, r4
   83aa4:	1bc9      	subs	r1, r1, r7
   83aa6:	6056      	str	r6, [r2, #4]
   83aa8:	6019      	str	r1, [r3, #0]
   83aaa:	f000 fedb 	bl	84864 <__malloc_unlock>
   83aae:	2001      	movs	r0, #1
   83ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ab2:	4620      	mov	r0, r4
   83ab4:	2100      	movs	r1, #0
   83ab6:	f001 f8b7 	bl	84c28 <_sbrk_r>
   83aba:	68ab      	ldr	r3, [r5, #8]
   83abc:	1ac2      	subs	r2, r0, r3
   83abe:	2a0f      	cmp	r2, #15
   83ac0:	ddde      	ble.n	83a80 <_malloc_trim_r+0x3c>
   83ac2:	4d06      	ldr	r5, [pc, #24]	; (83adc <_malloc_trim_r+0x98>)
   83ac4:	4904      	ldr	r1, [pc, #16]	; (83ad8 <_malloc_trim_r+0x94>)
   83ac6:	682d      	ldr	r5, [r5, #0]
   83ac8:	f042 0201 	orr.w	r2, r2, #1
   83acc:	1b40      	subs	r0, r0, r5
   83ace:	605a      	str	r2, [r3, #4]
   83ad0:	6008      	str	r0, [r1, #0]
   83ad2:	e7d5      	b.n	83a80 <_malloc_trim_r+0x3c>
   83ad4:	20070588 	.word	0x20070588
   83ad8:	20070ad8 	.word	0x20070ad8
   83adc:	20070994 	.word	0x20070994

00083ae0 <_free_r>:
   83ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ae4:	460d      	mov	r5, r1
   83ae6:	4606      	mov	r6, r0
   83ae8:	2900      	cmp	r1, #0
   83aea:	d055      	beq.n	83b98 <_free_r+0xb8>
   83aec:	f000 feb8 	bl	84860 <__malloc_lock>
   83af0:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83af4:	f8df c170 	ldr.w	ip, [pc, #368]	; 83c68 <_free_r+0x188>
   83af8:	f1a5 0408 	sub.w	r4, r5, #8
   83afc:	f021 0301 	bic.w	r3, r1, #1
   83b00:	18e2      	adds	r2, r4, r3
   83b02:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83b06:	6857      	ldr	r7, [r2, #4]
   83b08:	4290      	cmp	r0, r2
   83b0a:	f027 0703 	bic.w	r7, r7, #3
   83b0e:	d068      	beq.n	83be2 <_free_r+0x102>
   83b10:	f011 0101 	ands.w	r1, r1, #1
   83b14:	6057      	str	r7, [r2, #4]
   83b16:	d032      	beq.n	83b7e <_free_r+0x9e>
   83b18:	2100      	movs	r1, #0
   83b1a:	19d0      	adds	r0, r2, r7
   83b1c:	6840      	ldr	r0, [r0, #4]
   83b1e:	07c0      	lsls	r0, r0, #31
   83b20:	d406      	bmi.n	83b30 <_free_r+0x50>
   83b22:	443b      	add	r3, r7
   83b24:	6890      	ldr	r0, [r2, #8]
   83b26:	2900      	cmp	r1, #0
   83b28:	d04d      	beq.n	83bc6 <_free_r+0xe6>
   83b2a:	68d2      	ldr	r2, [r2, #12]
   83b2c:	60c2      	str	r2, [r0, #12]
   83b2e:	6090      	str	r0, [r2, #8]
   83b30:	f043 0201 	orr.w	r2, r3, #1
   83b34:	6062      	str	r2, [r4, #4]
   83b36:	50e3      	str	r3, [r4, r3]
   83b38:	b9e1      	cbnz	r1, 83b74 <_free_r+0x94>
   83b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83b3e:	d32d      	bcc.n	83b9c <_free_r+0xbc>
   83b40:	0a5a      	lsrs	r2, r3, #9
   83b42:	2a04      	cmp	r2, #4
   83b44:	d869      	bhi.n	83c1a <_free_r+0x13a>
   83b46:	0998      	lsrs	r0, r3, #6
   83b48:	3038      	adds	r0, #56	; 0x38
   83b4a:	0041      	lsls	r1, r0, #1
   83b4c:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83b50:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83b54:	4944      	ldr	r1, [pc, #272]	; (83c68 <_free_r+0x188>)
   83b56:	4562      	cmp	r2, ip
   83b58:	d065      	beq.n	83c26 <_free_r+0x146>
   83b5a:	6851      	ldr	r1, [r2, #4]
   83b5c:	f021 0103 	bic.w	r1, r1, #3
   83b60:	428b      	cmp	r3, r1
   83b62:	d202      	bcs.n	83b6a <_free_r+0x8a>
   83b64:	6892      	ldr	r2, [r2, #8]
   83b66:	4594      	cmp	ip, r2
   83b68:	d1f7      	bne.n	83b5a <_free_r+0x7a>
   83b6a:	68d3      	ldr	r3, [r2, #12]
   83b6c:	60e3      	str	r3, [r4, #12]
   83b6e:	60a2      	str	r2, [r4, #8]
   83b70:	609c      	str	r4, [r3, #8]
   83b72:	60d4      	str	r4, [r2, #12]
   83b74:	4630      	mov	r0, r6
   83b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b7a:	f000 be73 	b.w	84864 <__malloc_unlock>
   83b7e:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83b82:	f10c 0808 	add.w	r8, ip, #8
   83b86:	1b64      	subs	r4, r4, r5
   83b88:	68a0      	ldr	r0, [r4, #8]
   83b8a:	442b      	add	r3, r5
   83b8c:	4540      	cmp	r0, r8
   83b8e:	d042      	beq.n	83c16 <_free_r+0x136>
   83b90:	68e5      	ldr	r5, [r4, #12]
   83b92:	60c5      	str	r5, [r0, #12]
   83b94:	60a8      	str	r0, [r5, #8]
   83b96:	e7c0      	b.n	83b1a <_free_r+0x3a>
   83b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b9c:	08db      	lsrs	r3, r3, #3
   83b9e:	109a      	asrs	r2, r3, #2
   83ba0:	2001      	movs	r0, #1
   83ba2:	4090      	lsls	r0, r2
   83ba4:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83ba8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83bac:	689a      	ldr	r2, [r3, #8]
   83bae:	4301      	orrs	r1, r0
   83bb0:	60a2      	str	r2, [r4, #8]
   83bb2:	60e3      	str	r3, [r4, #12]
   83bb4:	f8cc 1004 	str.w	r1, [ip, #4]
   83bb8:	4630      	mov	r0, r6
   83bba:	609c      	str	r4, [r3, #8]
   83bbc:	60d4      	str	r4, [r2, #12]
   83bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83bc2:	f000 be4f 	b.w	84864 <__malloc_unlock>
   83bc6:	4d29      	ldr	r5, [pc, #164]	; (83c6c <_free_r+0x18c>)
   83bc8:	42a8      	cmp	r0, r5
   83bca:	d1ae      	bne.n	83b2a <_free_r+0x4a>
   83bcc:	f043 0201 	orr.w	r2, r3, #1
   83bd0:	f8cc 4014 	str.w	r4, [ip, #20]
   83bd4:	f8cc 4010 	str.w	r4, [ip, #16]
   83bd8:	60e0      	str	r0, [r4, #12]
   83bda:	60a0      	str	r0, [r4, #8]
   83bdc:	6062      	str	r2, [r4, #4]
   83bde:	50e3      	str	r3, [r4, r3]
   83be0:	e7c8      	b.n	83b74 <_free_r+0x94>
   83be2:	441f      	add	r7, r3
   83be4:	07cb      	lsls	r3, r1, #31
   83be6:	d407      	bmi.n	83bf8 <_free_r+0x118>
   83be8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83bec:	1a64      	subs	r4, r4, r1
   83bee:	68e3      	ldr	r3, [r4, #12]
   83bf0:	68a2      	ldr	r2, [r4, #8]
   83bf2:	440f      	add	r7, r1
   83bf4:	60d3      	str	r3, [r2, #12]
   83bf6:	609a      	str	r2, [r3, #8]
   83bf8:	4b1d      	ldr	r3, [pc, #116]	; (83c70 <_free_r+0x190>)
   83bfa:	f047 0201 	orr.w	r2, r7, #1
   83bfe:	681b      	ldr	r3, [r3, #0]
   83c00:	6062      	str	r2, [r4, #4]
   83c02:	429f      	cmp	r7, r3
   83c04:	f8cc 4008 	str.w	r4, [ip, #8]
   83c08:	d3b4      	bcc.n	83b74 <_free_r+0x94>
   83c0a:	4b1a      	ldr	r3, [pc, #104]	; (83c74 <_free_r+0x194>)
   83c0c:	4630      	mov	r0, r6
   83c0e:	6819      	ldr	r1, [r3, #0]
   83c10:	f7ff ff18 	bl	83a44 <_malloc_trim_r>
   83c14:	e7ae      	b.n	83b74 <_free_r+0x94>
   83c16:	2101      	movs	r1, #1
   83c18:	e77f      	b.n	83b1a <_free_r+0x3a>
   83c1a:	2a14      	cmp	r2, #20
   83c1c:	d80b      	bhi.n	83c36 <_free_r+0x156>
   83c1e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83c22:	0041      	lsls	r1, r0, #1
   83c24:	e792      	b.n	83b4c <_free_r+0x6c>
   83c26:	1080      	asrs	r0, r0, #2
   83c28:	2501      	movs	r5, #1
   83c2a:	4085      	lsls	r5, r0
   83c2c:	6848      	ldr	r0, [r1, #4]
   83c2e:	4613      	mov	r3, r2
   83c30:	4328      	orrs	r0, r5
   83c32:	6048      	str	r0, [r1, #4]
   83c34:	e79a      	b.n	83b6c <_free_r+0x8c>
   83c36:	2a54      	cmp	r2, #84	; 0x54
   83c38:	d803      	bhi.n	83c42 <_free_r+0x162>
   83c3a:	0b18      	lsrs	r0, r3, #12
   83c3c:	306e      	adds	r0, #110	; 0x6e
   83c3e:	0041      	lsls	r1, r0, #1
   83c40:	e784      	b.n	83b4c <_free_r+0x6c>
   83c42:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83c46:	d803      	bhi.n	83c50 <_free_r+0x170>
   83c48:	0bd8      	lsrs	r0, r3, #15
   83c4a:	3077      	adds	r0, #119	; 0x77
   83c4c:	0041      	lsls	r1, r0, #1
   83c4e:	e77d      	b.n	83b4c <_free_r+0x6c>
   83c50:	f240 5154 	movw	r1, #1364	; 0x554
   83c54:	428a      	cmp	r2, r1
   83c56:	d803      	bhi.n	83c60 <_free_r+0x180>
   83c58:	0c98      	lsrs	r0, r3, #18
   83c5a:	307c      	adds	r0, #124	; 0x7c
   83c5c:	0041      	lsls	r1, r0, #1
   83c5e:	e775      	b.n	83b4c <_free_r+0x6c>
   83c60:	21fc      	movs	r1, #252	; 0xfc
   83c62:	207e      	movs	r0, #126	; 0x7e
   83c64:	e772      	b.n	83b4c <_free_r+0x6c>
   83c66:	bf00      	nop
   83c68:	20070588 	.word	0x20070588
   83c6c:	20070590 	.word	0x20070590
   83c70:	20070990 	.word	0x20070990
   83c74:	20070ad4 	.word	0x20070ad4

00083c78 <__sfvwrite_r>:
   83c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83c7c:	6893      	ldr	r3, [r2, #8]
   83c7e:	b083      	sub	sp, #12
   83c80:	4616      	mov	r6, r2
   83c82:	4681      	mov	r9, r0
   83c84:	460c      	mov	r4, r1
   83c86:	b32b      	cbz	r3, 83cd4 <__sfvwrite_r+0x5c>
   83c88:	898b      	ldrh	r3, [r1, #12]
   83c8a:	0719      	lsls	r1, r3, #28
   83c8c:	d526      	bpl.n	83cdc <__sfvwrite_r+0x64>
   83c8e:	6922      	ldr	r2, [r4, #16]
   83c90:	b322      	cbz	r2, 83cdc <__sfvwrite_r+0x64>
   83c92:	f003 0202 	and.w	r2, r3, #2
   83c96:	b292      	uxth	r2, r2
   83c98:	6835      	ldr	r5, [r6, #0]
   83c9a:	2a00      	cmp	r2, #0
   83c9c:	d02c      	beq.n	83cf8 <__sfvwrite_r+0x80>
   83c9e:	f04f 0a00 	mov.w	sl, #0
   83ca2:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 83f8c <__sfvwrite_r+0x314>
   83ca6:	46d0      	mov	r8, sl
   83ca8:	45d8      	cmp	r8, fp
   83caa:	bf34      	ite	cc
   83cac:	4643      	movcc	r3, r8
   83cae:	465b      	movcs	r3, fp
   83cb0:	4652      	mov	r2, sl
   83cb2:	4648      	mov	r0, r9
   83cb4:	f1b8 0f00 	cmp.w	r8, #0
   83cb8:	d04f      	beq.n	83d5a <__sfvwrite_r+0xe2>
   83cba:	69e1      	ldr	r1, [r4, #28]
   83cbc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83cbe:	47b8      	blx	r7
   83cc0:	2800      	cmp	r0, #0
   83cc2:	dd56      	ble.n	83d72 <__sfvwrite_r+0xfa>
   83cc4:	68b3      	ldr	r3, [r6, #8]
   83cc6:	4482      	add	sl, r0
   83cc8:	1a1b      	subs	r3, r3, r0
   83cca:	ebc0 0808 	rsb	r8, r0, r8
   83cce:	60b3      	str	r3, [r6, #8]
   83cd0:	2b00      	cmp	r3, #0
   83cd2:	d1e9      	bne.n	83ca8 <__sfvwrite_r+0x30>
   83cd4:	2000      	movs	r0, #0
   83cd6:	b003      	add	sp, #12
   83cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cdc:	4648      	mov	r0, r9
   83cde:	4621      	mov	r1, r4
   83ce0:	f7ff fc88 	bl	835f4 <__swsetup_r>
   83ce4:	2800      	cmp	r0, #0
   83ce6:	f040 8148 	bne.w	83f7a <__sfvwrite_r+0x302>
   83cea:	89a3      	ldrh	r3, [r4, #12]
   83cec:	6835      	ldr	r5, [r6, #0]
   83cee:	f003 0202 	and.w	r2, r3, #2
   83cf2:	b292      	uxth	r2, r2
   83cf4:	2a00      	cmp	r2, #0
   83cf6:	d1d2      	bne.n	83c9e <__sfvwrite_r+0x26>
   83cf8:	f013 0a01 	ands.w	sl, r3, #1
   83cfc:	d142      	bne.n	83d84 <__sfvwrite_r+0x10c>
   83cfe:	46d0      	mov	r8, sl
   83d00:	f1b8 0f00 	cmp.w	r8, #0
   83d04:	d023      	beq.n	83d4e <__sfvwrite_r+0xd6>
   83d06:	059a      	lsls	r2, r3, #22
   83d08:	68a7      	ldr	r7, [r4, #8]
   83d0a:	d576      	bpl.n	83dfa <__sfvwrite_r+0x182>
   83d0c:	45b8      	cmp	r8, r7
   83d0e:	f0c0 80a4 	bcc.w	83e5a <__sfvwrite_r+0x1e2>
   83d12:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83d16:	f040 80b2 	bne.w	83e7e <__sfvwrite_r+0x206>
   83d1a:	6820      	ldr	r0, [r4, #0]
   83d1c:	46bb      	mov	fp, r7
   83d1e:	4651      	mov	r1, sl
   83d20:	465a      	mov	r2, fp
   83d22:	f000 fd37 	bl	84794 <memmove>
   83d26:	68a2      	ldr	r2, [r4, #8]
   83d28:	6821      	ldr	r1, [r4, #0]
   83d2a:	1bd2      	subs	r2, r2, r7
   83d2c:	eb01 030b 	add.w	r3, r1, fp
   83d30:	60a2      	str	r2, [r4, #8]
   83d32:	6023      	str	r3, [r4, #0]
   83d34:	4642      	mov	r2, r8
   83d36:	68b3      	ldr	r3, [r6, #8]
   83d38:	4492      	add	sl, r2
   83d3a:	1a9b      	subs	r3, r3, r2
   83d3c:	ebc2 0808 	rsb	r8, r2, r8
   83d40:	60b3      	str	r3, [r6, #8]
   83d42:	2b00      	cmp	r3, #0
   83d44:	d0c6      	beq.n	83cd4 <__sfvwrite_r+0x5c>
   83d46:	89a3      	ldrh	r3, [r4, #12]
   83d48:	f1b8 0f00 	cmp.w	r8, #0
   83d4c:	d1db      	bne.n	83d06 <__sfvwrite_r+0x8e>
   83d4e:	f8d5 a000 	ldr.w	sl, [r5]
   83d52:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83d56:	3508      	adds	r5, #8
   83d58:	e7d2      	b.n	83d00 <__sfvwrite_r+0x88>
   83d5a:	f8d5 a000 	ldr.w	sl, [r5]
   83d5e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83d62:	3508      	adds	r5, #8
   83d64:	e7a0      	b.n	83ca8 <__sfvwrite_r+0x30>
   83d66:	4648      	mov	r0, r9
   83d68:	4621      	mov	r1, r4
   83d6a:	f7ff fd59 	bl	83820 <_fflush_r>
   83d6e:	2800      	cmp	r0, #0
   83d70:	d059      	beq.n	83e26 <__sfvwrite_r+0x1ae>
   83d72:	89a3      	ldrh	r3, [r4, #12]
   83d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83d78:	f04f 30ff 	mov.w	r0, #4294967295
   83d7c:	81a3      	strh	r3, [r4, #12]
   83d7e:	b003      	add	sp, #12
   83d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d84:	4692      	mov	sl, r2
   83d86:	9201      	str	r2, [sp, #4]
   83d88:	4693      	mov	fp, r2
   83d8a:	4690      	mov	r8, r2
   83d8c:	f1b8 0f00 	cmp.w	r8, #0
   83d90:	d02b      	beq.n	83dea <__sfvwrite_r+0x172>
   83d92:	9f01      	ldr	r7, [sp, #4]
   83d94:	2f00      	cmp	r7, #0
   83d96:	d064      	beq.n	83e62 <__sfvwrite_r+0x1ea>
   83d98:	6820      	ldr	r0, [r4, #0]
   83d9a:	6921      	ldr	r1, [r4, #16]
   83d9c:	45c2      	cmp	sl, r8
   83d9e:	bf34      	ite	cc
   83da0:	4653      	movcc	r3, sl
   83da2:	4643      	movcs	r3, r8
   83da4:	4288      	cmp	r0, r1
   83da6:	461f      	mov	r7, r3
   83da8:	f8d4 c008 	ldr.w	ip, [r4, #8]
   83dac:	6962      	ldr	r2, [r4, #20]
   83dae:	d903      	bls.n	83db8 <__sfvwrite_r+0x140>
   83db0:	4494      	add	ip, r2
   83db2:	4563      	cmp	r3, ip
   83db4:	f300 80ae 	bgt.w	83f14 <__sfvwrite_r+0x29c>
   83db8:	4293      	cmp	r3, r2
   83dba:	db36      	blt.n	83e2a <__sfvwrite_r+0x1b2>
   83dbc:	4613      	mov	r3, r2
   83dbe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83dc0:	4648      	mov	r0, r9
   83dc2:	69e1      	ldr	r1, [r4, #28]
   83dc4:	465a      	mov	r2, fp
   83dc6:	47b8      	blx	r7
   83dc8:	1e07      	subs	r7, r0, #0
   83dca:	ddd2      	ble.n	83d72 <__sfvwrite_r+0xfa>
   83dcc:	ebba 0a07 	subs.w	sl, sl, r7
   83dd0:	d03a      	beq.n	83e48 <__sfvwrite_r+0x1d0>
   83dd2:	68b3      	ldr	r3, [r6, #8]
   83dd4:	44bb      	add	fp, r7
   83dd6:	1bdb      	subs	r3, r3, r7
   83dd8:	ebc7 0808 	rsb	r8, r7, r8
   83ddc:	60b3      	str	r3, [r6, #8]
   83dde:	2b00      	cmp	r3, #0
   83de0:	f43f af78 	beq.w	83cd4 <__sfvwrite_r+0x5c>
   83de4:	f1b8 0f00 	cmp.w	r8, #0
   83de8:	d1d3      	bne.n	83d92 <__sfvwrite_r+0x11a>
   83dea:	2700      	movs	r7, #0
   83dec:	f8d5 b000 	ldr.w	fp, [r5]
   83df0:	f8d5 8004 	ldr.w	r8, [r5, #4]
   83df4:	9701      	str	r7, [sp, #4]
   83df6:	3508      	adds	r5, #8
   83df8:	e7c8      	b.n	83d8c <__sfvwrite_r+0x114>
   83dfa:	6820      	ldr	r0, [r4, #0]
   83dfc:	6923      	ldr	r3, [r4, #16]
   83dfe:	4298      	cmp	r0, r3
   83e00:	d802      	bhi.n	83e08 <__sfvwrite_r+0x190>
   83e02:	6963      	ldr	r3, [r4, #20]
   83e04:	4598      	cmp	r8, r3
   83e06:	d272      	bcs.n	83eee <__sfvwrite_r+0x276>
   83e08:	45b8      	cmp	r8, r7
   83e0a:	bf38      	it	cc
   83e0c:	4647      	movcc	r7, r8
   83e0e:	463a      	mov	r2, r7
   83e10:	4651      	mov	r1, sl
   83e12:	f000 fcbf 	bl	84794 <memmove>
   83e16:	68a3      	ldr	r3, [r4, #8]
   83e18:	6822      	ldr	r2, [r4, #0]
   83e1a:	1bdb      	subs	r3, r3, r7
   83e1c:	443a      	add	r2, r7
   83e1e:	60a3      	str	r3, [r4, #8]
   83e20:	6022      	str	r2, [r4, #0]
   83e22:	2b00      	cmp	r3, #0
   83e24:	d09f      	beq.n	83d66 <__sfvwrite_r+0xee>
   83e26:	463a      	mov	r2, r7
   83e28:	e785      	b.n	83d36 <__sfvwrite_r+0xbe>
   83e2a:	461a      	mov	r2, r3
   83e2c:	4659      	mov	r1, fp
   83e2e:	9300      	str	r3, [sp, #0]
   83e30:	f000 fcb0 	bl	84794 <memmove>
   83e34:	9b00      	ldr	r3, [sp, #0]
   83e36:	68a1      	ldr	r1, [r4, #8]
   83e38:	6822      	ldr	r2, [r4, #0]
   83e3a:	1ac9      	subs	r1, r1, r3
   83e3c:	ebba 0a07 	subs.w	sl, sl, r7
   83e40:	4413      	add	r3, r2
   83e42:	60a1      	str	r1, [r4, #8]
   83e44:	6023      	str	r3, [r4, #0]
   83e46:	d1c4      	bne.n	83dd2 <__sfvwrite_r+0x15a>
   83e48:	4648      	mov	r0, r9
   83e4a:	4621      	mov	r1, r4
   83e4c:	f7ff fce8 	bl	83820 <_fflush_r>
   83e50:	2800      	cmp	r0, #0
   83e52:	d18e      	bne.n	83d72 <__sfvwrite_r+0xfa>
   83e54:	f8cd a004 	str.w	sl, [sp, #4]
   83e58:	e7bb      	b.n	83dd2 <__sfvwrite_r+0x15a>
   83e5a:	6820      	ldr	r0, [r4, #0]
   83e5c:	4647      	mov	r7, r8
   83e5e:	46c3      	mov	fp, r8
   83e60:	e75d      	b.n	83d1e <__sfvwrite_r+0xa6>
   83e62:	4658      	mov	r0, fp
   83e64:	210a      	movs	r1, #10
   83e66:	4642      	mov	r2, r8
   83e68:	f000 fbd4 	bl	84614 <memchr>
   83e6c:	2800      	cmp	r0, #0
   83e6e:	d07f      	beq.n	83f70 <__sfvwrite_r+0x2f8>
   83e70:	f100 0a01 	add.w	sl, r0, #1
   83e74:	2701      	movs	r7, #1
   83e76:	ebcb 0a0a 	rsb	sl, fp, sl
   83e7a:	9701      	str	r7, [sp, #4]
   83e7c:	e78c      	b.n	83d98 <__sfvwrite_r+0x120>
   83e7e:	6822      	ldr	r2, [r4, #0]
   83e80:	6921      	ldr	r1, [r4, #16]
   83e82:	6967      	ldr	r7, [r4, #20]
   83e84:	ebc1 0c02 	rsb	ip, r1, r2
   83e88:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   83e8c:	f10c 0201 	add.w	r2, ip, #1
   83e90:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   83e94:	4442      	add	r2, r8
   83e96:	107f      	asrs	r7, r7, #1
   83e98:	4297      	cmp	r7, r2
   83e9a:	bf34      	ite	cc
   83e9c:	4617      	movcc	r7, r2
   83e9e:	463a      	movcs	r2, r7
   83ea0:	055b      	lsls	r3, r3, #21
   83ea2:	d54f      	bpl.n	83f44 <__sfvwrite_r+0x2cc>
   83ea4:	4611      	mov	r1, r2
   83ea6:	4648      	mov	r0, r9
   83ea8:	f8cd c000 	str.w	ip, [sp]
   83eac:	f000 f916 	bl	840dc <_malloc_r>
   83eb0:	f8dd c000 	ldr.w	ip, [sp]
   83eb4:	4683      	mov	fp, r0
   83eb6:	2800      	cmp	r0, #0
   83eb8:	d062      	beq.n	83f80 <__sfvwrite_r+0x308>
   83eba:	4662      	mov	r2, ip
   83ebc:	6921      	ldr	r1, [r4, #16]
   83ebe:	f8cd c000 	str.w	ip, [sp]
   83ec2:	f000 fbf1 	bl	846a8 <memcpy>
   83ec6:	89a2      	ldrh	r2, [r4, #12]
   83ec8:	f8dd c000 	ldr.w	ip, [sp]
   83ecc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   83ed0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   83ed4:	81a2      	strh	r2, [r4, #12]
   83ed6:	eb0b 000c 	add.w	r0, fp, ip
   83eda:	ebcc 0207 	rsb	r2, ip, r7
   83ede:	f8c4 b010 	str.w	fp, [r4, #16]
   83ee2:	6167      	str	r7, [r4, #20]
   83ee4:	6020      	str	r0, [r4, #0]
   83ee6:	60a2      	str	r2, [r4, #8]
   83ee8:	4647      	mov	r7, r8
   83eea:	46c3      	mov	fp, r8
   83eec:	e717      	b.n	83d1e <__sfvwrite_r+0xa6>
   83eee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83ef2:	4590      	cmp	r8, r2
   83ef4:	bf38      	it	cc
   83ef6:	4642      	movcc	r2, r8
   83ef8:	fb92 f2f3 	sdiv	r2, r2, r3
   83efc:	fb02 f303 	mul.w	r3, r2, r3
   83f00:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83f02:	4648      	mov	r0, r9
   83f04:	69e1      	ldr	r1, [r4, #28]
   83f06:	4652      	mov	r2, sl
   83f08:	47b8      	blx	r7
   83f0a:	2800      	cmp	r0, #0
   83f0c:	f77f af31 	ble.w	83d72 <__sfvwrite_r+0xfa>
   83f10:	4602      	mov	r2, r0
   83f12:	e710      	b.n	83d36 <__sfvwrite_r+0xbe>
   83f14:	4662      	mov	r2, ip
   83f16:	4659      	mov	r1, fp
   83f18:	f8cd c000 	str.w	ip, [sp]
   83f1c:	f000 fc3a 	bl	84794 <memmove>
   83f20:	f8dd c000 	ldr.w	ip, [sp]
   83f24:	6823      	ldr	r3, [r4, #0]
   83f26:	4648      	mov	r0, r9
   83f28:	4463      	add	r3, ip
   83f2a:	6023      	str	r3, [r4, #0]
   83f2c:	4621      	mov	r1, r4
   83f2e:	f8cd c000 	str.w	ip, [sp]
   83f32:	f7ff fc75 	bl	83820 <_fflush_r>
   83f36:	f8dd c000 	ldr.w	ip, [sp]
   83f3a:	2800      	cmp	r0, #0
   83f3c:	f47f af19 	bne.w	83d72 <__sfvwrite_r+0xfa>
   83f40:	4667      	mov	r7, ip
   83f42:	e743      	b.n	83dcc <__sfvwrite_r+0x154>
   83f44:	4648      	mov	r0, r9
   83f46:	f8cd c000 	str.w	ip, [sp]
   83f4a:	f000 fc8d 	bl	84868 <_realloc_r>
   83f4e:	f8dd c000 	ldr.w	ip, [sp]
   83f52:	4683      	mov	fp, r0
   83f54:	2800      	cmp	r0, #0
   83f56:	d1be      	bne.n	83ed6 <__sfvwrite_r+0x25e>
   83f58:	4648      	mov	r0, r9
   83f5a:	6921      	ldr	r1, [r4, #16]
   83f5c:	f7ff fdc0 	bl	83ae0 <_free_r>
   83f60:	89a3      	ldrh	r3, [r4, #12]
   83f62:	220c      	movs	r2, #12
   83f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83f68:	b29b      	uxth	r3, r3
   83f6a:	f8c9 2000 	str.w	r2, [r9]
   83f6e:	e701      	b.n	83d74 <__sfvwrite_r+0xfc>
   83f70:	2701      	movs	r7, #1
   83f72:	f108 0a01 	add.w	sl, r8, #1
   83f76:	9701      	str	r7, [sp, #4]
   83f78:	e70e      	b.n	83d98 <__sfvwrite_r+0x120>
   83f7a:	f04f 30ff 	mov.w	r0, #4294967295
   83f7e:	e6aa      	b.n	83cd6 <__sfvwrite_r+0x5e>
   83f80:	230c      	movs	r3, #12
   83f82:	f8c9 3000 	str.w	r3, [r9]
   83f86:	89a3      	ldrh	r3, [r4, #12]
   83f88:	e6f4      	b.n	83d74 <__sfvwrite_r+0xfc>
   83f8a:	bf00      	nop
   83f8c:	7ffffc00 	.word	0x7ffffc00

00083f90 <_fwalk>:
   83f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   83f98:	4688      	mov	r8, r1
   83f9a:	d019      	beq.n	83fd0 <_fwalk+0x40>
   83f9c:	2600      	movs	r6, #0
   83f9e:	687d      	ldr	r5, [r7, #4]
   83fa0:	68bc      	ldr	r4, [r7, #8]
   83fa2:	3d01      	subs	r5, #1
   83fa4:	d40e      	bmi.n	83fc4 <_fwalk+0x34>
   83fa6:	89a3      	ldrh	r3, [r4, #12]
   83fa8:	3d01      	subs	r5, #1
   83faa:	2b01      	cmp	r3, #1
   83fac:	d906      	bls.n	83fbc <_fwalk+0x2c>
   83fae:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83fb2:	4620      	mov	r0, r4
   83fb4:	3301      	adds	r3, #1
   83fb6:	d001      	beq.n	83fbc <_fwalk+0x2c>
   83fb8:	47c0      	blx	r8
   83fba:	4306      	orrs	r6, r0
   83fbc:	1c6b      	adds	r3, r5, #1
   83fbe:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83fc2:	d1f0      	bne.n	83fa6 <_fwalk+0x16>
   83fc4:	683f      	ldr	r7, [r7, #0]
   83fc6:	2f00      	cmp	r7, #0
   83fc8:	d1e9      	bne.n	83f9e <_fwalk+0xe>
   83fca:	4630      	mov	r0, r6
   83fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83fd0:	463e      	mov	r6, r7
   83fd2:	4630      	mov	r0, r6
   83fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083fd8 <__locale_charset>:
   83fd8:	4800      	ldr	r0, [pc, #0]	; (83fdc <__locale_charset+0x4>)
   83fda:	4770      	bx	lr
   83fdc:	20070564 	.word	0x20070564

00083fe0 <__locale_mb_cur_max>:
   83fe0:	4b01      	ldr	r3, [pc, #4]	; (83fe8 <__locale_mb_cur_max+0x8>)
   83fe2:	6818      	ldr	r0, [r3, #0]
   83fe4:	4770      	bx	lr
   83fe6:	bf00      	nop
   83fe8:	20070584 	.word	0x20070584

00083fec <__smakebuf_r>:
   83fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   83fee:	898b      	ldrh	r3, [r1, #12]
   83ff0:	b091      	sub	sp, #68	; 0x44
   83ff2:	b29a      	uxth	r2, r3
   83ff4:	0796      	lsls	r6, r2, #30
   83ff6:	460c      	mov	r4, r1
   83ff8:	4605      	mov	r5, r0
   83ffa:	d437      	bmi.n	8406c <__smakebuf_r+0x80>
   83ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84000:	2900      	cmp	r1, #0
   84002:	db17      	blt.n	84034 <__smakebuf_r+0x48>
   84004:	aa01      	add	r2, sp, #4
   84006:	f000 ff5b 	bl	84ec0 <_fstat_r>
   8400a:	2800      	cmp	r0, #0
   8400c:	db10      	blt.n	84030 <__smakebuf_r+0x44>
   8400e:	9b02      	ldr	r3, [sp, #8]
   84010:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84014:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84018:	424f      	negs	r7, r1
   8401a:	414f      	adcs	r7, r1
   8401c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84020:	d02c      	beq.n	8407c <__smakebuf_r+0x90>
   84022:	89a3      	ldrh	r3, [r4, #12]
   84024:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8402c:	81a3      	strh	r3, [r4, #12]
   8402e:	e00b      	b.n	84048 <__smakebuf_r+0x5c>
   84030:	89a3      	ldrh	r3, [r4, #12]
   84032:	b29a      	uxth	r2, r3
   84034:	f012 0f80 	tst.w	r2, #128	; 0x80
   84038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8403c:	81a3      	strh	r3, [r4, #12]
   8403e:	bf14      	ite	ne
   84040:	2640      	movne	r6, #64	; 0x40
   84042:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   84046:	2700      	movs	r7, #0
   84048:	4628      	mov	r0, r5
   8404a:	4631      	mov	r1, r6
   8404c:	f000 f846 	bl	840dc <_malloc_r>
   84050:	89a3      	ldrh	r3, [r4, #12]
   84052:	2800      	cmp	r0, #0
   84054:	d029      	beq.n	840aa <__smakebuf_r+0xbe>
   84056:	4a1b      	ldr	r2, [pc, #108]	; (840c4 <__smakebuf_r+0xd8>)
   84058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8405c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8405e:	81a3      	strh	r3, [r4, #12]
   84060:	6020      	str	r0, [r4, #0]
   84062:	6120      	str	r0, [r4, #16]
   84064:	6166      	str	r6, [r4, #20]
   84066:	b9a7      	cbnz	r7, 84092 <__smakebuf_r+0xa6>
   84068:	b011      	add	sp, #68	; 0x44
   8406a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8406c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   84070:	2201      	movs	r2, #1
   84072:	600b      	str	r3, [r1, #0]
   84074:	610b      	str	r3, [r1, #16]
   84076:	614a      	str	r2, [r1, #20]
   84078:	b011      	add	sp, #68	; 0x44
   8407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8407c:	4a12      	ldr	r2, [pc, #72]	; (840c8 <__smakebuf_r+0xdc>)
   8407e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   84080:	4293      	cmp	r3, r2
   84082:	d1ce      	bne.n	84022 <__smakebuf_r+0x36>
   84084:	89a3      	ldrh	r3, [r4, #12]
   84086:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8408a:	4333      	orrs	r3, r6
   8408c:	81a3      	strh	r3, [r4, #12]
   8408e:	64e6      	str	r6, [r4, #76]	; 0x4c
   84090:	e7da      	b.n	84048 <__smakebuf_r+0x5c>
   84092:	4628      	mov	r0, r5
   84094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84098:	f000 ff26 	bl	84ee8 <_isatty_r>
   8409c:	2800      	cmp	r0, #0
   8409e:	d0e3      	beq.n	84068 <__smakebuf_r+0x7c>
   840a0:	89a3      	ldrh	r3, [r4, #12]
   840a2:	f043 0301 	orr.w	r3, r3, #1
   840a6:	81a3      	strh	r3, [r4, #12]
   840a8:	e7de      	b.n	84068 <__smakebuf_r+0x7c>
   840aa:	059a      	lsls	r2, r3, #22
   840ac:	d4dc      	bmi.n	84068 <__smakebuf_r+0x7c>
   840ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
   840b2:	f043 0302 	orr.w	r3, r3, #2
   840b6:	2101      	movs	r1, #1
   840b8:	81a3      	strh	r3, [r4, #12]
   840ba:	6022      	str	r2, [r4, #0]
   840bc:	6122      	str	r2, [r4, #16]
   840be:	6161      	str	r1, [r4, #20]
   840c0:	e7d2      	b.n	84068 <__smakebuf_r+0x7c>
   840c2:	bf00      	nop
   840c4:	0008384d 	.word	0x0008384d
   840c8:	00084ca9 	.word	0x00084ca9

000840cc <malloc>:
   840cc:	4b02      	ldr	r3, [pc, #8]	; (840d8 <malloc+0xc>)
   840ce:	4601      	mov	r1, r0
   840d0:	6818      	ldr	r0, [r3, #0]
   840d2:	f000 b803 	b.w	840dc <_malloc_r>
   840d6:	bf00      	nop
   840d8:	20070560 	.word	0x20070560

000840dc <_malloc_r>:
   840dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840e0:	f101 050b 	add.w	r5, r1, #11
   840e4:	2d16      	cmp	r5, #22
   840e6:	b083      	sub	sp, #12
   840e8:	4606      	mov	r6, r0
   840ea:	d927      	bls.n	8413c <_malloc_r+0x60>
   840ec:	f035 0507 	bics.w	r5, r5, #7
   840f0:	d427      	bmi.n	84142 <_malloc_r+0x66>
   840f2:	42a9      	cmp	r1, r5
   840f4:	d825      	bhi.n	84142 <_malloc_r+0x66>
   840f6:	4630      	mov	r0, r6
   840f8:	f000 fbb2 	bl	84860 <__malloc_lock>
   840fc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84100:	d226      	bcs.n	84150 <_malloc_r+0x74>
   84102:	4fc1      	ldr	r7, [pc, #772]	; (84408 <_malloc_r+0x32c>)
   84104:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84108:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   8410c:	68dc      	ldr	r4, [r3, #12]
   8410e:	429c      	cmp	r4, r3
   84110:	f000 81d2 	beq.w	844b8 <_malloc_r+0x3dc>
   84114:	6863      	ldr	r3, [r4, #4]
   84116:	68e2      	ldr	r2, [r4, #12]
   84118:	f023 0303 	bic.w	r3, r3, #3
   8411c:	4423      	add	r3, r4
   8411e:	6858      	ldr	r0, [r3, #4]
   84120:	68a1      	ldr	r1, [r4, #8]
   84122:	f040 0501 	orr.w	r5, r0, #1
   84126:	60ca      	str	r2, [r1, #12]
   84128:	4630      	mov	r0, r6
   8412a:	6091      	str	r1, [r2, #8]
   8412c:	605d      	str	r5, [r3, #4]
   8412e:	f000 fb99 	bl	84864 <__malloc_unlock>
   84132:	3408      	adds	r4, #8
   84134:	4620      	mov	r0, r4
   84136:	b003      	add	sp, #12
   84138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8413c:	2510      	movs	r5, #16
   8413e:	42a9      	cmp	r1, r5
   84140:	d9d9      	bls.n	840f6 <_malloc_r+0x1a>
   84142:	2400      	movs	r4, #0
   84144:	230c      	movs	r3, #12
   84146:	4620      	mov	r0, r4
   84148:	6033      	str	r3, [r6, #0]
   8414a:	b003      	add	sp, #12
   8414c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84150:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   84154:	f000 8089 	beq.w	8426a <_malloc_r+0x18e>
   84158:	f1bc 0f04 	cmp.w	ip, #4
   8415c:	f200 8160 	bhi.w	84420 <_malloc_r+0x344>
   84160:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   84164:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   84168:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8416c:	4fa6      	ldr	r7, [pc, #664]	; (84408 <_malloc_r+0x32c>)
   8416e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   84172:	68cc      	ldr	r4, [r1, #12]
   84174:	42a1      	cmp	r1, r4
   84176:	d105      	bne.n	84184 <_malloc_r+0xa8>
   84178:	e00c      	b.n	84194 <_malloc_r+0xb8>
   8417a:	2b00      	cmp	r3, #0
   8417c:	da79      	bge.n	84272 <_malloc_r+0x196>
   8417e:	68e4      	ldr	r4, [r4, #12]
   84180:	42a1      	cmp	r1, r4
   84182:	d007      	beq.n	84194 <_malloc_r+0xb8>
   84184:	6862      	ldr	r2, [r4, #4]
   84186:	f022 0203 	bic.w	r2, r2, #3
   8418a:	1b53      	subs	r3, r2, r5
   8418c:	2b0f      	cmp	r3, #15
   8418e:	ddf4      	ble.n	8417a <_malloc_r+0x9e>
   84190:	f10c 3cff 	add.w	ip, ip, #4294967295
   84194:	f10c 0c01 	add.w	ip, ip, #1
   84198:	4b9b      	ldr	r3, [pc, #620]	; (84408 <_malloc_r+0x32c>)
   8419a:	693c      	ldr	r4, [r7, #16]
   8419c:	f103 0e08 	add.w	lr, r3, #8
   841a0:	4574      	cmp	r4, lr
   841a2:	f000 817e 	beq.w	844a2 <_malloc_r+0x3c6>
   841a6:	6861      	ldr	r1, [r4, #4]
   841a8:	f021 0103 	bic.w	r1, r1, #3
   841ac:	1b4a      	subs	r2, r1, r5
   841ae:	2a0f      	cmp	r2, #15
   841b0:	f300 8164 	bgt.w	8447c <_malloc_r+0x3a0>
   841b4:	2a00      	cmp	r2, #0
   841b6:	f8c3 e014 	str.w	lr, [r3, #20]
   841ba:	f8c3 e010 	str.w	lr, [r3, #16]
   841be:	da69      	bge.n	84294 <_malloc_r+0x1b8>
   841c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   841c4:	f080 813a 	bcs.w	8443c <_malloc_r+0x360>
   841c8:	08c9      	lsrs	r1, r1, #3
   841ca:	108a      	asrs	r2, r1, #2
   841cc:	f04f 0801 	mov.w	r8, #1
   841d0:	fa08 f802 	lsl.w	r8, r8, r2
   841d4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   841d8:	685a      	ldr	r2, [r3, #4]
   841da:	6888      	ldr	r0, [r1, #8]
   841dc:	ea48 0202 	orr.w	r2, r8, r2
   841e0:	60a0      	str	r0, [r4, #8]
   841e2:	60e1      	str	r1, [r4, #12]
   841e4:	605a      	str	r2, [r3, #4]
   841e6:	608c      	str	r4, [r1, #8]
   841e8:	60c4      	str	r4, [r0, #12]
   841ea:	ea4f 03ac 	mov.w	r3, ip, asr #2
   841ee:	2001      	movs	r0, #1
   841f0:	4098      	lsls	r0, r3
   841f2:	4290      	cmp	r0, r2
   841f4:	d85b      	bhi.n	842ae <_malloc_r+0x1d2>
   841f6:	4202      	tst	r2, r0
   841f8:	d106      	bne.n	84208 <_malloc_r+0x12c>
   841fa:	f02c 0c03 	bic.w	ip, ip, #3
   841fe:	0040      	lsls	r0, r0, #1
   84200:	4202      	tst	r2, r0
   84202:	f10c 0c04 	add.w	ip, ip, #4
   84206:	d0fa      	beq.n	841fe <_malloc_r+0x122>
   84208:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   8420c:	4644      	mov	r4, r8
   8420e:	46e1      	mov	r9, ip
   84210:	68e3      	ldr	r3, [r4, #12]
   84212:	429c      	cmp	r4, r3
   84214:	d107      	bne.n	84226 <_malloc_r+0x14a>
   84216:	e146      	b.n	844a6 <_malloc_r+0x3ca>
   84218:	2a00      	cmp	r2, #0
   8421a:	f280 8157 	bge.w	844cc <_malloc_r+0x3f0>
   8421e:	68db      	ldr	r3, [r3, #12]
   84220:	429c      	cmp	r4, r3
   84222:	f000 8140 	beq.w	844a6 <_malloc_r+0x3ca>
   84226:	6859      	ldr	r1, [r3, #4]
   84228:	f021 0103 	bic.w	r1, r1, #3
   8422c:	1b4a      	subs	r2, r1, r5
   8422e:	2a0f      	cmp	r2, #15
   84230:	ddf2      	ble.n	84218 <_malloc_r+0x13c>
   84232:	461c      	mov	r4, r3
   84234:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84238:	68d9      	ldr	r1, [r3, #12]
   8423a:	f045 0901 	orr.w	r9, r5, #1
   8423e:	f042 0801 	orr.w	r8, r2, #1
   84242:	441d      	add	r5, r3
   84244:	f8c3 9004 	str.w	r9, [r3, #4]
   84248:	4630      	mov	r0, r6
   8424a:	f8cc 100c 	str.w	r1, [ip, #12]
   8424e:	f8c1 c008 	str.w	ip, [r1, #8]
   84252:	617d      	str	r5, [r7, #20]
   84254:	613d      	str	r5, [r7, #16]
   84256:	f8c5 e00c 	str.w	lr, [r5, #12]
   8425a:	f8c5 e008 	str.w	lr, [r5, #8]
   8425e:	f8c5 8004 	str.w	r8, [r5, #4]
   84262:	50aa      	str	r2, [r5, r2]
   84264:	f000 fafe 	bl	84864 <__malloc_unlock>
   84268:	e764      	b.n	84134 <_malloc_r+0x58>
   8426a:	217e      	movs	r1, #126	; 0x7e
   8426c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   84270:	e77c      	b.n	8416c <_malloc_r+0x90>
   84272:	4422      	add	r2, r4
   84274:	6850      	ldr	r0, [r2, #4]
   84276:	68e3      	ldr	r3, [r4, #12]
   84278:	68a1      	ldr	r1, [r4, #8]
   8427a:	f040 0501 	orr.w	r5, r0, #1
   8427e:	60cb      	str	r3, [r1, #12]
   84280:	4630      	mov	r0, r6
   84282:	6099      	str	r1, [r3, #8]
   84284:	6055      	str	r5, [r2, #4]
   84286:	f000 faed 	bl	84864 <__malloc_unlock>
   8428a:	3408      	adds	r4, #8
   8428c:	4620      	mov	r0, r4
   8428e:	b003      	add	sp, #12
   84290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84294:	4421      	add	r1, r4
   84296:	684b      	ldr	r3, [r1, #4]
   84298:	4630      	mov	r0, r6
   8429a:	f043 0301 	orr.w	r3, r3, #1
   8429e:	604b      	str	r3, [r1, #4]
   842a0:	f000 fae0 	bl	84864 <__malloc_unlock>
   842a4:	3408      	adds	r4, #8
   842a6:	4620      	mov	r0, r4
   842a8:	b003      	add	sp, #12
   842aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   842ae:	68bc      	ldr	r4, [r7, #8]
   842b0:	6863      	ldr	r3, [r4, #4]
   842b2:	f023 0903 	bic.w	r9, r3, #3
   842b6:	45a9      	cmp	r9, r5
   842b8:	d304      	bcc.n	842c4 <_malloc_r+0x1e8>
   842ba:	ebc5 0309 	rsb	r3, r5, r9
   842be:	2b0f      	cmp	r3, #15
   842c0:	f300 8091 	bgt.w	843e6 <_malloc_r+0x30a>
   842c4:	4b51      	ldr	r3, [pc, #324]	; (8440c <_malloc_r+0x330>)
   842c6:	4a52      	ldr	r2, [pc, #328]	; (84410 <_malloc_r+0x334>)
   842c8:	6819      	ldr	r1, [r3, #0]
   842ca:	6813      	ldr	r3, [r2, #0]
   842cc:	eb05 0a01 	add.w	sl, r5, r1
   842d0:	3301      	adds	r3, #1
   842d2:	eb04 0b09 	add.w	fp, r4, r9
   842d6:	f000 8161 	beq.w	8459c <_malloc_r+0x4c0>
   842da:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   842de:	f10a 0a0f 	add.w	sl, sl, #15
   842e2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   842e6:	f02a 0a0f 	bic.w	sl, sl, #15
   842ea:	4630      	mov	r0, r6
   842ec:	4651      	mov	r1, sl
   842ee:	9201      	str	r2, [sp, #4]
   842f0:	f000 fc9a 	bl	84c28 <_sbrk_r>
   842f4:	f1b0 3fff 	cmp.w	r0, #4294967295
   842f8:	4680      	mov	r8, r0
   842fa:	9a01      	ldr	r2, [sp, #4]
   842fc:	f000 8101 	beq.w	84502 <_malloc_r+0x426>
   84300:	4583      	cmp	fp, r0
   84302:	f200 80fb 	bhi.w	844fc <_malloc_r+0x420>
   84306:	f8df c114 	ldr.w	ip, [pc, #276]	; 8441c <_malloc_r+0x340>
   8430a:	45c3      	cmp	fp, r8
   8430c:	f8dc 3000 	ldr.w	r3, [ip]
   84310:	4453      	add	r3, sl
   84312:	f8cc 3000 	str.w	r3, [ip]
   84316:	f000 814a 	beq.w	845ae <_malloc_r+0x4d2>
   8431a:	6812      	ldr	r2, [r2, #0]
   8431c:	493c      	ldr	r1, [pc, #240]	; (84410 <_malloc_r+0x334>)
   8431e:	3201      	adds	r2, #1
   84320:	bf1b      	ittet	ne
   84322:	ebcb 0b08 	rsbne	fp, fp, r8
   84326:	445b      	addne	r3, fp
   84328:	f8c1 8000 	streq.w	r8, [r1]
   8432c:	f8cc 3000 	strne.w	r3, [ip]
   84330:	f018 0307 	ands.w	r3, r8, #7
   84334:	f000 8114 	beq.w	84560 <_malloc_r+0x484>
   84338:	f1c3 0208 	rsb	r2, r3, #8
   8433c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   84340:	4490      	add	r8, r2
   84342:	3308      	adds	r3, #8
   84344:	44c2      	add	sl, r8
   84346:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8434a:	ebca 0a03 	rsb	sl, sl, r3
   8434e:	4651      	mov	r1, sl
   84350:	4630      	mov	r0, r6
   84352:	f8cd c004 	str.w	ip, [sp, #4]
   84356:	f000 fc67 	bl	84c28 <_sbrk_r>
   8435a:	1c43      	adds	r3, r0, #1
   8435c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84360:	f000 8135 	beq.w	845ce <_malloc_r+0x4f2>
   84364:	ebc8 0200 	rsb	r2, r8, r0
   84368:	4452      	add	r2, sl
   8436a:	f042 0201 	orr.w	r2, r2, #1
   8436e:	f8dc 3000 	ldr.w	r3, [ip]
   84372:	42bc      	cmp	r4, r7
   84374:	4453      	add	r3, sl
   84376:	f8c7 8008 	str.w	r8, [r7, #8]
   8437a:	f8cc 3000 	str.w	r3, [ip]
   8437e:	f8c8 2004 	str.w	r2, [r8, #4]
   84382:	f8df a098 	ldr.w	sl, [pc, #152]	; 8441c <_malloc_r+0x340>
   84386:	d015      	beq.n	843b4 <_malloc_r+0x2d8>
   84388:	f1b9 0f0f 	cmp.w	r9, #15
   8438c:	f240 80eb 	bls.w	84566 <_malloc_r+0x48a>
   84390:	6861      	ldr	r1, [r4, #4]
   84392:	f1a9 020c 	sub.w	r2, r9, #12
   84396:	f022 0207 	bic.w	r2, r2, #7
   8439a:	f001 0101 	and.w	r1, r1, #1
   8439e:	ea42 0e01 	orr.w	lr, r2, r1
   843a2:	2005      	movs	r0, #5
   843a4:	18a1      	adds	r1, r4, r2
   843a6:	2a0f      	cmp	r2, #15
   843a8:	f8c4 e004 	str.w	lr, [r4, #4]
   843ac:	6048      	str	r0, [r1, #4]
   843ae:	6088      	str	r0, [r1, #8]
   843b0:	f200 8111 	bhi.w	845d6 <_malloc_r+0x4fa>
   843b4:	4a17      	ldr	r2, [pc, #92]	; (84414 <_malloc_r+0x338>)
   843b6:	68bc      	ldr	r4, [r7, #8]
   843b8:	6811      	ldr	r1, [r2, #0]
   843ba:	428b      	cmp	r3, r1
   843bc:	bf88      	it	hi
   843be:	6013      	strhi	r3, [r2, #0]
   843c0:	4a15      	ldr	r2, [pc, #84]	; (84418 <_malloc_r+0x33c>)
   843c2:	6811      	ldr	r1, [r2, #0]
   843c4:	428b      	cmp	r3, r1
   843c6:	bf88      	it	hi
   843c8:	6013      	strhi	r3, [r2, #0]
   843ca:	6862      	ldr	r2, [r4, #4]
   843cc:	f022 0203 	bic.w	r2, r2, #3
   843d0:	4295      	cmp	r5, r2
   843d2:	ebc5 0302 	rsb	r3, r5, r2
   843d6:	d801      	bhi.n	843dc <_malloc_r+0x300>
   843d8:	2b0f      	cmp	r3, #15
   843da:	dc04      	bgt.n	843e6 <_malloc_r+0x30a>
   843dc:	4630      	mov	r0, r6
   843de:	f000 fa41 	bl	84864 <__malloc_unlock>
   843e2:	2400      	movs	r4, #0
   843e4:	e6a6      	b.n	84134 <_malloc_r+0x58>
   843e6:	f045 0201 	orr.w	r2, r5, #1
   843ea:	f043 0301 	orr.w	r3, r3, #1
   843ee:	4425      	add	r5, r4
   843f0:	6062      	str	r2, [r4, #4]
   843f2:	4630      	mov	r0, r6
   843f4:	60bd      	str	r5, [r7, #8]
   843f6:	606b      	str	r3, [r5, #4]
   843f8:	f000 fa34 	bl	84864 <__malloc_unlock>
   843fc:	3408      	adds	r4, #8
   843fe:	4620      	mov	r0, r4
   84400:	b003      	add	sp, #12
   84402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84406:	bf00      	nop
   84408:	20070588 	.word	0x20070588
   8440c:	20070ad4 	.word	0x20070ad4
   84410:	20070994 	.word	0x20070994
   84414:	20070ad0 	.word	0x20070ad0
   84418:	20070acc 	.word	0x20070acc
   8441c:	20070ad8 	.word	0x20070ad8
   84420:	f1bc 0f14 	cmp.w	ip, #20
   84424:	d961      	bls.n	844ea <_malloc_r+0x40e>
   84426:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8442a:	f200 808f 	bhi.w	8454c <_malloc_r+0x470>
   8442e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   84432:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   84436:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8443a:	e697      	b.n	8416c <_malloc_r+0x90>
   8443c:	0a4b      	lsrs	r3, r1, #9
   8443e:	2b04      	cmp	r3, #4
   84440:	d958      	bls.n	844f4 <_malloc_r+0x418>
   84442:	2b14      	cmp	r3, #20
   84444:	f200 80ad 	bhi.w	845a2 <_malloc_r+0x4c6>
   84448:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8444c:	0050      	lsls	r0, r2, #1
   8444e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   84452:	6883      	ldr	r3, [r0, #8]
   84454:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84610 <_malloc_r+0x534>
   84458:	4283      	cmp	r3, r0
   8445a:	f000 808a 	beq.w	84572 <_malloc_r+0x496>
   8445e:	685a      	ldr	r2, [r3, #4]
   84460:	f022 0203 	bic.w	r2, r2, #3
   84464:	4291      	cmp	r1, r2
   84466:	d202      	bcs.n	8446e <_malloc_r+0x392>
   84468:	689b      	ldr	r3, [r3, #8]
   8446a:	4298      	cmp	r0, r3
   8446c:	d1f7      	bne.n	8445e <_malloc_r+0x382>
   8446e:	68d9      	ldr	r1, [r3, #12]
   84470:	687a      	ldr	r2, [r7, #4]
   84472:	60e1      	str	r1, [r4, #12]
   84474:	60a3      	str	r3, [r4, #8]
   84476:	608c      	str	r4, [r1, #8]
   84478:	60dc      	str	r4, [r3, #12]
   8447a:	e6b6      	b.n	841ea <_malloc_r+0x10e>
   8447c:	f045 0701 	orr.w	r7, r5, #1
   84480:	f042 0101 	orr.w	r1, r2, #1
   84484:	4425      	add	r5, r4
   84486:	6067      	str	r7, [r4, #4]
   84488:	4630      	mov	r0, r6
   8448a:	615d      	str	r5, [r3, #20]
   8448c:	611d      	str	r5, [r3, #16]
   8448e:	f8c5 e00c 	str.w	lr, [r5, #12]
   84492:	f8c5 e008 	str.w	lr, [r5, #8]
   84496:	6069      	str	r1, [r5, #4]
   84498:	50aa      	str	r2, [r5, r2]
   8449a:	3408      	adds	r4, #8
   8449c:	f000 f9e2 	bl	84864 <__malloc_unlock>
   844a0:	e648      	b.n	84134 <_malloc_r+0x58>
   844a2:	685a      	ldr	r2, [r3, #4]
   844a4:	e6a1      	b.n	841ea <_malloc_r+0x10e>
   844a6:	f109 0901 	add.w	r9, r9, #1
   844aa:	f019 0f03 	tst.w	r9, #3
   844ae:	f104 0408 	add.w	r4, r4, #8
   844b2:	f47f aead 	bne.w	84210 <_malloc_r+0x134>
   844b6:	e02d      	b.n	84514 <_malloc_r+0x438>
   844b8:	f104 0308 	add.w	r3, r4, #8
   844bc:	6964      	ldr	r4, [r4, #20]
   844be:	42a3      	cmp	r3, r4
   844c0:	bf08      	it	eq
   844c2:	f10c 0c02 	addeq.w	ip, ip, #2
   844c6:	f43f ae67 	beq.w	84198 <_malloc_r+0xbc>
   844ca:	e623      	b.n	84114 <_malloc_r+0x38>
   844cc:	4419      	add	r1, r3
   844ce:	6848      	ldr	r0, [r1, #4]
   844d0:	461c      	mov	r4, r3
   844d2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   844d6:	68db      	ldr	r3, [r3, #12]
   844d8:	f040 0501 	orr.w	r5, r0, #1
   844dc:	604d      	str	r5, [r1, #4]
   844de:	4630      	mov	r0, r6
   844e0:	60d3      	str	r3, [r2, #12]
   844e2:	609a      	str	r2, [r3, #8]
   844e4:	f000 f9be 	bl	84864 <__malloc_unlock>
   844e8:	e624      	b.n	84134 <_malloc_r+0x58>
   844ea:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   844ee:	ea4f 014c 	mov.w	r1, ip, lsl #1
   844f2:	e63b      	b.n	8416c <_malloc_r+0x90>
   844f4:	098a      	lsrs	r2, r1, #6
   844f6:	3238      	adds	r2, #56	; 0x38
   844f8:	0050      	lsls	r0, r2, #1
   844fa:	e7a8      	b.n	8444e <_malloc_r+0x372>
   844fc:	42bc      	cmp	r4, r7
   844fe:	f43f af02 	beq.w	84306 <_malloc_r+0x22a>
   84502:	68bc      	ldr	r4, [r7, #8]
   84504:	6862      	ldr	r2, [r4, #4]
   84506:	f022 0203 	bic.w	r2, r2, #3
   8450a:	e761      	b.n	843d0 <_malloc_r+0x2f4>
   8450c:	f8d8 8000 	ldr.w	r8, [r8]
   84510:	4598      	cmp	r8, r3
   84512:	d17a      	bne.n	8460a <_malloc_r+0x52e>
   84514:	f01c 0f03 	tst.w	ip, #3
   84518:	f1a8 0308 	sub.w	r3, r8, #8
   8451c:	f10c 3cff 	add.w	ip, ip, #4294967295
   84520:	d1f4      	bne.n	8450c <_malloc_r+0x430>
   84522:	687b      	ldr	r3, [r7, #4]
   84524:	ea23 0300 	bic.w	r3, r3, r0
   84528:	607b      	str	r3, [r7, #4]
   8452a:	0040      	lsls	r0, r0, #1
   8452c:	4298      	cmp	r0, r3
   8452e:	f63f aebe 	bhi.w	842ae <_malloc_r+0x1d2>
   84532:	2800      	cmp	r0, #0
   84534:	f43f aebb 	beq.w	842ae <_malloc_r+0x1d2>
   84538:	4203      	tst	r3, r0
   8453a:	46cc      	mov	ip, r9
   8453c:	f47f ae64 	bne.w	84208 <_malloc_r+0x12c>
   84540:	0040      	lsls	r0, r0, #1
   84542:	4203      	tst	r3, r0
   84544:	f10c 0c04 	add.w	ip, ip, #4
   84548:	d0fa      	beq.n	84540 <_malloc_r+0x464>
   8454a:	e65d      	b.n	84208 <_malloc_r+0x12c>
   8454c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   84550:	d819      	bhi.n	84586 <_malloc_r+0x4aa>
   84552:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   84556:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   8455a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8455e:	e605      	b.n	8416c <_malloc_r+0x90>
   84560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   84564:	e6ee      	b.n	84344 <_malloc_r+0x268>
   84566:	2301      	movs	r3, #1
   84568:	f8c8 3004 	str.w	r3, [r8, #4]
   8456c:	4644      	mov	r4, r8
   8456e:	2200      	movs	r2, #0
   84570:	e72e      	b.n	843d0 <_malloc_r+0x2f4>
   84572:	1092      	asrs	r2, r2, #2
   84574:	2001      	movs	r0, #1
   84576:	4090      	lsls	r0, r2
   84578:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8457c:	4619      	mov	r1, r3
   8457e:	4302      	orrs	r2, r0
   84580:	f8c8 2004 	str.w	r2, [r8, #4]
   84584:	e775      	b.n	84472 <_malloc_r+0x396>
   84586:	f240 5354 	movw	r3, #1364	; 0x554
   8458a:	459c      	cmp	ip, r3
   8458c:	d81b      	bhi.n	845c6 <_malloc_r+0x4ea>
   8458e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   84592:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   84596:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8459a:	e5e7      	b.n	8416c <_malloc_r+0x90>
   8459c:	f10a 0a10 	add.w	sl, sl, #16
   845a0:	e6a3      	b.n	842ea <_malloc_r+0x20e>
   845a2:	2b54      	cmp	r3, #84	; 0x54
   845a4:	d81f      	bhi.n	845e6 <_malloc_r+0x50a>
   845a6:	0b0a      	lsrs	r2, r1, #12
   845a8:	326e      	adds	r2, #110	; 0x6e
   845aa:	0050      	lsls	r0, r2, #1
   845ac:	e74f      	b.n	8444e <_malloc_r+0x372>
   845ae:	f3cb 010b 	ubfx	r1, fp, #0, #12
   845b2:	2900      	cmp	r1, #0
   845b4:	f47f aeb1 	bne.w	8431a <_malloc_r+0x23e>
   845b8:	eb0a 0109 	add.w	r1, sl, r9
   845bc:	68ba      	ldr	r2, [r7, #8]
   845be:	f041 0101 	orr.w	r1, r1, #1
   845c2:	6051      	str	r1, [r2, #4]
   845c4:	e6f6      	b.n	843b4 <_malloc_r+0x2d8>
   845c6:	21fc      	movs	r1, #252	; 0xfc
   845c8:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   845cc:	e5ce      	b.n	8416c <_malloc_r+0x90>
   845ce:	2201      	movs	r2, #1
   845d0:	f04f 0a00 	mov.w	sl, #0
   845d4:	e6cb      	b.n	8436e <_malloc_r+0x292>
   845d6:	f104 0108 	add.w	r1, r4, #8
   845da:	4630      	mov	r0, r6
   845dc:	f7ff fa80 	bl	83ae0 <_free_r>
   845e0:	f8da 3000 	ldr.w	r3, [sl]
   845e4:	e6e6      	b.n	843b4 <_malloc_r+0x2d8>
   845e6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   845ea:	d803      	bhi.n	845f4 <_malloc_r+0x518>
   845ec:	0bca      	lsrs	r2, r1, #15
   845ee:	3277      	adds	r2, #119	; 0x77
   845f0:	0050      	lsls	r0, r2, #1
   845f2:	e72c      	b.n	8444e <_malloc_r+0x372>
   845f4:	f240 5254 	movw	r2, #1364	; 0x554
   845f8:	4293      	cmp	r3, r2
   845fa:	d803      	bhi.n	84604 <_malloc_r+0x528>
   845fc:	0c8a      	lsrs	r2, r1, #18
   845fe:	327c      	adds	r2, #124	; 0x7c
   84600:	0050      	lsls	r0, r2, #1
   84602:	e724      	b.n	8444e <_malloc_r+0x372>
   84604:	20fc      	movs	r0, #252	; 0xfc
   84606:	227e      	movs	r2, #126	; 0x7e
   84608:	e721      	b.n	8444e <_malloc_r+0x372>
   8460a:	687b      	ldr	r3, [r7, #4]
   8460c:	e78d      	b.n	8452a <_malloc_r+0x44e>
   8460e:	bf00      	nop
   84610:	20070588 	.word	0x20070588

00084614 <memchr>:
   84614:	0783      	lsls	r3, r0, #30
   84616:	b470      	push	{r4, r5, r6}
   84618:	b2c9      	uxtb	r1, r1
   8461a:	d040      	beq.n	8469e <memchr+0x8a>
   8461c:	1e54      	subs	r4, r2, #1
   8461e:	b32a      	cbz	r2, 8466c <memchr+0x58>
   84620:	7803      	ldrb	r3, [r0, #0]
   84622:	428b      	cmp	r3, r1
   84624:	d023      	beq.n	8466e <memchr+0x5a>
   84626:	1c43      	adds	r3, r0, #1
   84628:	e004      	b.n	84634 <memchr+0x20>
   8462a:	b1fc      	cbz	r4, 8466c <memchr+0x58>
   8462c:	7805      	ldrb	r5, [r0, #0]
   8462e:	4614      	mov	r4, r2
   84630:	428d      	cmp	r5, r1
   84632:	d01c      	beq.n	8466e <memchr+0x5a>
   84634:	f013 0f03 	tst.w	r3, #3
   84638:	4618      	mov	r0, r3
   8463a:	f104 32ff 	add.w	r2, r4, #4294967295
   8463e:	f103 0301 	add.w	r3, r3, #1
   84642:	d1f2      	bne.n	8462a <memchr+0x16>
   84644:	2c03      	cmp	r4, #3
   84646:	d814      	bhi.n	84672 <memchr+0x5e>
   84648:	1e65      	subs	r5, r4, #1
   8464a:	b354      	cbz	r4, 846a2 <memchr+0x8e>
   8464c:	7803      	ldrb	r3, [r0, #0]
   8464e:	428b      	cmp	r3, r1
   84650:	d00d      	beq.n	8466e <memchr+0x5a>
   84652:	1c42      	adds	r2, r0, #1
   84654:	2300      	movs	r3, #0
   84656:	e002      	b.n	8465e <memchr+0x4a>
   84658:	7804      	ldrb	r4, [r0, #0]
   8465a:	428c      	cmp	r4, r1
   8465c:	d007      	beq.n	8466e <memchr+0x5a>
   8465e:	42ab      	cmp	r3, r5
   84660:	4610      	mov	r0, r2
   84662:	f103 0301 	add.w	r3, r3, #1
   84666:	f102 0201 	add.w	r2, r2, #1
   8466a:	d1f5      	bne.n	84658 <memchr+0x44>
   8466c:	2000      	movs	r0, #0
   8466e:	bc70      	pop	{r4, r5, r6}
   84670:	4770      	bx	lr
   84672:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   84676:	4603      	mov	r3, r0
   84678:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   8467c:	681a      	ldr	r2, [r3, #0]
   8467e:	4618      	mov	r0, r3
   84680:	4072      	eors	r2, r6
   84682:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   84686:	ea25 0202 	bic.w	r2, r5, r2
   8468a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   8468e:	f103 0304 	add.w	r3, r3, #4
   84692:	d1d9      	bne.n	84648 <memchr+0x34>
   84694:	3c04      	subs	r4, #4
   84696:	2c03      	cmp	r4, #3
   84698:	4618      	mov	r0, r3
   8469a:	d8ef      	bhi.n	8467c <memchr+0x68>
   8469c:	e7d4      	b.n	84648 <memchr+0x34>
   8469e:	4614      	mov	r4, r2
   846a0:	e7d0      	b.n	84644 <memchr+0x30>
   846a2:	4620      	mov	r0, r4
   846a4:	e7e3      	b.n	8466e <memchr+0x5a>
   846a6:	bf00      	nop

000846a8 <memcpy>:
   846a8:	4684      	mov	ip, r0
   846aa:	ea41 0300 	orr.w	r3, r1, r0
   846ae:	f013 0303 	ands.w	r3, r3, #3
   846b2:	d149      	bne.n	84748 <memcpy+0xa0>
   846b4:	3a40      	subs	r2, #64	; 0x40
   846b6:	d323      	bcc.n	84700 <memcpy+0x58>
   846b8:	680b      	ldr	r3, [r1, #0]
   846ba:	6003      	str	r3, [r0, #0]
   846bc:	684b      	ldr	r3, [r1, #4]
   846be:	6043      	str	r3, [r0, #4]
   846c0:	688b      	ldr	r3, [r1, #8]
   846c2:	6083      	str	r3, [r0, #8]
   846c4:	68cb      	ldr	r3, [r1, #12]
   846c6:	60c3      	str	r3, [r0, #12]
   846c8:	690b      	ldr	r3, [r1, #16]
   846ca:	6103      	str	r3, [r0, #16]
   846cc:	694b      	ldr	r3, [r1, #20]
   846ce:	6143      	str	r3, [r0, #20]
   846d0:	698b      	ldr	r3, [r1, #24]
   846d2:	6183      	str	r3, [r0, #24]
   846d4:	69cb      	ldr	r3, [r1, #28]
   846d6:	61c3      	str	r3, [r0, #28]
   846d8:	6a0b      	ldr	r3, [r1, #32]
   846da:	6203      	str	r3, [r0, #32]
   846dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   846de:	6243      	str	r3, [r0, #36]	; 0x24
   846e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   846e2:	6283      	str	r3, [r0, #40]	; 0x28
   846e4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   846e6:	62c3      	str	r3, [r0, #44]	; 0x2c
   846e8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   846ea:	6303      	str	r3, [r0, #48]	; 0x30
   846ec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   846ee:	6343      	str	r3, [r0, #52]	; 0x34
   846f0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   846f2:	6383      	str	r3, [r0, #56]	; 0x38
   846f4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   846f6:	63c3      	str	r3, [r0, #60]	; 0x3c
   846f8:	3040      	adds	r0, #64	; 0x40
   846fa:	3140      	adds	r1, #64	; 0x40
   846fc:	3a40      	subs	r2, #64	; 0x40
   846fe:	d2db      	bcs.n	846b8 <memcpy+0x10>
   84700:	3230      	adds	r2, #48	; 0x30
   84702:	d30b      	bcc.n	8471c <memcpy+0x74>
   84704:	680b      	ldr	r3, [r1, #0]
   84706:	6003      	str	r3, [r0, #0]
   84708:	684b      	ldr	r3, [r1, #4]
   8470a:	6043      	str	r3, [r0, #4]
   8470c:	688b      	ldr	r3, [r1, #8]
   8470e:	6083      	str	r3, [r0, #8]
   84710:	68cb      	ldr	r3, [r1, #12]
   84712:	60c3      	str	r3, [r0, #12]
   84714:	3010      	adds	r0, #16
   84716:	3110      	adds	r1, #16
   84718:	3a10      	subs	r2, #16
   8471a:	d2f3      	bcs.n	84704 <memcpy+0x5c>
   8471c:	320c      	adds	r2, #12
   8471e:	d305      	bcc.n	8472c <memcpy+0x84>
   84720:	f851 3b04 	ldr.w	r3, [r1], #4
   84724:	f840 3b04 	str.w	r3, [r0], #4
   84728:	3a04      	subs	r2, #4
   8472a:	d2f9      	bcs.n	84720 <memcpy+0x78>
   8472c:	3204      	adds	r2, #4
   8472e:	d008      	beq.n	84742 <memcpy+0x9a>
   84730:	07d2      	lsls	r2, r2, #31
   84732:	bf1c      	itt	ne
   84734:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84738:	f800 3b01 	strbne.w	r3, [r0], #1
   8473c:	d301      	bcc.n	84742 <memcpy+0x9a>
   8473e:	880b      	ldrh	r3, [r1, #0]
   84740:	8003      	strh	r3, [r0, #0]
   84742:	4660      	mov	r0, ip
   84744:	4770      	bx	lr
   84746:	bf00      	nop
   84748:	2a08      	cmp	r2, #8
   8474a:	d313      	bcc.n	84774 <memcpy+0xcc>
   8474c:	078b      	lsls	r3, r1, #30
   8474e:	d0b1      	beq.n	846b4 <memcpy+0xc>
   84750:	f010 0303 	ands.w	r3, r0, #3
   84754:	d0ae      	beq.n	846b4 <memcpy+0xc>
   84756:	f1c3 0304 	rsb	r3, r3, #4
   8475a:	1ad2      	subs	r2, r2, r3
   8475c:	07db      	lsls	r3, r3, #31
   8475e:	bf1c      	itt	ne
   84760:	f811 3b01 	ldrbne.w	r3, [r1], #1
   84764:	f800 3b01 	strbne.w	r3, [r0], #1
   84768:	d3a4      	bcc.n	846b4 <memcpy+0xc>
   8476a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8476e:	f820 3b02 	strh.w	r3, [r0], #2
   84772:	e79f      	b.n	846b4 <memcpy+0xc>
   84774:	3a04      	subs	r2, #4
   84776:	d3d9      	bcc.n	8472c <memcpy+0x84>
   84778:	3a01      	subs	r2, #1
   8477a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8477e:	f800 3b01 	strb.w	r3, [r0], #1
   84782:	d2f9      	bcs.n	84778 <memcpy+0xd0>
   84784:	780b      	ldrb	r3, [r1, #0]
   84786:	7003      	strb	r3, [r0, #0]
   84788:	784b      	ldrb	r3, [r1, #1]
   8478a:	7043      	strb	r3, [r0, #1]
   8478c:	788b      	ldrb	r3, [r1, #2]
   8478e:	7083      	strb	r3, [r0, #2]
   84790:	4660      	mov	r0, ip
   84792:	4770      	bx	lr

00084794 <memmove>:
   84794:	4288      	cmp	r0, r1
   84796:	b4f0      	push	{r4, r5, r6, r7}
   84798:	d910      	bls.n	847bc <memmove+0x28>
   8479a:	188c      	adds	r4, r1, r2
   8479c:	42a0      	cmp	r0, r4
   8479e:	d20d      	bcs.n	847bc <memmove+0x28>
   847a0:	1885      	adds	r5, r0, r2
   847a2:	1e53      	subs	r3, r2, #1
   847a4:	b142      	cbz	r2, 847b8 <memmove+0x24>
   847a6:	4621      	mov	r1, r4
   847a8:	462a      	mov	r2, r5
   847aa:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   847ae:	3b01      	subs	r3, #1
   847b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   847b4:	1c5c      	adds	r4, r3, #1
   847b6:	d1f8      	bne.n	847aa <memmove+0x16>
   847b8:	bcf0      	pop	{r4, r5, r6, r7}
   847ba:	4770      	bx	lr
   847bc:	2a0f      	cmp	r2, #15
   847be:	d944      	bls.n	8484a <memmove+0xb6>
   847c0:	ea40 0301 	orr.w	r3, r0, r1
   847c4:	079b      	lsls	r3, r3, #30
   847c6:	d144      	bne.n	84852 <memmove+0xbe>
   847c8:	f1a2 0710 	sub.w	r7, r2, #16
   847cc:	093f      	lsrs	r7, r7, #4
   847ce:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   847d2:	3610      	adds	r6, #16
   847d4:	460c      	mov	r4, r1
   847d6:	4603      	mov	r3, r0
   847d8:	6825      	ldr	r5, [r4, #0]
   847da:	3310      	adds	r3, #16
   847dc:	f843 5c10 	str.w	r5, [r3, #-16]
   847e0:	6865      	ldr	r5, [r4, #4]
   847e2:	3410      	adds	r4, #16
   847e4:	f843 5c0c 	str.w	r5, [r3, #-12]
   847e8:	f854 5c08 	ldr.w	r5, [r4, #-8]
   847ec:	f843 5c08 	str.w	r5, [r3, #-8]
   847f0:	f854 5c04 	ldr.w	r5, [r4, #-4]
   847f4:	f843 5c04 	str.w	r5, [r3, #-4]
   847f8:	42b3      	cmp	r3, r6
   847fa:	d1ed      	bne.n	847d8 <memmove+0x44>
   847fc:	1c7b      	adds	r3, r7, #1
   847fe:	f002 0c0f 	and.w	ip, r2, #15
   84802:	011b      	lsls	r3, r3, #4
   84804:	f1bc 0f03 	cmp.w	ip, #3
   84808:	4419      	add	r1, r3
   8480a:	4403      	add	r3, r0
   8480c:	d923      	bls.n	84856 <memmove+0xc2>
   8480e:	460e      	mov	r6, r1
   84810:	461d      	mov	r5, r3
   84812:	4664      	mov	r4, ip
   84814:	f856 7b04 	ldr.w	r7, [r6], #4
   84818:	3c04      	subs	r4, #4
   8481a:	2c03      	cmp	r4, #3
   8481c:	f845 7b04 	str.w	r7, [r5], #4
   84820:	d8f8      	bhi.n	84814 <memmove+0x80>
   84822:	f1ac 0404 	sub.w	r4, ip, #4
   84826:	f024 0403 	bic.w	r4, r4, #3
   8482a:	3404      	adds	r4, #4
   8482c:	f002 0203 	and.w	r2, r2, #3
   84830:	4423      	add	r3, r4
   84832:	4421      	add	r1, r4
   84834:	2a00      	cmp	r2, #0
   84836:	d0bf      	beq.n	847b8 <memmove+0x24>
   84838:	441a      	add	r2, r3
   8483a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8483e:	f803 4b01 	strb.w	r4, [r3], #1
   84842:	4293      	cmp	r3, r2
   84844:	d1f9      	bne.n	8483a <memmove+0xa6>
   84846:	bcf0      	pop	{r4, r5, r6, r7}
   84848:	4770      	bx	lr
   8484a:	4603      	mov	r3, r0
   8484c:	2a00      	cmp	r2, #0
   8484e:	d1f3      	bne.n	84838 <memmove+0xa4>
   84850:	e7b2      	b.n	847b8 <memmove+0x24>
   84852:	4603      	mov	r3, r0
   84854:	e7f0      	b.n	84838 <memmove+0xa4>
   84856:	4662      	mov	r2, ip
   84858:	2a00      	cmp	r2, #0
   8485a:	d1ed      	bne.n	84838 <memmove+0xa4>
   8485c:	e7ac      	b.n	847b8 <memmove+0x24>
   8485e:	bf00      	nop

00084860 <__malloc_lock>:
   84860:	4770      	bx	lr
   84862:	bf00      	nop

00084864 <__malloc_unlock>:
   84864:	4770      	bx	lr
   84866:	bf00      	nop

00084868 <_realloc_r>:
   84868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8486c:	460c      	mov	r4, r1
   8486e:	b083      	sub	sp, #12
   84870:	4690      	mov	r8, r2
   84872:	4681      	mov	r9, r0
   84874:	2900      	cmp	r1, #0
   84876:	f000 80ba 	beq.w	849ee <_realloc_r+0x186>
   8487a:	f7ff fff1 	bl	84860 <__malloc_lock>
   8487e:	f108 060b 	add.w	r6, r8, #11
   84882:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84886:	2e16      	cmp	r6, #22
   84888:	f023 0503 	bic.w	r5, r3, #3
   8488c:	f1a4 0708 	sub.w	r7, r4, #8
   84890:	d84b      	bhi.n	8492a <_realloc_r+0xc2>
   84892:	2110      	movs	r1, #16
   84894:	460e      	mov	r6, r1
   84896:	45b0      	cmp	r8, r6
   84898:	d84c      	bhi.n	84934 <_realloc_r+0xcc>
   8489a:	428d      	cmp	r5, r1
   8489c:	da51      	bge.n	84942 <_realloc_r+0xda>
   8489e:	f8df b384 	ldr.w	fp, [pc, #900]	; 84c24 <_realloc_r+0x3bc>
   848a2:	1978      	adds	r0, r7, r5
   848a4:	f8db e008 	ldr.w	lr, [fp, #8]
   848a8:	4586      	cmp	lr, r0
   848aa:	f000 80a6 	beq.w	849fa <_realloc_r+0x192>
   848ae:	6842      	ldr	r2, [r0, #4]
   848b0:	f022 0c01 	bic.w	ip, r2, #1
   848b4:	4484      	add	ip, r0
   848b6:	f8dc c004 	ldr.w	ip, [ip, #4]
   848ba:	f01c 0f01 	tst.w	ip, #1
   848be:	d054      	beq.n	8496a <_realloc_r+0x102>
   848c0:	2200      	movs	r2, #0
   848c2:	4610      	mov	r0, r2
   848c4:	07db      	lsls	r3, r3, #31
   848c6:	d46f      	bmi.n	849a8 <_realloc_r+0x140>
   848c8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   848cc:	ebc3 0a07 	rsb	sl, r3, r7
   848d0:	f8da 3004 	ldr.w	r3, [sl, #4]
   848d4:	f023 0303 	bic.w	r3, r3, #3
   848d8:	442b      	add	r3, r5
   848da:	2800      	cmp	r0, #0
   848dc:	d062      	beq.n	849a4 <_realloc_r+0x13c>
   848de:	4570      	cmp	r0, lr
   848e0:	f000 80e9 	beq.w	84ab6 <_realloc_r+0x24e>
   848e4:	eb02 0e03 	add.w	lr, r2, r3
   848e8:	458e      	cmp	lr, r1
   848ea:	db5b      	blt.n	849a4 <_realloc_r+0x13c>
   848ec:	68c3      	ldr	r3, [r0, #12]
   848ee:	6882      	ldr	r2, [r0, #8]
   848f0:	46d0      	mov	r8, sl
   848f2:	60d3      	str	r3, [r2, #12]
   848f4:	609a      	str	r2, [r3, #8]
   848f6:	f858 1f08 	ldr.w	r1, [r8, #8]!
   848fa:	f8da 300c 	ldr.w	r3, [sl, #12]
   848fe:	1f2a      	subs	r2, r5, #4
   84900:	2a24      	cmp	r2, #36	; 0x24
   84902:	60cb      	str	r3, [r1, #12]
   84904:	6099      	str	r1, [r3, #8]
   84906:	f200 8123 	bhi.w	84b50 <_realloc_r+0x2e8>
   8490a:	2a13      	cmp	r2, #19
   8490c:	f240 80b0 	bls.w	84a70 <_realloc_r+0x208>
   84910:	6823      	ldr	r3, [r4, #0]
   84912:	2a1b      	cmp	r2, #27
   84914:	f8ca 3008 	str.w	r3, [sl, #8]
   84918:	6863      	ldr	r3, [r4, #4]
   8491a:	f8ca 300c 	str.w	r3, [sl, #12]
   8491e:	f200 812b 	bhi.w	84b78 <_realloc_r+0x310>
   84922:	3408      	adds	r4, #8
   84924:	f10a 0310 	add.w	r3, sl, #16
   84928:	e0a3      	b.n	84a72 <_realloc_r+0x20a>
   8492a:	f026 0607 	bic.w	r6, r6, #7
   8492e:	2e00      	cmp	r6, #0
   84930:	4631      	mov	r1, r6
   84932:	dab0      	bge.n	84896 <_realloc_r+0x2e>
   84934:	230c      	movs	r3, #12
   84936:	2000      	movs	r0, #0
   84938:	f8c9 3000 	str.w	r3, [r9]
   8493c:	b003      	add	sp, #12
   8493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84942:	46a0      	mov	r8, r4
   84944:	1baa      	subs	r2, r5, r6
   84946:	2a0f      	cmp	r2, #15
   84948:	f003 0301 	and.w	r3, r3, #1
   8494c:	d81a      	bhi.n	84984 <_realloc_r+0x11c>
   8494e:	432b      	orrs	r3, r5
   84950:	607b      	str	r3, [r7, #4]
   84952:	443d      	add	r5, r7
   84954:	686b      	ldr	r3, [r5, #4]
   84956:	f043 0301 	orr.w	r3, r3, #1
   8495a:	606b      	str	r3, [r5, #4]
   8495c:	4648      	mov	r0, r9
   8495e:	f7ff ff81 	bl	84864 <__malloc_unlock>
   84962:	4640      	mov	r0, r8
   84964:	b003      	add	sp, #12
   84966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8496a:	f022 0203 	bic.w	r2, r2, #3
   8496e:	eb02 0c05 	add.w	ip, r2, r5
   84972:	458c      	cmp	ip, r1
   84974:	dba6      	blt.n	848c4 <_realloc_r+0x5c>
   84976:	68c2      	ldr	r2, [r0, #12]
   84978:	6881      	ldr	r1, [r0, #8]
   8497a:	46a0      	mov	r8, r4
   8497c:	60ca      	str	r2, [r1, #12]
   8497e:	4665      	mov	r5, ip
   84980:	6091      	str	r1, [r2, #8]
   84982:	e7df      	b.n	84944 <_realloc_r+0xdc>
   84984:	19b9      	adds	r1, r7, r6
   84986:	4333      	orrs	r3, r6
   84988:	f042 0001 	orr.w	r0, r2, #1
   8498c:	607b      	str	r3, [r7, #4]
   8498e:	440a      	add	r2, r1
   84990:	6048      	str	r0, [r1, #4]
   84992:	6853      	ldr	r3, [r2, #4]
   84994:	3108      	adds	r1, #8
   84996:	f043 0301 	orr.w	r3, r3, #1
   8499a:	6053      	str	r3, [r2, #4]
   8499c:	4648      	mov	r0, r9
   8499e:	f7ff f89f 	bl	83ae0 <_free_r>
   849a2:	e7db      	b.n	8495c <_realloc_r+0xf4>
   849a4:	428b      	cmp	r3, r1
   849a6:	da33      	bge.n	84a10 <_realloc_r+0x1a8>
   849a8:	4641      	mov	r1, r8
   849aa:	4648      	mov	r0, r9
   849ac:	f7ff fb96 	bl	840dc <_malloc_r>
   849b0:	4680      	mov	r8, r0
   849b2:	2800      	cmp	r0, #0
   849b4:	d0d2      	beq.n	8495c <_realloc_r+0xf4>
   849b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   849ba:	f1a0 0108 	sub.w	r1, r0, #8
   849be:	f023 0201 	bic.w	r2, r3, #1
   849c2:	443a      	add	r2, r7
   849c4:	4291      	cmp	r1, r2
   849c6:	f000 80bc 	beq.w	84b42 <_realloc_r+0x2da>
   849ca:	1f2a      	subs	r2, r5, #4
   849cc:	2a24      	cmp	r2, #36	; 0x24
   849ce:	d86e      	bhi.n	84aae <_realloc_r+0x246>
   849d0:	2a13      	cmp	r2, #19
   849d2:	d842      	bhi.n	84a5a <_realloc_r+0x1f2>
   849d4:	4603      	mov	r3, r0
   849d6:	4622      	mov	r2, r4
   849d8:	6811      	ldr	r1, [r2, #0]
   849da:	6019      	str	r1, [r3, #0]
   849dc:	6851      	ldr	r1, [r2, #4]
   849de:	6059      	str	r1, [r3, #4]
   849e0:	6892      	ldr	r2, [r2, #8]
   849e2:	609a      	str	r2, [r3, #8]
   849e4:	4621      	mov	r1, r4
   849e6:	4648      	mov	r0, r9
   849e8:	f7ff f87a 	bl	83ae0 <_free_r>
   849ec:	e7b6      	b.n	8495c <_realloc_r+0xf4>
   849ee:	4611      	mov	r1, r2
   849f0:	b003      	add	sp, #12
   849f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   849f6:	f7ff bb71 	b.w	840dc <_malloc_r>
   849fa:	f8de 2004 	ldr.w	r2, [lr, #4]
   849fe:	f106 0c10 	add.w	ip, r6, #16
   84a02:	f022 0203 	bic.w	r2, r2, #3
   84a06:	1950      	adds	r0, r2, r5
   84a08:	4560      	cmp	r0, ip
   84a0a:	da3d      	bge.n	84a88 <_realloc_r+0x220>
   84a0c:	4670      	mov	r0, lr
   84a0e:	e759      	b.n	848c4 <_realloc_r+0x5c>
   84a10:	46d0      	mov	r8, sl
   84a12:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84a16:	f8da 100c 	ldr.w	r1, [sl, #12]
   84a1a:	1f2a      	subs	r2, r5, #4
   84a1c:	2a24      	cmp	r2, #36	; 0x24
   84a1e:	60c1      	str	r1, [r0, #12]
   84a20:	6088      	str	r0, [r1, #8]
   84a22:	f200 80a0 	bhi.w	84b66 <_realloc_r+0x2fe>
   84a26:	2a13      	cmp	r2, #19
   84a28:	f240 809b 	bls.w	84b62 <_realloc_r+0x2fa>
   84a2c:	6821      	ldr	r1, [r4, #0]
   84a2e:	2a1b      	cmp	r2, #27
   84a30:	f8ca 1008 	str.w	r1, [sl, #8]
   84a34:	6861      	ldr	r1, [r4, #4]
   84a36:	f8ca 100c 	str.w	r1, [sl, #12]
   84a3a:	f200 80b2 	bhi.w	84ba2 <_realloc_r+0x33a>
   84a3e:	3408      	adds	r4, #8
   84a40:	f10a 0210 	add.w	r2, sl, #16
   84a44:	6821      	ldr	r1, [r4, #0]
   84a46:	461d      	mov	r5, r3
   84a48:	6011      	str	r1, [r2, #0]
   84a4a:	6861      	ldr	r1, [r4, #4]
   84a4c:	4657      	mov	r7, sl
   84a4e:	6051      	str	r1, [r2, #4]
   84a50:	68a3      	ldr	r3, [r4, #8]
   84a52:	6093      	str	r3, [r2, #8]
   84a54:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a58:	e774      	b.n	84944 <_realloc_r+0xdc>
   84a5a:	6823      	ldr	r3, [r4, #0]
   84a5c:	2a1b      	cmp	r2, #27
   84a5e:	6003      	str	r3, [r0, #0]
   84a60:	6863      	ldr	r3, [r4, #4]
   84a62:	6043      	str	r3, [r0, #4]
   84a64:	d862      	bhi.n	84b2c <_realloc_r+0x2c4>
   84a66:	f100 0308 	add.w	r3, r0, #8
   84a6a:	f104 0208 	add.w	r2, r4, #8
   84a6e:	e7b3      	b.n	849d8 <_realloc_r+0x170>
   84a70:	4643      	mov	r3, r8
   84a72:	6822      	ldr	r2, [r4, #0]
   84a74:	4675      	mov	r5, lr
   84a76:	601a      	str	r2, [r3, #0]
   84a78:	6862      	ldr	r2, [r4, #4]
   84a7a:	4657      	mov	r7, sl
   84a7c:	605a      	str	r2, [r3, #4]
   84a7e:	68a2      	ldr	r2, [r4, #8]
   84a80:	609a      	str	r2, [r3, #8]
   84a82:	f8da 3004 	ldr.w	r3, [sl, #4]
   84a86:	e75d      	b.n	84944 <_realloc_r+0xdc>
   84a88:	1b83      	subs	r3, r0, r6
   84a8a:	4437      	add	r7, r6
   84a8c:	f043 0301 	orr.w	r3, r3, #1
   84a90:	f8cb 7008 	str.w	r7, [fp, #8]
   84a94:	607b      	str	r3, [r7, #4]
   84a96:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84a9a:	4648      	mov	r0, r9
   84a9c:	f003 0301 	and.w	r3, r3, #1
   84aa0:	431e      	orrs	r6, r3
   84aa2:	f844 6c04 	str.w	r6, [r4, #-4]
   84aa6:	f7ff fedd 	bl	84864 <__malloc_unlock>
   84aaa:	4620      	mov	r0, r4
   84aac:	e75a      	b.n	84964 <_realloc_r+0xfc>
   84aae:	4621      	mov	r1, r4
   84ab0:	f7ff fe70 	bl	84794 <memmove>
   84ab4:	e796      	b.n	849e4 <_realloc_r+0x17c>
   84ab6:	eb02 0c03 	add.w	ip, r2, r3
   84aba:	f106 0210 	add.w	r2, r6, #16
   84abe:	4594      	cmp	ip, r2
   84ac0:	f6ff af70 	blt.w	849a4 <_realloc_r+0x13c>
   84ac4:	4657      	mov	r7, sl
   84ac6:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84aca:	f8da 300c 	ldr.w	r3, [sl, #12]
   84ace:	1f2a      	subs	r2, r5, #4
   84ad0:	2a24      	cmp	r2, #36	; 0x24
   84ad2:	60cb      	str	r3, [r1, #12]
   84ad4:	6099      	str	r1, [r3, #8]
   84ad6:	f200 8086 	bhi.w	84be6 <_realloc_r+0x37e>
   84ada:	2a13      	cmp	r2, #19
   84adc:	d977      	bls.n	84bce <_realloc_r+0x366>
   84ade:	6823      	ldr	r3, [r4, #0]
   84ae0:	2a1b      	cmp	r2, #27
   84ae2:	f8ca 3008 	str.w	r3, [sl, #8]
   84ae6:	6863      	ldr	r3, [r4, #4]
   84ae8:	f8ca 300c 	str.w	r3, [sl, #12]
   84aec:	f200 8084 	bhi.w	84bf8 <_realloc_r+0x390>
   84af0:	3408      	adds	r4, #8
   84af2:	f10a 0310 	add.w	r3, sl, #16
   84af6:	6822      	ldr	r2, [r4, #0]
   84af8:	601a      	str	r2, [r3, #0]
   84afa:	6862      	ldr	r2, [r4, #4]
   84afc:	605a      	str	r2, [r3, #4]
   84afe:	68a2      	ldr	r2, [r4, #8]
   84b00:	609a      	str	r2, [r3, #8]
   84b02:	ebc6 020c 	rsb	r2, r6, ip
   84b06:	eb0a 0306 	add.w	r3, sl, r6
   84b0a:	f042 0201 	orr.w	r2, r2, #1
   84b0e:	f8cb 3008 	str.w	r3, [fp, #8]
   84b12:	605a      	str	r2, [r3, #4]
   84b14:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b18:	4648      	mov	r0, r9
   84b1a:	f003 0301 	and.w	r3, r3, #1
   84b1e:	431e      	orrs	r6, r3
   84b20:	f8ca 6004 	str.w	r6, [sl, #4]
   84b24:	f7ff fe9e 	bl	84864 <__malloc_unlock>
   84b28:	4638      	mov	r0, r7
   84b2a:	e71b      	b.n	84964 <_realloc_r+0xfc>
   84b2c:	68a3      	ldr	r3, [r4, #8]
   84b2e:	2a24      	cmp	r2, #36	; 0x24
   84b30:	6083      	str	r3, [r0, #8]
   84b32:	68e3      	ldr	r3, [r4, #12]
   84b34:	60c3      	str	r3, [r0, #12]
   84b36:	d02b      	beq.n	84b90 <_realloc_r+0x328>
   84b38:	f100 0310 	add.w	r3, r0, #16
   84b3c:	f104 0210 	add.w	r2, r4, #16
   84b40:	e74a      	b.n	849d8 <_realloc_r+0x170>
   84b42:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84b46:	46a0      	mov	r8, r4
   84b48:	f022 0203 	bic.w	r2, r2, #3
   84b4c:	4415      	add	r5, r2
   84b4e:	e6f9      	b.n	84944 <_realloc_r+0xdc>
   84b50:	4621      	mov	r1, r4
   84b52:	4640      	mov	r0, r8
   84b54:	4675      	mov	r5, lr
   84b56:	4657      	mov	r7, sl
   84b58:	f7ff fe1c 	bl	84794 <memmove>
   84b5c:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b60:	e6f0      	b.n	84944 <_realloc_r+0xdc>
   84b62:	4642      	mov	r2, r8
   84b64:	e76e      	b.n	84a44 <_realloc_r+0x1dc>
   84b66:	4621      	mov	r1, r4
   84b68:	4640      	mov	r0, r8
   84b6a:	461d      	mov	r5, r3
   84b6c:	4657      	mov	r7, sl
   84b6e:	f7ff fe11 	bl	84794 <memmove>
   84b72:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b76:	e6e5      	b.n	84944 <_realloc_r+0xdc>
   84b78:	68a3      	ldr	r3, [r4, #8]
   84b7a:	2a24      	cmp	r2, #36	; 0x24
   84b7c:	f8ca 3010 	str.w	r3, [sl, #16]
   84b80:	68e3      	ldr	r3, [r4, #12]
   84b82:	f8ca 3014 	str.w	r3, [sl, #20]
   84b86:	d018      	beq.n	84bba <_realloc_r+0x352>
   84b88:	3410      	adds	r4, #16
   84b8a:	f10a 0318 	add.w	r3, sl, #24
   84b8e:	e770      	b.n	84a72 <_realloc_r+0x20a>
   84b90:	6922      	ldr	r2, [r4, #16]
   84b92:	f100 0318 	add.w	r3, r0, #24
   84b96:	6102      	str	r2, [r0, #16]
   84b98:	6961      	ldr	r1, [r4, #20]
   84b9a:	f104 0218 	add.w	r2, r4, #24
   84b9e:	6141      	str	r1, [r0, #20]
   84ba0:	e71a      	b.n	849d8 <_realloc_r+0x170>
   84ba2:	68a1      	ldr	r1, [r4, #8]
   84ba4:	2a24      	cmp	r2, #36	; 0x24
   84ba6:	f8ca 1010 	str.w	r1, [sl, #16]
   84baa:	68e1      	ldr	r1, [r4, #12]
   84bac:	f8ca 1014 	str.w	r1, [sl, #20]
   84bb0:	d00f      	beq.n	84bd2 <_realloc_r+0x36a>
   84bb2:	3410      	adds	r4, #16
   84bb4:	f10a 0218 	add.w	r2, sl, #24
   84bb8:	e744      	b.n	84a44 <_realloc_r+0x1dc>
   84bba:	6922      	ldr	r2, [r4, #16]
   84bbc:	f10a 0320 	add.w	r3, sl, #32
   84bc0:	f8ca 2018 	str.w	r2, [sl, #24]
   84bc4:	6962      	ldr	r2, [r4, #20]
   84bc6:	3418      	adds	r4, #24
   84bc8:	f8ca 201c 	str.w	r2, [sl, #28]
   84bcc:	e751      	b.n	84a72 <_realloc_r+0x20a>
   84bce:	463b      	mov	r3, r7
   84bd0:	e791      	b.n	84af6 <_realloc_r+0x28e>
   84bd2:	6921      	ldr	r1, [r4, #16]
   84bd4:	f10a 0220 	add.w	r2, sl, #32
   84bd8:	f8ca 1018 	str.w	r1, [sl, #24]
   84bdc:	6961      	ldr	r1, [r4, #20]
   84bde:	3418      	adds	r4, #24
   84be0:	f8ca 101c 	str.w	r1, [sl, #28]
   84be4:	e72e      	b.n	84a44 <_realloc_r+0x1dc>
   84be6:	4621      	mov	r1, r4
   84be8:	4638      	mov	r0, r7
   84bea:	f8cd c004 	str.w	ip, [sp, #4]
   84bee:	f7ff fdd1 	bl	84794 <memmove>
   84bf2:	f8dd c004 	ldr.w	ip, [sp, #4]
   84bf6:	e784      	b.n	84b02 <_realloc_r+0x29a>
   84bf8:	68a3      	ldr	r3, [r4, #8]
   84bfa:	2a24      	cmp	r2, #36	; 0x24
   84bfc:	f8ca 3010 	str.w	r3, [sl, #16]
   84c00:	68e3      	ldr	r3, [r4, #12]
   84c02:	f8ca 3014 	str.w	r3, [sl, #20]
   84c06:	d003      	beq.n	84c10 <_realloc_r+0x3a8>
   84c08:	3410      	adds	r4, #16
   84c0a:	f10a 0318 	add.w	r3, sl, #24
   84c0e:	e772      	b.n	84af6 <_realloc_r+0x28e>
   84c10:	6922      	ldr	r2, [r4, #16]
   84c12:	f10a 0320 	add.w	r3, sl, #32
   84c16:	f8ca 2018 	str.w	r2, [sl, #24]
   84c1a:	6962      	ldr	r2, [r4, #20]
   84c1c:	3418      	adds	r4, #24
   84c1e:	f8ca 201c 	str.w	r2, [sl, #28]
   84c22:	e768      	b.n	84af6 <_realloc_r+0x28e>
   84c24:	20070588 	.word	0x20070588

00084c28 <_sbrk_r>:
   84c28:	b538      	push	{r3, r4, r5, lr}
   84c2a:	4c07      	ldr	r4, [pc, #28]	; (84c48 <_sbrk_r+0x20>)
   84c2c:	2300      	movs	r3, #0
   84c2e:	4605      	mov	r5, r0
   84c30:	4608      	mov	r0, r1
   84c32:	6023      	str	r3, [r4, #0]
   84c34:	f7fd fc72 	bl	8251c <_sbrk>
   84c38:	1c43      	adds	r3, r0, #1
   84c3a:	d000      	beq.n	84c3e <_sbrk_r+0x16>
   84c3c:	bd38      	pop	{r3, r4, r5, pc}
   84c3e:	6823      	ldr	r3, [r4, #0]
   84c40:	2b00      	cmp	r3, #0
   84c42:	d0fb      	beq.n	84c3c <_sbrk_r+0x14>
   84c44:	602b      	str	r3, [r5, #0]
   84c46:	bd38      	pop	{r3, r4, r5, pc}
   84c48:	20070b88 	.word	0x20070b88

00084c4c <__sread>:
   84c4c:	b510      	push	{r4, lr}
   84c4e:	460c      	mov	r4, r1
   84c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c54:	f000 f96e 	bl	84f34 <_read_r>
   84c58:	2800      	cmp	r0, #0
   84c5a:	db03      	blt.n	84c64 <__sread+0x18>
   84c5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84c5e:	4403      	add	r3, r0
   84c60:	6523      	str	r3, [r4, #80]	; 0x50
   84c62:	bd10      	pop	{r4, pc}
   84c64:	89a3      	ldrh	r3, [r4, #12]
   84c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84c6a:	81a3      	strh	r3, [r4, #12]
   84c6c:	bd10      	pop	{r4, pc}
   84c6e:	bf00      	nop

00084c70 <__swrite>:
   84c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c74:	460c      	mov	r4, r1
   84c76:	8989      	ldrh	r1, [r1, #12]
   84c78:	461d      	mov	r5, r3
   84c7a:	05cb      	lsls	r3, r1, #23
   84c7c:	4616      	mov	r6, r2
   84c7e:	4607      	mov	r7, r0
   84c80:	d506      	bpl.n	84c90 <__swrite+0x20>
   84c82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c86:	2200      	movs	r2, #0
   84c88:	2302      	movs	r3, #2
   84c8a:	f000 f93f 	bl	84f0c <_lseek_r>
   84c8e:	89a1      	ldrh	r1, [r4, #12]
   84c90:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84c94:	81a1      	strh	r1, [r4, #12]
   84c96:	4638      	mov	r0, r7
   84c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c9c:	4632      	mov	r2, r6
   84c9e:	462b      	mov	r3, r5
   84ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84ca4:	f000 b84a 	b.w	84d3c <_write_r>

00084ca8 <__sseek>:
   84ca8:	b510      	push	{r4, lr}
   84caa:	460c      	mov	r4, r1
   84cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84cb0:	f000 f92c 	bl	84f0c <_lseek_r>
   84cb4:	89a3      	ldrh	r3, [r4, #12]
   84cb6:	1c42      	adds	r2, r0, #1
   84cb8:	bf0e      	itee	eq
   84cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84cc2:	6520      	strne	r0, [r4, #80]	; 0x50
   84cc4:	81a3      	strh	r3, [r4, #12]
   84cc6:	bd10      	pop	{r4, pc}

00084cc8 <__sclose>:
   84cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ccc:	f000 b89e 	b.w	84e0c <_close_r>

00084cd0 <_wcrtomb_r>:
   84cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84cd4:	461e      	mov	r6, r3
   84cd6:	b086      	sub	sp, #24
   84cd8:	460c      	mov	r4, r1
   84cda:	4605      	mov	r5, r0
   84cdc:	4617      	mov	r7, r2
   84cde:	4b0f      	ldr	r3, [pc, #60]	; (84d1c <_wcrtomb_r+0x4c>)
   84ce0:	b191      	cbz	r1, 84d08 <_wcrtomb_r+0x38>
   84ce2:	f8d3 8000 	ldr.w	r8, [r3]
   84ce6:	f7ff f977 	bl	83fd8 <__locale_charset>
   84cea:	9600      	str	r6, [sp, #0]
   84cec:	4603      	mov	r3, r0
   84cee:	4621      	mov	r1, r4
   84cf0:	463a      	mov	r2, r7
   84cf2:	4628      	mov	r0, r5
   84cf4:	47c0      	blx	r8
   84cf6:	1c43      	adds	r3, r0, #1
   84cf8:	d103      	bne.n	84d02 <_wcrtomb_r+0x32>
   84cfa:	2200      	movs	r2, #0
   84cfc:	238a      	movs	r3, #138	; 0x8a
   84cfe:	6032      	str	r2, [r6, #0]
   84d00:	602b      	str	r3, [r5, #0]
   84d02:	b006      	add	sp, #24
   84d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d08:	681f      	ldr	r7, [r3, #0]
   84d0a:	f7ff f965 	bl	83fd8 <__locale_charset>
   84d0e:	9600      	str	r6, [sp, #0]
   84d10:	4603      	mov	r3, r0
   84d12:	4622      	mov	r2, r4
   84d14:	4628      	mov	r0, r5
   84d16:	a903      	add	r1, sp, #12
   84d18:	47b8      	blx	r7
   84d1a:	e7ec      	b.n	84cf6 <_wcrtomb_r+0x26>
   84d1c:	20070998 	.word	0x20070998

00084d20 <__ascii_wctomb>:
   84d20:	b121      	cbz	r1, 84d2c <__ascii_wctomb+0xc>
   84d22:	2aff      	cmp	r2, #255	; 0xff
   84d24:	d804      	bhi.n	84d30 <__ascii_wctomb+0x10>
   84d26:	700a      	strb	r2, [r1, #0]
   84d28:	2001      	movs	r0, #1
   84d2a:	4770      	bx	lr
   84d2c:	4608      	mov	r0, r1
   84d2e:	4770      	bx	lr
   84d30:	238a      	movs	r3, #138	; 0x8a
   84d32:	6003      	str	r3, [r0, #0]
   84d34:	f04f 30ff 	mov.w	r0, #4294967295
   84d38:	4770      	bx	lr
   84d3a:	bf00      	nop

00084d3c <_write_r>:
   84d3c:	b570      	push	{r4, r5, r6, lr}
   84d3e:	4c08      	ldr	r4, [pc, #32]	; (84d60 <_write_r+0x24>)
   84d40:	4606      	mov	r6, r0
   84d42:	2500      	movs	r5, #0
   84d44:	4608      	mov	r0, r1
   84d46:	4611      	mov	r1, r2
   84d48:	461a      	mov	r2, r3
   84d4a:	6025      	str	r5, [r4, #0]
   84d4c:	f7fb fa88 	bl	80260 <_write>
   84d50:	1c43      	adds	r3, r0, #1
   84d52:	d000      	beq.n	84d56 <_write_r+0x1a>
   84d54:	bd70      	pop	{r4, r5, r6, pc}
   84d56:	6823      	ldr	r3, [r4, #0]
   84d58:	2b00      	cmp	r3, #0
   84d5a:	d0fb      	beq.n	84d54 <_write_r+0x18>
   84d5c:	6033      	str	r3, [r6, #0]
   84d5e:	bd70      	pop	{r4, r5, r6, pc}
   84d60:	20070b88 	.word	0x20070b88

00084d64 <__register_exitproc>:
   84d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   84d66:	4c27      	ldr	r4, [pc, #156]	; (84e04 <__register_exitproc+0xa0>)
   84d68:	b085      	sub	sp, #20
   84d6a:	6826      	ldr	r6, [r4, #0]
   84d6c:	4607      	mov	r7, r0
   84d6e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   84d72:	2c00      	cmp	r4, #0
   84d74:	d040      	beq.n	84df8 <__register_exitproc+0x94>
   84d76:	6865      	ldr	r5, [r4, #4]
   84d78:	2d1f      	cmp	r5, #31
   84d7a:	dd1e      	ble.n	84dba <__register_exitproc+0x56>
   84d7c:	4822      	ldr	r0, [pc, #136]	; (84e08 <__register_exitproc+0xa4>)
   84d7e:	b918      	cbnz	r0, 84d88 <__register_exitproc+0x24>
   84d80:	f04f 30ff 	mov.w	r0, #4294967295
   84d84:	b005      	add	sp, #20
   84d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d88:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84d8c:	9103      	str	r1, [sp, #12]
   84d8e:	9202      	str	r2, [sp, #8]
   84d90:	9301      	str	r3, [sp, #4]
   84d92:	f7ff f99b 	bl	840cc <malloc>
   84d96:	9903      	ldr	r1, [sp, #12]
   84d98:	4604      	mov	r4, r0
   84d9a:	9a02      	ldr	r2, [sp, #8]
   84d9c:	9b01      	ldr	r3, [sp, #4]
   84d9e:	2800      	cmp	r0, #0
   84da0:	d0ee      	beq.n	84d80 <__register_exitproc+0x1c>
   84da2:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   84da6:	2000      	movs	r0, #0
   84da8:	6025      	str	r5, [r4, #0]
   84daa:	6060      	str	r0, [r4, #4]
   84dac:	4605      	mov	r5, r0
   84dae:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84db2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   84db6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   84dba:	b93f      	cbnz	r7, 84dcc <__register_exitproc+0x68>
   84dbc:	1c6b      	adds	r3, r5, #1
   84dbe:	2000      	movs	r0, #0
   84dc0:	3502      	adds	r5, #2
   84dc2:	6063      	str	r3, [r4, #4]
   84dc4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   84dc8:	b005      	add	sp, #20
   84dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84dcc:	2601      	movs	r6, #1
   84dce:	40ae      	lsls	r6, r5
   84dd0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   84dd4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   84dd8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   84ddc:	2f02      	cmp	r7, #2
   84dde:	ea42 0206 	orr.w	r2, r2, r6
   84de2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   84de6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   84dea:	d1e7      	bne.n	84dbc <__register_exitproc+0x58>
   84dec:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   84df0:	431e      	orrs	r6, r3
   84df2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   84df6:	e7e1      	b.n	84dbc <__register_exitproc+0x58>
   84df8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   84dfc:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   84e00:	e7b9      	b.n	84d76 <__register_exitproc+0x12>
   84e02:	bf00      	nop
   84e04:	00085898 	.word	0x00085898
   84e08:	000840cd 	.word	0x000840cd

00084e0c <_close_r>:
   84e0c:	b538      	push	{r3, r4, r5, lr}
   84e0e:	4c07      	ldr	r4, [pc, #28]	; (84e2c <_close_r+0x20>)
   84e10:	2300      	movs	r3, #0
   84e12:	4605      	mov	r5, r0
   84e14:	4608      	mov	r0, r1
   84e16:	6023      	str	r3, [r4, #0]
   84e18:	f7fd fb9a 	bl	82550 <_close>
   84e1c:	1c43      	adds	r3, r0, #1
   84e1e:	d000      	beq.n	84e22 <_close_r+0x16>
   84e20:	bd38      	pop	{r3, r4, r5, pc}
   84e22:	6823      	ldr	r3, [r4, #0]
   84e24:	2b00      	cmp	r3, #0
   84e26:	d0fb      	beq.n	84e20 <_close_r+0x14>
   84e28:	602b      	str	r3, [r5, #0]
   84e2a:	bd38      	pop	{r3, r4, r5, pc}
   84e2c:	20070b88 	.word	0x20070b88

00084e30 <_fclose_r>:
   84e30:	b570      	push	{r4, r5, r6, lr}
   84e32:	460c      	mov	r4, r1
   84e34:	4605      	mov	r5, r0
   84e36:	b131      	cbz	r1, 84e46 <_fclose_r+0x16>
   84e38:	b110      	cbz	r0, 84e40 <_fclose_r+0x10>
   84e3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e3c:	2b00      	cmp	r3, #0
   84e3e:	d02f      	beq.n	84ea0 <_fclose_r+0x70>
   84e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84e44:	b90b      	cbnz	r3, 84e4a <_fclose_r+0x1a>
   84e46:	2000      	movs	r0, #0
   84e48:	bd70      	pop	{r4, r5, r6, pc}
   84e4a:	4628      	mov	r0, r5
   84e4c:	4621      	mov	r1, r4
   84e4e:	f7fe fce7 	bl	83820 <_fflush_r>
   84e52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84e54:	4606      	mov	r6, r0
   84e56:	b133      	cbz	r3, 84e66 <_fclose_r+0x36>
   84e58:	4628      	mov	r0, r5
   84e5a:	69e1      	ldr	r1, [r4, #28]
   84e5c:	4798      	blx	r3
   84e5e:	2800      	cmp	r0, #0
   84e60:	bfb8      	it	lt
   84e62:	f04f 36ff 	movlt.w	r6, #4294967295
   84e66:	89a3      	ldrh	r3, [r4, #12]
   84e68:	061b      	lsls	r3, r3, #24
   84e6a:	d41c      	bmi.n	84ea6 <_fclose_r+0x76>
   84e6c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84e6e:	b141      	cbz	r1, 84e82 <_fclose_r+0x52>
   84e70:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84e74:	4299      	cmp	r1, r3
   84e76:	d002      	beq.n	84e7e <_fclose_r+0x4e>
   84e78:	4628      	mov	r0, r5
   84e7a:	f7fe fe31 	bl	83ae0 <_free_r>
   84e7e:	2300      	movs	r3, #0
   84e80:	6323      	str	r3, [r4, #48]	; 0x30
   84e82:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84e84:	b121      	cbz	r1, 84e90 <_fclose_r+0x60>
   84e86:	4628      	mov	r0, r5
   84e88:	f7fe fe2a 	bl	83ae0 <_free_r>
   84e8c:	2300      	movs	r3, #0
   84e8e:	6463      	str	r3, [r4, #68]	; 0x44
   84e90:	f7fe fd5c 	bl	8394c <__sfp_lock_acquire>
   84e94:	2300      	movs	r3, #0
   84e96:	81a3      	strh	r3, [r4, #12]
   84e98:	f7fe fd5a 	bl	83950 <__sfp_lock_release>
   84e9c:	4630      	mov	r0, r6
   84e9e:	bd70      	pop	{r4, r5, r6, pc}
   84ea0:	f7fe fcda 	bl	83858 <__sinit>
   84ea4:	e7cc      	b.n	84e40 <_fclose_r+0x10>
   84ea6:	4628      	mov	r0, r5
   84ea8:	6921      	ldr	r1, [r4, #16]
   84eaa:	f7fe fe19 	bl	83ae0 <_free_r>
   84eae:	e7dd      	b.n	84e6c <_fclose_r+0x3c>

00084eb0 <fclose>:
   84eb0:	4b02      	ldr	r3, [pc, #8]	; (84ebc <fclose+0xc>)
   84eb2:	4601      	mov	r1, r0
   84eb4:	6818      	ldr	r0, [r3, #0]
   84eb6:	f7ff bfbb 	b.w	84e30 <_fclose_r>
   84eba:	bf00      	nop
   84ebc:	20070560 	.word	0x20070560

00084ec0 <_fstat_r>:
   84ec0:	b538      	push	{r3, r4, r5, lr}
   84ec2:	4c08      	ldr	r4, [pc, #32]	; (84ee4 <_fstat_r+0x24>)
   84ec4:	2300      	movs	r3, #0
   84ec6:	4605      	mov	r5, r0
   84ec8:	4608      	mov	r0, r1
   84eca:	4611      	mov	r1, r2
   84ecc:	6023      	str	r3, [r4, #0]
   84ece:	f7fd fb43 	bl	82558 <_fstat>
   84ed2:	1c43      	adds	r3, r0, #1
   84ed4:	d000      	beq.n	84ed8 <_fstat_r+0x18>
   84ed6:	bd38      	pop	{r3, r4, r5, pc}
   84ed8:	6823      	ldr	r3, [r4, #0]
   84eda:	2b00      	cmp	r3, #0
   84edc:	d0fb      	beq.n	84ed6 <_fstat_r+0x16>
   84ede:	602b      	str	r3, [r5, #0]
   84ee0:	bd38      	pop	{r3, r4, r5, pc}
   84ee2:	bf00      	nop
   84ee4:	20070b88 	.word	0x20070b88

00084ee8 <_isatty_r>:
   84ee8:	b538      	push	{r3, r4, r5, lr}
   84eea:	4c07      	ldr	r4, [pc, #28]	; (84f08 <_isatty_r+0x20>)
   84eec:	2300      	movs	r3, #0
   84eee:	4605      	mov	r5, r0
   84ef0:	4608      	mov	r0, r1
   84ef2:	6023      	str	r3, [r4, #0]
   84ef4:	f7fd fb36 	bl	82564 <_isatty>
   84ef8:	1c43      	adds	r3, r0, #1
   84efa:	d000      	beq.n	84efe <_isatty_r+0x16>
   84efc:	bd38      	pop	{r3, r4, r5, pc}
   84efe:	6823      	ldr	r3, [r4, #0]
   84f00:	2b00      	cmp	r3, #0
   84f02:	d0fb      	beq.n	84efc <_isatty_r+0x14>
   84f04:	602b      	str	r3, [r5, #0]
   84f06:	bd38      	pop	{r3, r4, r5, pc}
   84f08:	20070b88 	.word	0x20070b88

00084f0c <_lseek_r>:
   84f0c:	b570      	push	{r4, r5, r6, lr}
   84f0e:	4c08      	ldr	r4, [pc, #32]	; (84f30 <_lseek_r+0x24>)
   84f10:	4606      	mov	r6, r0
   84f12:	2500      	movs	r5, #0
   84f14:	4608      	mov	r0, r1
   84f16:	4611      	mov	r1, r2
   84f18:	461a      	mov	r2, r3
   84f1a:	6025      	str	r5, [r4, #0]
   84f1c:	f7fd fb24 	bl	82568 <_lseek>
   84f20:	1c43      	adds	r3, r0, #1
   84f22:	d000      	beq.n	84f26 <_lseek_r+0x1a>
   84f24:	bd70      	pop	{r4, r5, r6, pc}
   84f26:	6823      	ldr	r3, [r4, #0]
   84f28:	2b00      	cmp	r3, #0
   84f2a:	d0fb      	beq.n	84f24 <_lseek_r+0x18>
   84f2c:	6033      	str	r3, [r6, #0]
   84f2e:	bd70      	pop	{r4, r5, r6, pc}
   84f30:	20070b88 	.word	0x20070b88

00084f34 <_read_r>:
   84f34:	b570      	push	{r4, r5, r6, lr}
   84f36:	4c08      	ldr	r4, [pc, #32]	; (84f58 <_read_r+0x24>)
   84f38:	4606      	mov	r6, r0
   84f3a:	2500      	movs	r5, #0
   84f3c:	4608      	mov	r0, r1
   84f3e:	4611      	mov	r1, r2
   84f40:	461a      	mov	r2, r3
   84f42:	6025      	str	r5, [r4, #0]
   84f44:	f7fb f96c 	bl	80220 <_read>
   84f48:	1c43      	adds	r3, r0, #1
   84f4a:	d000      	beq.n	84f4e <_read_r+0x1a>
   84f4c:	bd70      	pop	{r4, r5, r6, pc}
   84f4e:	6823      	ldr	r3, [r4, #0]
   84f50:	2b00      	cmp	r3, #0
   84f52:	d0fb      	beq.n	84f4c <_read_r+0x18>
   84f54:	6033      	str	r3, [r6, #0]
   84f56:	bd70      	pop	{r4, r5, r6, pc}
   84f58:	20070b88 	.word	0x20070b88

00084f5c <__aeabi_uldivmod>:
   84f5c:	b94b      	cbnz	r3, 84f72 <__aeabi_uldivmod+0x16>
   84f5e:	b942      	cbnz	r2, 84f72 <__aeabi_uldivmod+0x16>
   84f60:	2900      	cmp	r1, #0
   84f62:	bf08      	it	eq
   84f64:	2800      	cmpeq	r0, #0
   84f66:	d002      	beq.n	84f6e <__aeabi_uldivmod+0x12>
   84f68:	f04f 31ff 	mov.w	r1, #4294967295
   84f6c:	4608      	mov	r0, r1
   84f6e:	f000 b83b 	b.w	84fe8 <__aeabi_idiv0>
   84f72:	b082      	sub	sp, #8
   84f74:	46ec      	mov	ip, sp
   84f76:	e92d 5000 	stmdb	sp!, {ip, lr}
   84f7a:	f000 f81d 	bl	84fb8 <__gnu_uldivmod_helper>
   84f7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   84f82:	b002      	add	sp, #8
   84f84:	bc0c      	pop	{r2, r3}
   84f86:	4770      	bx	lr

00084f88 <__gnu_ldivmod_helper>:
   84f88:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84f8c:	9e08      	ldr	r6, [sp, #32]
   84f8e:	4614      	mov	r4, r2
   84f90:	461d      	mov	r5, r3
   84f92:	4680      	mov	r8, r0
   84f94:	4689      	mov	r9, r1
   84f96:	f000 f829 	bl	84fec <__divdi3>
   84f9a:	fb04 f301 	mul.w	r3, r4, r1
   84f9e:	fba4 ab00 	umull	sl, fp, r4, r0
   84fa2:	fb00 3205 	mla	r2, r0, r5, r3
   84fa6:	4493      	add	fp, r2
   84fa8:	ebb8 080a 	subs.w	r8, r8, sl
   84fac:	eb69 090b 	sbc.w	r9, r9, fp
   84fb0:	e9c6 8900 	strd	r8, r9, [r6]
   84fb4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084fb8 <__gnu_uldivmod_helper>:
   84fb8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   84fbc:	9e08      	ldr	r6, [sp, #32]
   84fbe:	4614      	mov	r4, r2
   84fc0:	461d      	mov	r5, r3
   84fc2:	4680      	mov	r8, r0
   84fc4:	4689      	mov	r9, r1
   84fc6:	f000 f961 	bl	8528c <__udivdi3>
   84fca:	fb00 f505 	mul.w	r5, r0, r5
   84fce:	fba0 ab04 	umull	sl, fp, r0, r4
   84fd2:	fb04 5401 	mla	r4, r4, r1, r5
   84fd6:	44a3      	add	fp, r4
   84fd8:	ebb8 080a 	subs.w	r8, r8, sl
   84fdc:	eb69 090b 	sbc.w	r9, r9, fp
   84fe0:	e9c6 8900 	strd	r8, r9, [r6]
   84fe4:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00084fe8 <__aeabi_idiv0>:
   84fe8:	4770      	bx	lr
   84fea:	bf00      	nop

00084fec <__divdi3>:
   84fec:	2900      	cmp	r1, #0
   84fee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   84ff2:	f2c0 80a1 	blt.w	85138 <__divdi3+0x14c>
   84ff6:	2400      	movs	r4, #0
   84ff8:	2b00      	cmp	r3, #0
   84ffa:	f2c0 8098 	blt.w	8512e <__divdi3+0x142>
   84ffe:	4615      	mov	r5, r2
   85000:	4606      	mov	r6, r0
   85002:	460f      	mov	r7, r1
   85004:	2b00      	cmp	r3, #0
   85006:	d13f      	bne.n	85088 <__divdi3+0x9c>
   85008:	428a      	cmp	r2, r1
   8500a:	d958      	bls.n	850be <__divdi3+0xd2>
   8500c:	fab2 f382 	clz	r3, r2
   85010:	b14b      	cbz	r3, 85026 <__divdi3+0x3a>
   85012:	f1c3 0220 	rsb	r2, r3, #32
   85016:	fa01 f703 	lsl.w	r7, r1, r3
   8501a:	fa20 f202 	lsr.w	r2, r0, r2
   8501e:	409d      	lsls	r5, r3
   85020:	fa00 f603 	lsl.w	r6, r0, r3
   85024:	4317      	orrs	r7, r2
   85026:	0c29      	lsrs	r1, r5, #16
   85028:	fbb7 f2f1 	udiv	r2, r7, r1
   8502c:	fb01 7712 	mls	r7, r1, r2, r7
   85030:	b2a8      	uxth	r0, r5
   85032:	fb00 f302 	mul.w	r3, r0, r2
   85036:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8503a:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8503e:	42bb      	cmp	r3, r7
   85040:	d909      	bls.n	85056 <__divdi3+0x6a>
   85042:	197f      	adds	r7, r7, r5
   85044:	f102 3cff 	add.w	ip, r2, #4294967295
   85048:	f080 8105 	bcs.w	85256 <__divdi3+0x26a>
   8504c:	42bb      	cmp	r3, r7
   8504e:	f240 8102 	bls.w	85256 <__divdi3+0x26a>
   85052:	3a02      	subs	r2, #2
   85054:	442f      	add	r7, r5
   85056:	1aff      	subs	r7, r7, r3
   85058:	fbb7 f3f1 	udiv	r3, r7, r1
   8505c:	fb01 7113 	mls	r1, r1, r3, r7
   85060:	fb00 f003 	mul.w	r0, r0, r3
   85064:	b2b6      	uxth	r6, r6
   85066:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   8506a:	4288      	cmp	r0, r1
   8506c:	d908      	bls.n	85080 <__divdi3+0x94>
   8506e:	1949      	adds	r1, r1, r5
   85070:	f103 37ff 	add.w	r7, r3, #4294967295
   85074:	f080 80f1 	bcs.w	8525a <__divdi3+0x26e>
   85078:	4288      	cmp	r0, r1
   8507a:	f240 80ee 	bls.w	8525a <__divdi3+0x26e>
   8507e:	3b02      	subs	r3, #2
   85080:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85084:	2300      	movs	r3, #0
   85086:	e003      	b.n	85090 <__divdi3+0xa4>
   85088:	428b      	cmp	r3, r1
   8508a:	d90a      	bls.n	850a2 <__divdi3+0xb6>
   8508c:	2300      	movs	r3, #0
   8508e:	461a      	mov	r2, r3
   85090:	4610      	mov	r0, r2
   85092:	4619      	mov	r1, r3
   85094:	b114      	cbz	r4, 8509c <__divdi3+0xb0>
   85096:	4240      	negs	r0, r0
   85098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8509c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   850a0:	4770      	bx	lr
   850a2:	fab3 f883 	clz	r8, r3
   850a6:	f1b8 0f00 	cmp.w	r8, #0
   850aa:	f040 8088 	bne.w	851be <__divdi3+0x1d2>
   850ae:	428b      	cmp	r3, r1
   850b0:	d302      	bcc.n	850b8 <__divdi3+0xcc>
   850b2:	4282      	cmp	r2, r0
   850b4:	f200 80e2 	bhi.w	8527c <__divdi3+0x290>
   850b8:	2300      	movs	r3, #0
   850ba:	2201      	movs	r2, #1
   850bc:	e7e8      	b.n	85090 <__divdi3+0xa4>
   850be:	b912      	cbnz	r2, 850c6 <__divdi3+0xda>
   850c0:	2301      	movs	r3, #1
   850c2:	fbb3 f5f2 	udiv	r5, r3, r2
   850c6:	fab5 f285 	clz	r2, r5
   850ca:	2a00      	cmp	r2, #0
   850cc:	d13a      	bne.n	85144 <__divdi3+0x158>
   850ce:	1b7f      	subs	r7, r7, r5
   850d0:	0c28      	lsrs	r0, r5, #16
   850d2:	fa1f fc85 	uxth.w	ip, r5
   850d6:	2301      	movs	r3, #1
   850d8:	fbb7 f1f0 	udiv	r1, r7, r0
   850dc:	fb00 7711 	mls	r7, r0, r1, r7
   850e0:	fb0c f201 	mul.w	r2, ip, r1
   850e4:	ea4f 4816 	mov.w	r8, r6, lsr #16
   850e8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   850ec:	42ba      	cmp	r2, r7
   850ee:	d907      	bls.n	85100 <__divdi3+0x114>
   850f0:	197f      	adds	r7, r7, r5
   850f2:	f101 38ff 	add.w	r8, r1, #4294967295
   850f6:	d202      	bcs.n	850fe <__divdi3+0x112>
   850f8:	42ba      	cmp	r2, r7
   850fa:	f200 80c4 	bhi.w	85286 <__divdi3+0x29a>
   850fe:	4641      	mov	r1, r8
   85100:	1abf      	subs	r7, r7, r2
   85102:	fbb7 f2f0 	udiv	r2, r7, r0
   85106:	fb00 7012 	mls	r0, r0, r2, r7
   8510a:	fb0c fc02 	mul.w	ip, ip, r2
   8510e:	b2b6      	uxth	r6, r6
   85110:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85114:	4584      	cmp	ip, r0
   85116:	d907      	bls.n	85128 <__divdi3+0x13c>
   85118:	1940      	adds	r0, r0, r5
   8511a:	f102 37ff 	add.w	r7, r2, #4294967295
   8511e:	d202      	bcs.n	85126 <__divdi3+0x13a>
   85120:	4584      	cmp	ip, r0
   85122:	f200 80ae 	bhi.w	85282 <__divdi3+0x296>
   85126:	463a      	mov	r2, r7
   85128:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   8512c:	e7b0      	b.n	85090 <__divdi3+0xa4>
   8512e:	43e4      	mvns	r4, r4
   85130:	4252      	negs	r2, r2
   85132:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85136:	e762      	b.n	84ffe <__divdi3+0x12>
   85138:	4240      	negs	r0, r0
   8513a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8513e:	f04f 34ff 	mov.w	r4, #4294967295
   85142:	e759      	b.n	84ff8 <__divdi3+0xc>
   85144:	4095      	lsls	r5, r2
   85146:	f1c2 0920 	rsb	r9, r2, #32
   8514a:	fa27 f109 	lsr.w	r1, r7, r9
   8514e:	fa26 f909 	lsr.w	r9, r6, r9
   85152:	4097      	lsls	r7, r2
   85154:	0c28      	lsrs	r0, r5, #16
   85156:	fbb1 f8f0 	udiv	r8, r1, r0
   8515a:	fb00 1118 	mls	r1, r0, r8, r1
   8515e:	fa1f fc85 	uxth.w	ip, r5
   85162:	fb0c f308 	mul.w	r3, ip, r8
   85166:	ea49 0907 	orr.w	r9, r9, r7
   8516a:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8516e:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   85172:	428b      	cmp	r3, r1
   85174:	fa06 f602 	lsl.w	r6, r6, r2
   85178:	d908      	bls.n	8518c <__divdi3+0x1a0>
   8517a:	1949      	adds	r1, r1, r5
   8517c:	f108 32ff 	add.w	r2, r8, #4294967295
   85180:	d27a      	bcs.n	85278 <__divdi3+0x28c>
   85182:	428b      	cmp	r3, r1
   85184:	d978      	bls.n	85278 <__divdi3+0x28c>
   85186:	f1a8 0802 	sub.w	r8, r8, #2
   8518a:	4429      	add	r1, r5
   8518c:	1ac9      	subs	r1, r1, r3
   8518e:	fbb1 f3f0 	udiv	r3, r1, r0
   85192:	fb00 1713 	mls	r7, r0, r3, r1
   85196:	fb0c f203 	mul.w	r2, ip, r3
   8519a:	fa1f f989 	uxth.w	r9, r9
   8519e:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   851a2:	42ba      	cmp	r2, r7
   851a4:	d907      	bls.n	851b6 <__divdi3+0x1ca>
   851a6:	197f      	adds	r7, r7, r5
   851a8:	f103 31ff 	add.w	r1, r3, #4294967295
   851ac:	d260      	bcs.n	85270 <__divdi3+0x284>
   851ae:	42ba      	cmp	r2, r7
   851b0:	d95e      	bls.n	85270 <__divdi3+0x284>
   851b2:	3b02      	subs	r3, #2
   851b4:	442f      	add	r7, r5
   851b6:	1abf      	subs	r7, r7, r2
   851b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   851bc:	e78c      	b.n	850d8 <__divdi3+0xec>
   851be:	f1c8 0220 	rsb	r2, r8, #32
   851c2:	fa25 f102 	lsr.w	r1, r5, r2
   851c6:	fa03 fc08 	lsl.w	ip, r3, r8
   851ca:	fa27 f302 	lsr.w	r3, r7, r2
   851ce:	fa20 f202 	lsr.w	r2, r0, r2
   851d2:	fa07 f708 	lsl.w	r7, r7, r8
   851d6:	ea41 0c0c 	orr.w	ip, r1, ip
   851da:	ea4f 491c 	mov.w	r9, ip, lsr #16
   851de:	fbb3 f1f9 	udiv	r1, r3, r9
   851e2:	fb09 3311 	mls	r3, r9, r1, r3
   851e6:	fa1f fa8c 	uxth.w	sl, ip
   851ea:	fb0a fb01 	mul.w	fp, sl, r1
   851ee:	4317      	orrs	r7, r2
   851f0:	0c3a      	lsrs	r2, r7, #16
   851f2:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   851f6:	459b      	cmp	fp, r3
   851f8:	fa05 f008 	lsl.w	r0, r5, r8
   851fc:	d908      	bls.n	85210 <__divdi3+0x224>
   851fe:	eb13 030c 	adds.w	r3, r3, ip
   85202:	f101 32ff 	add.w	r2, r1, #4294967295
   85206:	d235      	bcs.n	85274 <__divdi3+0x288>
   85208:	459b      	cmp	fp, r3
   8520a:	d933      	bls.n	85274 <__divdi3+0x288>
   8520c:	3902      	subs	r1, #2
   8520e:	4463      	add	r3, ip
   85210:	ebcb 0303 	rsb	r3, fp, r3
   85214:	fbb3 f2f9 	udiv	r2, r3, r9
   85218:	fb09 3312 	mls	r3, r9, r2, r3
   8521c:	fb0a fa02 	mul.w	sl, sl, r2
   85220:	b2bf      	uxth	r7, r7
   85222:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   85226:	45ba      	cmp	sl, r7
   85228:	d908      	bls.n	8523c <__divdi3+0x250>
   8522a:	eb17 070c 	adds.w	r7, r7, ip
   8522e:	f102 33ff 	add.w	r3, r2, #4294967295
   85232:	d21b      	bcs.n	8526c <__divdi3+0x280>
   85234:	45ba      	cmp	sl, r7
   85236:	d919      	bls.n	8526c <__divdi3+0x280>
   85238:	3a02      	subs	r2, #2
   8523a:	4467      	add	r7, ip
   8523c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   85240:	fba5 0100 	umull	r0, r1, r5, r0
   85244:	ebca 0707 	rsb	r7, sl, r7
   85248:	428f      	cmp	r7, r1
   8524a:	f04f 0300 	mov.w	r3, #0
   8524e:	d30a      	bcc.n	85266 <__divdi3+0x27a>
   85250:	d005      	beq.n	8525e <__divdi3+0x272>
   85252:	462a      	mov	r2, r5
   85254:	e71c      	b.n	85090 <__divdi3+0xa4>
   85256:	4662      	mov	r2, ip
   85258:	e6fd      	b.n	85056 <__divdi3+0x6a>
   8525a:	463b      	mov	r3, r7
   8525c:	e710      	b.n	85080 <__divdi3+0x94>
   8525e:	fa06 f608 	lsl.w	r6, r6, r8
   85262:	4286      	cmp	r6, r0
   85264:	d2f5      	bcs.n	85252 <__divdi3+0x266>
   85266:	1e6a      	subs	r2, r5, #1
   85268:	2300      	movs	r3, #0
   8526a:	e711      	b.n	85090 <__divdi3+0xa4>
   8526c:	461a      	mov	r2, r3
   8526e:	e7e5      	b.n	8523c <__divdi3+0x250>
   85270:	460b      	mov	r3, r1
   85272:	e7a0      	b.n	851b6 <__divdi3+0x1ca>
   85274:	4611      	mov	r1, r2
   85276:	e7cb      	b.n	85210 <__divdi3+0x224>
   85278:	4690      	mov	r8, r2
   8527a:	e787      	b.n	8518c <__divdi3+0x1a0>
   8527c:	4643      	mov	r3, r8
   8527e:	4642      	mov	r2, r8
   85280:	e706      	b.n	85090 <__divdi3+0xa4>
   85282:	3a02      	subs	r2, #2
   85284:	e750      	b.n	85128 <__divdi3+0x13c>
   85286:	3902      	subs	r1, #2
   85288:	442f      	add	r7, r5
   8528a:	e739      	b.n	85100 <__divdi3+0x114>

0008528c <__udivdi3>:
   8528c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85290:	4614      	mov	r4, r2
   85292:	4605      	mov	r5, r0
   85294:	460e      	mov	r6, r1
   85296:	2b00      	cmp	r3, #0
   85298:	d143      	bne.n	85322 <__udivdi3+0x96>
   8529a:	428a      	cmp	r2, r1
   8529c:	d953      	bls.n	85346 <__udivdi3+0xba>
   8529e:	fab2 f782 	clz	r7, r2
   852a2:	b157      	cbz	r7, 852ba <__udivdi3+0x2e>
   852a4:	f1c7 0620 	rsb	r6, r7, #32
   852a8:	fa20 f606 	lsr.w	r6, r0, r6
   852ac:	fa01 f307 	lsl.w	r3, r1, r7
   852b0:	fa02 f407 	lsl.w	r4, r2, r7
   852b4:	fa00 f507 	lsl.w	r5, r0, r7
   852b8:	431e      	orrs	r6, r3
   852ba:	0c21      	lsrs	r1, r4, #16
   852bc:	fbb6 f2f1 	udiv	r2, r6, r1
   852c0:	fb01 6612 	mls	r6, r1, r2, r6
   852c4:	b2a0      	uxth	r0, r4
   852c6:	fb00 f302 	mul.w	r3, r0, r2
   852ca:	0c2f      	lsrs	r7, r5, #16
   852cc:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   852d0:	42b3      	cmp	r3, r6
   852d2:	d909      	bls.n	852e8 <__udivdi3+0x5c>
   852d4:	1936      	adds	r6, r6, r4
   852d6:	f102 37ff 	add.w	r7, r2, #4294967295
   852da:	f080 80fd 	bcs.w	854d8 <__udivdi3+0x24c>
   852de:	42b3      	cmp	r3, r6
   852e0:	f240 80fa 	bls.w	854d8 <__udivdi3+0x24c>
   852e4:	3a02      	subs	r2, #2
   852e6:	4426      	add	r6, r4
   852e8:	1af6      	subs	r6, r6, r3
   852ea:	fbb6 f3f1 	udiv	r3, r6, r1
   852ee:	fb01 6113 	mls	r1, r1, r3, r6
   852f2:	fb00 f003 	mul.w	r0, r0, r3
   852f6:	b2ad      	uxth	r5, r5
   852f8:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   852fc:	4288      	cmp	r0, r1
   852fe:	d908      	bls.n	85312 <__udivdi3+0x86>
   85300:	1909      	adds	r1, r1, r4
   85302:	f103 36ff 	add.w	r6, r3, #4294967295
   85306:	f080 80e9 	bcs.w	854dc <__udivdi3+0x250>
   8530a:	4288      	cmp	r0, r1
   8530c:	f240 80e6 	bls.w	854dc <__udivdi3+0x250>
   85310:	3b02      	subs	r3, #2
   85312:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85316:	2300      	movs	r3, #0
   85318:	4610      	mov	r0, r2
   8531a:	4619      	mov	r1, r3
   8531c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85320:	4770      	bx	lr
   85322:	428b      	cmp	r3, r1
   85324:	d84c      	bhi.n	853c0 <__udivdi3+0x134>
   85326:	fab3 f683 	clz	r6, r3
   8532a:	2e00      	cmp	r6, #0
   8532c:	d14f      	bne.n	853ce <__udivdi3+0x142>
   8532e:	428b      	cmp	r3, r1
   85330:	d302      	bcc.n	85338 <__udivdi3+0xac>
   85332:	4282      	cmp	r2, r0
   85334:	f200 80dd 	bhi.w	854f2 <__udivdi3+0x266>
   85338:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8533c:	2300      	movs	r3, #0
   8533e:	2201      	movs	r2, #1
   85340:	4610      	mov	r0, r2
   85342:	4619      	mov	r1, r3
   85344:	4770      	bx	lr
   85346:	b912      	cbnz	r2, 8534e <__udivdi3+0xc2>
   85348:	2401      	movs	r4, #1
   8534a:	fbb4 f4f2 	udiv	r4, r4, r2
   8534e:	fab4 f284 	clz	r2, r4
   85352:	2a00      	cmp	r2, #0
   85354:	f040 8082 	bne.w	8545c <__udivdi3+0x1d0>
   85358:	1b09      	subs	r1, r1, r4
   8535a:	0c26      	lsrs	r6, r4, #16
   8535c:	b2a7      	uxth	r7, r4
   8535e:	2301      	movs	r3, #1
   85360:	fbb1 f0f6 	udiv	r0, r1, r6
   85364:	fb06 1110 	mls	r1, r6, r0, r1
   85368:	fb07 f200 	mul.w	r2, r7, r0
   8536c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   85370:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85374:	428a      	cmp	r2, r1
   85376:	d907      	bls.n	85388 <__udivdi3+0xfc>
   85378:	1909      	adds	r1, r1, r4
   8537a:	f100 3cff 	add.w	ip, r0, #4294967295
   8537e:	d202      	bcs.n	85386 <__udivdi3+0xfa>
   85380:	428a      	cmp	r2, r1
   85382:	f200 80c8 	bhi.w	85516 <__udivdi3+0x28a>
   85386:	4660      	mov	r0, ip
   85388:	1a89      	subs	r1, r1, r2
   8538a:	fbb1 f2f6 	udiv	r2, r1, r6
   8538e:	fb06 1112 	mls	r1, r6, r2, r1
   85392:	fb07 f702 	mul.w	r7, r7, r2
   85396:	b2ad      	uxth	r5, r5
   85398:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   8539c:	42af      	cmp	r7, r5
   8539e:	d908      	bls.n	853b2 <__udivdi3+0x126>
   853a0:	192c      	adds	r4, r5, r4
   853a2:	f102 31ff 	add.w	r1, r2, #4294967295
   853a6:	f080 809b 	bcs.w	854e0 <__udivdi3+0x254>
   853aa:	42a7      	cmp	r7, r4
   853ac:	f240 8098 	bls.w	854e0 <__udivdi3+0x254>
   853b0:	3a02      	subs	r2, #2
   853b2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   853b6:	4610      	mov	r0, r2
   853b8:	4619      	mov	r1, r3
   853ba:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   853be:	4770      	bx	lr
   853c0:	2300      	movs	r3, #0
   853c2:	461a      	mov	r2, r3
   853c4:	4610      	mov	r0, r2
   853c6:	4619      	mov	r1, r3
   853c8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   853cc:	4770      	bx	lr
   853ce:	f1c6 0520 	rsb	r5, r6, #32
   853d2:	fa22 f705 	lsr.w	r7, r2, r5
   853d6:	fa03 f406 	lsl.w	r4, r3, r6
   853da:	fa21 f305 	lsr.w	r3, r1, r5
   853de:	fa01 fb06 	lsl.w	fp, r1, r6
   853e2:	fa20 f505 	lsr.w	r5, r0, r5
   853e6:	433c      	orrs	r4, r7
   853e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   853ec:	fbb3 fcf8 	udiv	ip, r3, r8
   853f0:	fb08 331c 	mls	r3, r8, ip, r3
   853f4:	fa1f f984 	uxth.w	r9, r4
   853f8:	fb09 fa0c 	mul.w	sl, r9, ip
   853fc:	ea45 0b0b 	orr.w	fp, r5, fp
   85400:	ea4f 451b 	mov.w	r5, fp, lsr #16
   85404:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   85408:	459a      	cmp	sl, r3
   8540a:	fa02 f206 	lsl.w	r2, r2, r6
   8540e:	d904      	bls.n	8541a <__udivdi3+0x18e>
   85410:	191b      	adds	r3, r3, r4
   85412:	f10c 35ff 	add.w	r5, ip, #4294967295
   85416:	d36f      	bcc.n	854f8 <__udivdi3+0x26c>
   85418:	46ac      	mov	ip, r5
   8541a:	ebca 0303 	rsb	r3, sl, r3
   8541e:	fbb3 f5f8 	udiv	r5, r3, r8
   85422:	fb08 3315 	mls	r3, r8, r5, r3
   85426:	fb09 f905 	mul.w	r9, r9, r5
   8542a:	fa1f fb8b 	uxth.w	fp, fp
   8542e:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   85432:	45b9      	cmp	r9, r7
   85434:	d904      	bls.n	85440 <__udivdi3+0x1b4>
   85436:	193f      	adds	r7, r7, r4
   85438:	f105 33ff 	add.w	r3, r5, #4294967295
   8543c:	d362      	bcc.n	85504 <__udivdi3+0x278>
   8543e:	461d      	mov	r5, r3
   85440:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85444:	fbac 2302 	umull	r2, r3, ip, r2
   85448:	ebc9 0707 	rsb	r7, r9, r7
   8544c:	429f      	cmp	r7, r3
   8544e:	f04f 0500 	mov.w	r5, #0
   85452:	d34a      	bcc.n	854ea <__udivdi3+0x25e>
   85454:	d046      	beq.n	854e4 <__udivdi3+0x258>
   85456:	4662      	mov	r2, ip
   85458:	462b      	mov	r3, r5
   8545a:	e75d      	b.n	85318 <__udivdi3+0x8c>
   8545c:	4094      	lsls	r4, r2
   8545e:	f1c2 0920 	rsb	r9, r2, #32
   85462:	fa21 fc09 	lsr.w	ip, r1, r9
   85466:	4091      	lsls	r1, r2
   85468:	fa20 f909 	lsr.w	r9, r0, r9
   8546c:	0c26      	lsrs	r6, r4, #16
   8546e:	fbbc f8f6 	udiv	r8, ip, r6
   85472:	fb06 cc18 	mls	ip, r6, r8, ip
   85476:	b2a7      	uxth	r7, r4
   85478:	fb07 f308 	mul.w	r3, r7, r8
   8547c:	ea49 0901 	orr.w	r9, r9, r1
   85480:	ea4f 4119 	mov.w	r1, r9, lsr #16
   85484:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   85488:	4563      	cmp	r3, ip
   8548a:	fa00 f502 	lsl.w	r5, r0, r2
   8548e:	d909      	bls.n	854a4 <__udivdi3+0x218>
   85490:	eb1c 0c04 	adds.w	ip, ip, r4
   85494:	f108 32ff 	add.w	r2, r8, #4294967295
   85498:	d23b      	bcs.n	85512 <__udivdi3+0x286>
   8549a:	4563      	cmp	r3, ip
   8549c:	d939      	bls.n	85512 <__udivdi3+0x286>
   8549e:	f1a8 0802 	sub.w	r8, r8, #2
   854a2:	44a4      	add	ip, r4
   854a4:	ebc3 0c0c 	rsb	ip, r3, ip
   854a8:	fbbc f3f6 	udiv	r3, ip, r6
   854ac:	fb06 c113 	mls	r1, r6, r3, ip
   854b0:	fb07 f203 	mul.w	r2, r7, r3
   854b4:	fa1f f989 	uxth.w	r9, r9
   854b8:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   854bc:	428a      	cmp	r2, r1
   854be:	d907      	bls.n	854d0 <__udivdi3+0x244>
   854c0:	1909      	adds	r1, r1, r4
   854c2:	f103 30ff 	add.w	r0, r3, #4294967295
   854c6:	d222      	bcs.n	8550e <__udivdi3+0x282>
   854c8:	428a      	cmp	r2, r1
   854ca:	d920      	bls.n	8550e <__udivdi3+0x282>
   854cc:	3b02      	subs	r3, #2
   854ce:	4421      	add	r1, r4
   854d0:	1a89      	subs	r1, r1, r2
   854d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   854d6:	e743      	b.n	85360 <__udivdi3+0xd4>
   854d8:	463a      	mov	r2, r7
   854da:	e705      	b.n	852e8 <__udivdi3+0x5c>
   854dc:	4633      	mov	r3, r6
   854de:	e718      	b.n	85312 <__udivdi3+0x86>
   854e0:	460a      	mov	r2, r1
   854e2:	e766      	b.n	853b2 <__udivdi3+0x126>
   854e4:	40b0      	lsls	r0, r6
   854e6:	4290      	cmp	r0, r2
   854e8:	d2b5      	bcs.n	85456 <__udivdi3+0x1ca>
   854ea:	f10c 32ff 	add.w	r2, ip, #4294967295
   854ee:	2300      	movs	r3, #0
   854f0:	e712      	b.n	85318 <__udivdi3+0x8c>
   854f2:	4633      	mov	r3, r6
   854f4:	4632      	mov	r2, r6
   854f6:	e70f      	b.n	85318 <__udivdi3+0x8c>
   854f8:	459a      	cmp	sl, r3
   854fa:	d98d      	bls.n	85418 <__udivdi3+0x18c>
   854fc:	f1ac 0c02 	sub.w	ip, ip, #2
   85500:	4423      	add	r3, r4
   85502:	e78a      	b.n	8541a <__udivdi3+0x18e>
   85504:	45b9      	cmp	r9, r7
   85506:	d99a      	bls.n	8543e <__udivdi3+0x1b2>
   85508:	3d02      	subs	r5, #2
   8550a:	4427      	add	r7, r4
   8550c:	e798      	b.n	85440 <__udivdi3+0x1b4>
   8550e:	4603      	mov	r3, r0
   85510:	e7de      	b.n	854d0 <__udivdi3+0x244>
   85512:	4690      	mov	r8, r2
   85514:	e7c6      	b.n	854a4 <__udivdi3+0x218>
   85516:	3802      	subs	r0, #2
   85518:	4421      	add	r1, r4
   8551a:	e735      	b.n	85388 <__udivdi3+0xfc>
   8551c:	736e6f43 	.word	0x736e6f43
   85520:	20656c6f 	.word	0x20656c6f
   85524:	64616572 	.word	0x64616572
   85528:	00000a79 	.word	0x00000a79
   8552c:	3d3d3d3d 	.word	0x3d3d3d3d
   85530:	3d3d3d3d 	.word	0x3d3d3d3d
   85534:	3d3d3d3d 	.word	0x3d3d3d3d
   85538:	00000a3d 	.word	0x00000a3d
   8553c:	0c040800 	.word	0x0c040800
   85540:	0e060a02 	.word	0x0e060a02
   85544:	0d050901 	.word	0x0d050901
   85548:	0f070b03 	.word	0x0f070b03
   8554c:	742f2e2e 	.word	0x742f2e2e
   85550:	2f747365 	.word	0x2f747365
   85554:	74736574 	.word	0x74736574
   85558:	6c65645f 	.word	0x6c65645f
   8555c:	75467961 	.word	0x75467961
   85560:	6974636e 	.word	0x6974636e
   85564:	2e736e6f 	.word	0x2e736e6f
   85568:	00000063 	.word	0x00000063
   8556c:	74736574 	.word	0x74736574
   85570:	6c65645f 	.word	0x6c65645f
   85574:	69547961 	.word	0x69547961
   85578:	4972656d 	.word	0x4972656d
   8557c:	696e4973 	.word	0x696e4973
   85580:	6c616974 	.word	0x6c616974
   85584:	64657369 	.word	0x64657369
   85588:	706f7250 	.word	0x706f7250
   8558c:	796c7265 	.word	0x796c7265
   85590:	00000000 	.word	0x00000000
   85594:	74736574 	.word	0x74736574
   85598:	6c65645f 	.word	0x6c65645f
   8559c:	6f437961 	.word	0x6f437961
   855a0:	73746e75 	.word	0x73746e75
   855a4:	706f7250 	.word	0x706f7250
   855a8:	796c7265 	.word	0x796c7265
   855ac:	00000000 	.word	0x00000000
   855b0:	742f2e2e 	.word	0x742f2e2e
   855b4:	2f747365 	.word	0x2f747365
   855b8:	74736574 	.word	0x74736574
   855bc:	64636c5f 	.word	0x64636c5f
   855c0:	636e7546 	.word	0x636e7546
   855c4:	6e6f6974 	.word	0x6e6f6974
   855c8:	00632e73 	.word	0x00632e73
   855cc:	74736574 	.word	0x74736574
   855d0:	696e695f 	.word	0x696e695f
   855d4:	6c616974 	.word	0x6c616974
   855d8:	74617369 	.word	0x74617369
   855dc:	664f6e69 	.word	0x664f6e69
   855e0:	4c656854 	.word	0x4c656854
   855e4:	00004443 	.word	0x00004443
   855e8:	74736574 	.word	0x74736574
   855ec:	6972775f 	.word	0x6972775f
   855f0:	676e6974 	.word	0x676e6974
   855f4:	72616843 	.word	0x72616843
   855f8:	65746361 	.word	0x65746361
   855fc:	6f547372 	.word	0x6f547372
   85600:	4c656854 	.word	0x4c656854
   85604:	00004443 	.word	0x00004443
   85608:	74736574 	.word	0x74736574
   8560c:	656c635f 	.word	0x656c635f
   85610:	6e697261 	.word	0x6e697261
   85614:	65685467 	.word	0x65685467
   85618:	4444434c 	.word	0x4444434c
   8561c:	6c707369 	.word	0x6c707369
   85620:	00007961 	.word	0x00007961
   85624:	742f2e2e 	.word	0x742f2e2e
   85628:	2f747365 	.word	0x2f747365
   8562c:	74736574 	.word	0x74736574
   85630:	6364615f 	.word	0x6364615f
   85634:	636e7546 	.word	0x636e7546
   85638:	6e6f6974 	.word	0x6e6f6974
   8563c:	00632e73 	.word	0x00632e73
   85640:	74736574 	.word	0x74736574
   85644:	4344415f 	.word	0x4344415f
   85648:	65766e6f 	.word	0x65766e6f
   8564c:	72657472 	.word	0x72657472
   85650:	74696e49 	.word	0x74696e49
   85654:	696c6169 	.word	0x696c6169
   85658:	50736573 	.word	0x50736573
   8565c:	65706f72 	.word	0x65706f72
   85660:	00796c72 	.word	0x00796c72
   85664:	74736574 	.word	0x74736574
   85668:	4344415f 	.word	0x4344415f
   8566c:	65766e6f 	.word	0x65766e6f
   85670:	72657472 	.word	0x72657472
   85674:	64616552 	.word	0x64616552
   85678:	6c615673 	.word	0x6c615673
   8567c:	69576575 	.word	0x69576575
   85680:	6f4e6874 	.word	0x6f4e6874
   85684:	74747542 	.word	0x74747542
   85688:	72506e6f 	.word	0x72506e6f
   8568c:	65737365 	.word	0x65737365
   85690:	00000064 	.word	0x00000064
   85694:	742f2e2e 	.word	0x742f2e2e
   85698:	2f747365 	.word	0x2f747365
   8569c:	74736574 	.word	0x74736574
   856a0:	7475625f 	.word	0x7475625f
   856a4:	736e6f74 	.word	0x736e6f74
   856a8:	0000632e 	.word	0x0000632e
   856ac:	74736574 	.word	0x74736574
   856b0:	426f6e5f 	.word	0x426f6e5f
   856b4:	6f747475 	.word	0x6f747475
   856b8:	5073496e 	.word	0x5073496e
   856bc:	73736572 	.word	0x73736572
   856c0:	00006465 	.word	0x00006465
   856c4:	742f2e2e 	.word	0x742f2e2e
   856c8:	2f747365 	.word	0x2f747365
   856cc:	74736574 	.word	0x74736574
   856d0:	64636c5f 	.word	0x64636c5f
   856d4:	6c707041 	.word	0x6c707041
   856d8:	74616369 	.word	0x74616369
   856dc:	2e6e6f69 	.word	0x2e6e6f69
   856e0:	00000063 	.word	0x00000063
   856e4:	74736574 	.word	0x74736574
   856e8:	6972775f 	.word	0x6972775f
   856ec:	676e6974 	.word	0x676e6974
   856f0:	67694434 	.word	0x67694434
   856f4:	754e7469 	.word	0x754e7469
   856f8:	7265626d 	.word	0x7265626d
   856fc:	68546e4f 	.word	0x68546e4f
   85700:	44434c65 	.word	0x44434c65
   85704:	70736944 	.word	0x70736944
   85708:	0079616c 	.word	0x0079616c
   8570c:	74736574 	.word	0x74736574
   85710:	6972775f 	.word	0x6972775f
   85714:	676e6974 	.word	0x676e6974
   85718:	69637341 	.word	0x69637341
   8571c:	72745369 	.word	0x72745369
   85720:	4f676e69 	.word	0x4f676e69
   85724:	6568546e 	.word	0x6568546e
   85728:	4444434c 	.word	0x4444434c
   8572c:	6c707369 	.word	0x6c707369
   85730:	00007961 	.word	0x00007961
   85734:	74736574 	.word	0x74736574
   85738:	6972775f 	.word	0x6972775f
   8573c:	676e6974 	.word	0x676e6974
   85740:	74747542 	.word	0x74747542
   85744:	6e4f6e6f 	.word	0x6e4f6e6f
   85748:	4c656854 	.word	0x4c656854
   8574c:	69444443 	.word	0x69444443
   85750:	616c7073 	.word	0x616c7073
   85754:	00000079 	.word	0x00000079
   85758:	20434d50 	.word	0x20434d50
   8575c:	20736168 	.word	0x20736168
   85760:	20746f6e 	.word	0x20746f6e
   85764:	62616e65 	.word	0x62616e65
   85768:	2064656c 	.word	0x2064656c
   8576c:	20656874 	.word	0x20656874
   85770:	69726570 	.word	0x69726570
   85774:	72656870 	.word	0x72656870
   85778:	41206c61 	.word	0x41206c61
   8577c:	63204344 	.word	0x63204344
   85780:	6b636f6c 	.word	0x6b636f6c
   85784:	00000000 	.word	0x00000000
   85788:	20434441 	.word	0x20434441
   8578c:	6e616863 	.word	0x6e616863
   85790:	206c656e 	.word	0x206c656e
   85794:	73692037 	.word	0x73692037
   85798:	746f6e20 	.word	0x746f6e20
   8579c:	616e6520 	.word	0x616e6520
   857a0:	64656c62 	.word	0x64656c62
   857a4:	00000000 	.word	0x00000000
   857a8:	70784520 	.word	0x70784520
   857ac:	65746365 	.word	0x65746365
   857b0:	52542064 	.word	0x52542064
   857b4:	57204555 	.word	0x57204555
   857b8:	46207361 	.word	0x46207361
   857bc:	45534c41 	.word	0x45534c41
   857c0:	00000000 	.word	0x00000000
   857c4:	70784520 	.word	0x70784520
   857c8:	65746365 	.word	0x65746365
   857cc:	41462064 	.word	0x41462064
   857d0:	2045534c 	.word	0x2045534c
   857d4:	20736157 	.word	0x20736157
   857d8:	45555254 	.word	0x45555254
   857dc:	00000000 	.word	0x00000000
   857e0:	74736554 	.word	0x74736554
   857e4:	65766520 	.word	0x65766520
   857e8:	68747972 	.word	0x68747972
   857ec:	21676e69 	.word	0x21676e69
   857f0:	00000000 	.word	0x00000000

000857f4 <p_PIOC_ODSR>:
   857f4:	400e1238                                8..@

000857f8 <UnitySizeMask>:
   857f8:	000000ff 0000ffff 0000ffff ffffffff     ................
   85808:	ffffffff ffffffff ffffffff              ............

00085814 <UnityStrOk>:
   85814:	00004b4f                                OK..

00085818 <UnityStrSpacer>:
   85818:	0000202e                                . ..

0008581c <UnityStrWas>:
   8581c:	73615720 00000020                        Was ...

00085824 <UnityStrFail>:
   85824:	4c494146 00000000                       FAIL....

0008582c <UnityStrExpected>:
   8582c:	70784520 65746365 00002064               Expected ..

00085838 <UnityStrBreaker>:
   85838:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   85848:	2d2d2d2d 002d2d2d                       -------.

00085850 <UnityStrResultsFailures>:
   85850:	69614620 6572756c 00002073               Failures ..

0008585c <UnityStrResultsIgnored>:
   8585c:	6e674920 6465726f 00000020               Ignored ...

00085868 <UnityStrResultsTests>:
   85868:	73655420 00207374                        Tests .

00085870 <UnityStrPass>:
   85870:	53534150 00000000                       PASS....

00085878 <UnityStrDelta>:
   85878:	6c615620 20736575 20746f4e 68746957      Values Not With
   85888:	44206e69 61746c65 00000020 00000043     in Delta ...C...

00085898 <_global_impure_ptr>:
   85898:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   858a8:	46454443 00000000 33323130 37363534     CDEF....01234567
   858b8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   858c8:	0000296c                                l)..

000858cc <zeroes.6721>:
   858cc:	30303030 30303030 30303030 30303030     0000000000000000

000858dc <blanks.6720>:
   858dc:	20202020 20202020 20202020 20202020                     

000858ec <_init>:
   858ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   858ee:	bf00      	nop
   858f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   858f2:	bc08      	pop	{r3}
   858f4:	469e      	mov	lr, r3
   858f6:	4770      	bx	lr

000858f8 <__init_array_start>:
   858f8:	000836b9 	.word	0x000836b9

000858fc <__frame_dummy_init_array_entry>:
   858fc:	00080119                                ....

00085900 <_fini>:
   85900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85902:	bf00      	nop
   85904:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85906:	bc08      	pop	{r3}
   85908:	469e      	mov	lr, r3
   8590a:	4770      	bx	lr

0008590c <__fini_array_start>:
   8590c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00085894 00000000 00000000 00000000     .X..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <lc_ctype_charset>:
20070564:	49435341 00000049 00000000 00000000     ASCII...........
	...

20070584 <__mb_cur_max>:
20070584:	00000001                                ....

20070588 <__malloc_av_>:
	...
20070590:	20070588 20070588 20070590 20070590     ... ... ... ... 
200705a0:	20070598 20070598 200705a0 200705a0     ... ... ... ... 
200705b0:	200705a8 200705a8 200705b0 200705b0     ... ... ... ... 
200705c0:	200705b8 200705b8 200705c0 200705c0     ... ... ... ... 
200705d0:	200705c8 200705c8 200705d0 200705d0     ... ... ... ... 
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 

20070990 <__malloc_trim_threshold>:
20070990:	00020000                                ....

20070994 <__malloc_sbrk_base>:
20070994:	ffffffff                                ....

20070998 <__wctomb>:
20070998:	00084d21                                !M..
